package com.ruoyi.deviceManagement.deviceTreeNode.service;

import java.util.List;

import com.ruoyi.deviceManagement.deviceTreeNode.domain.AthenaDeviceNode;

/**
 * 树节点定义Service接口
 *
 * @author ruoyi
 * @date 2022-09-06
 */
public interface AthenaDeviceNodeService {
    /**
     * 查询树节点定义
     *
     * @param deviceNodeId 树节点定义主键
     * @return 树节点定义
     */
    public AthenaDeviceNode selectAthenaDeviceNodeByDeviceNodeId(Long deviceNodeId);

    /**
     * 查询树节点定义列表
     *
     * @param athenaDeviceNode 树节点定义
     * @return 树节点定义集合
     */
    List<AthenaDeviceNode> selectAthenaDeviceNodeList(AthenaDeviceNode athenaDeviceNode);

    /**
     * 新增树节点定义
     *
     * @param athenaDeviceNode 树节点定义
     * @return 结果
     */
    int insertAthenaDeviceNode(AthenaDeviceNode athenaDeviceNode);

    /**
     * 根据名称和编号查询数量
     *
     * @param athenaDeviceNode 树节点定义
     * @return 树节点定义数量
     */
    int selectAthenaDeviceNodeCount(AthenaDeviceNode athenaDeviceNode);

    /**
     * 删除时 非主键集合
     *
     * @param deviceNodeIds id集合
     * @return 树节点定义数量
     */
    List<AthenaDeviceNode> selectAthenaDeviceNodeDelete(Long[] deviceNodeIds);


    /**
     * 删除时 主键集合
     *
     * @param deviceNodeIds id集合
     * @return 树节点定义数量
     */
    List<AthenaDeviceNode> selectAthenaDeviceNodeDeleteList(Long[] deviceNodeIds);

    /**
     * 修改树节点定义
     *
     * @param athenaDeviceNode 树节点定义
     * @return 结果
     */
    boolean updateAthenaDeviceNode(AthenaDeviceNode athenaDeviceNode);

    /**
     * 批量删除树节点定义
     *
     * @param deviceNodeIds 需要删除的树节点定义主键集合
     * @return 结果
     */
    int deleteAthenaDeviceNodeByDeviceNodeIds(Long[] deviceNodeIds);

    /**
     * 删除树节点定义信息
     *
     * @param deviceNodeId 树节点定义主键
     * @return 结果
     */
    int deleteAthenaDeviceNodeByDeviceNodeId(Long deviceNodeId);
}

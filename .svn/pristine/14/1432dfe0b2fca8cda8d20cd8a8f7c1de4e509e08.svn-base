package com.ruoyi.deviceManagement.deviceTreeNode.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.deviceManagement.deviceTreeNode.domain.AthenaDeviceNode;
import com.ruoyi.deviceManagement.deviceTreeNode.service.AthenaDeviceNodeService;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.common.core.page.TableDataInfo;

/**
 * 树节点定义Controller
 *
 * @author ruoyi
 * @date 2022-09-06
 */
@RestController
@RequestMapping("/deviceTree/node")
public class AthenaDeviceNodeController extends BaseController
{
    @Autowired
    private AthenaDeviceNodeService athenaDeviceNodeService;

    /**
     * 查询树节点定义列表
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:list')")
    @GetMapping("/list")
    public TableDataInfo list(AthenaDeviceNode athenaDeviceNode)
    {
        startPage();
        List<AthenaDeviceNode> list = athenaDeviceNodeService.selectAthenaDeviceNodeList(athenaDeviceNode);
        return getDataTable(list);
    }

    /**
     * 查询树节点定义数据
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:list')")
    @GetMapping("/listDate")
    public AjaxResult listDate(AthenaDeviceNode athenaDeviceNode)
    {
        List<AthenaDeviceNode> list = athenaDeviceNodeService.selectAthenaDeviceNodeList(athenaDeviceNode);
        return AjaxResult.success(list);
    }

    /**
     * 导出树节点定义列表
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:export')")
    @Log(title = "树节点定义", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, AthenaDeviceNode athenaDeviceNode)
    {
        List<AthenaDeviceNode> list = athenaDeviceNodeService.selectAthenaDeviceNodeList(athenaDeviceNode);
        ExcelUtil<AthenaDeviceNode> util = new ExcelUtil<>(AthenaDeviceNode.class);
        util.exportExcel(response, list, "树节点定义数据");
    }

    /**
     * 获取树节点定义详细信息
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:query')")
    @GetMapping(value = "/{deviceNodeId}")
    public AjaxResult getInfo(@PathVariable("deviceNodeId") Long deviceNodeId)
    {
        return AjaxResult.success(athenaDeviceNodeService.selectAthenaDeviceNodeByDeviceNodeId(deviceNodeId));
    }

    /**
     * 新增树节点定义
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:add')")
    @Log(title = "树节点定义", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody AthenaDeviceNode athenaDeviceNode)
    {
        if (athenaDeviceNodeService.selectAthenaDeviceNodeCount(athenaDeviceNode)>=1){
            return AjaxResult.error("节点类型或节点名称重复！");
        }
        return toAjax(athenaDeviceNodeService.insertAthenaDeviceNode(athenaDeviceNode));
    }

    /**
     * 修改树节点定义
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:edit')")
    @Log(title = "树节点定义", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody AthenaDeviceNode athenaDeviceNode)
    {
        if (athenaDeviceNodeService.selectAthenaDeviceNodeCount(athenaDeviceNode)>=1){
            return AjaxResult.error("节点类型或节点名称重复！");
        }
        return toAjax(athenaDeviceNodeService.updateAthenaDeviceNode(athenaDeviceNode));
    }

    /**
     * 删除树节点定义
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:node:remove')")
    @Log(title = "树节点定义", businessType = BusinessType.DELETE)
	@DeleteMapping("/{deviceNodeIds}")
    public AjaxResult remove(@PathVariable Long[] deviceNodeIds)
    {
            for(AthenaDeviceNode data:athenaDeviceNodeService.selectAthenaDeviceNodeDeleteList(deviceNodeIds)){
                for(AthenaDeviceNode item:athenaDeviceNodeService.selectAthenaDeviceNodeDelete(deviceNodeIds)){
                    if(item.getDeviceNodeFunType()==null){
                        continue;
                    }
                    if(item.getDeviceNodeFunType().contains(data.getDeviceNodeCode())){
                        return AjaxResult.error("该节点类型已使用，无法删除！");
                    }
                }
            }
            return toAjax(athenaDeviceNodeService.deleteAthenaDeviceNodeByDeviceNodeIds(deviceNodeIds));
    }
}

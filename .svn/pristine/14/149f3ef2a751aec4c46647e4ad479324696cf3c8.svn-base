package com.zc.iot.service.impl;

import java.util.List;

import com.ruoyi.common.constant.HttpStatus;
import com.ruoyi.common.exception.ServiceException;
import com.ruoyi.common.utils.DateUtils;
import com.zc.iot.domain.IotCategory;
import com.zc.iot.mapper.IotCategoryMapper;
import org.springframework.stereotype.Service;
import com.zc.iot.mapper.IotProductMapper;
import com.zc.iot.domain.IotProduct;
import com.zc.iot.service.IIotProductService;

import javax.annotation.Resource;

/**
 * 产品Service业务层处理
 *
 * @author xiepufeng
 * @date 2022-05-31
 */
@Service
public class IotProductServiceImpl implements IIotProductService
{
    @Resource
    private IotProductMapper iotProductMapper;

    @Resource
    private IotCategoryMapper iotCategoryMapper;

    /**
     * 查询产品
     *
     * @param id 产品主键
     * @return 产品
     */
    @Override
    public IotProduct selectIotProductById(Long id)
    {
        return iotProductMapper.selectIotProductById(id);
    }

    /**
     * 查询产品列表
     *
     * @param iotProduct 产品
     * @return 产品
     */
    @Override
    public List<IotProduct> selectIotProductList(IotProduct iotProduct)
    {
        return iotProductMapper.selectIotProductList(iotProduct);
    }

    /**
     * 新增产品
     *
     * @param iotProduct 产品
     * @return 结果
     */
    @Override
    public int insertIotProduct(IotProduct iotProduct)
    {

        // 1. 验证产品编号是否重复
        // 1.1 获取产品编号数据
        String productCode = iotProduct.getProductCode();

        // 1.2 根据产品编号查询产品数据
        IotProduct iotProduct1 = iotProductMapper.selectIotProductByProductCode(productCode);

        if (iotProduct1 != null)
        {
            // 1.3 根据产品编号查询出产品数据，产品编号已存在
            throw new ServiceException("产品编号不能重复", HttpStatus.BAD_REQUEST);
        }

        // 2. 查询品类是否存在
        // 2.1 获取品类id
        Long categoryId = iotProduct.getCategoryId();

        // 2.2 根据品类id查询品类数据
        IotCategory iotCategory = iotCategoryMapper.selectIotCategoryById(categoryId);

        if (iotCategory == null)
        {
            // 2.3 根据品类id查询不到品类信息
            throw new ServiceException("所属品类不存在", HttpStatus.BAD_REQUEST);
        }

        // 3. 查询消息协议是否存在 todo 后续添加
        
        iotProduct.setCreateTime(DateUtils.getNowDate());
        return iotProductMapper.insertIotProduct(iotProduct);
    }

    /**
     * 修改产品
     *
     * @param iotProduct 产品
     * @return 结果
     */
    @Override
    public int updateIotProduct(IotProduct iotProduct)
    {
        // 1. 主键不能为空
        Long id = iotProduct.getId();

        if (id == null)
        {
            throw new ServiceException("产品主键不能为空", HttpStatus.BAD_REQUEST);
        }

        // 2. 查询品类是否存在
        // 2.1 获取品类id
        Long categoryId = iotProduct.getCategoryId();

        // 2.2 根据品类id查询品类数据
        IotCategory iotCategory = iotCategoryMapper.selectIotCategoryById(categoryId);

        if (iotCategory == null)
        {
            // 2.3 根据品类id查询不到品类信息
            throw new ServiceException("所属品类不存在", HttpStatus.BAD_REQUEST);
        }

        // 3. 查询消息协议是否存在 todo 后续添加

        iotProduct.setUpdateTime(DateUtils.getNowDate());
        return iotProductMapper.updateIotProduct(iotProduct);
    }

    /**
     * 批量删除产品
     *
     * @param ids 需要删除的产品主键
     * @return 结果
     */
    @Override
    public int deleteIotProductByIds(Long[] ids)
    {
        return iotProductMapper.deleteIotProductByIds(ids);
    }

    /**
     * 删除产品信息
     *
     * @param id 产品主键
     * @return 结果
     */
    @Override
    public int deleteIotProductById(Long id)
    {
        return iotProductMapper.deleteIotProductById(id);
    }

    /**
     * 修改产品发布状态
     *
     * @param id           产品主键
     * @param publishState 发布状态
     * @return 结果
     */
    @Override
    public int updatePublishState(Long id, Byte publishState)
    {

        if (id == null)
        {
            throw new ServiceException("产品主键不能为空", HttpStatus.BAD_REQUEST);
        }

        iotProductMapper.selectIotProductById(id);

        return 1;

    }
}

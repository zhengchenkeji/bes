package com.zc.efounder.JEnterprise.service.baseData.impl;

import java.text.SimpleDateFormat;
import java.util.*;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.SecurityUtils;
import com.ruoyi.common.utils.StringUtils;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.efounder.JEnterprise.domain.baseData.Equipment;
import com.zc.efounder.JEnterprise.domain.baseData.ProductItemData;
import com.zc.efounder.JEnterprise.mapper.baseData.EquipmentMapper;
import com.zc.efounder.JEnterprise.service.baseData.EquipmentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

/**
 * 物联设备Service业务层处理
 *
 * @author gaojikun
 * @date 2023-03-08
 */
@Service
public class EquipmentServiceImpl implements EquipmentService {
    @Autowired
    private EquipmentMapper athenaBesEquipmentMapper;

    @Resource
    private RedisCache redisCache;

    @PostConstruct
    public void init() {
        /**
         * 添加数据到 redis 缓存
         */
        addEquipmentCache();

    }

    /**
     * 添加数据到 redis 缓存
     */
    public void addEquipmentCache() {
        // 获取全部物联设备列表数据
        List<Equipment> equipments = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(null);

        // 清除 redis 缓存数据
        redisCache.deleteObject(RedisKeyConstants.BES_BasicData_Equipment);

        if (equipments == null || equipments.isEmpty()) {
            return;
        }

        // 添加 redis 缓存数据
        equipments.forEach(val -> {
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, val.getId(), val);
        });
    }

    /**
     * 查询物联设备
     *
     * @param id 物联设备主键
     * @return 物联设备
     */
    @Override
    public AjaxResult selectAthenaBesEquipmentById(Long id) {
        if (id == null) {
            return AjaxResult.error("参数错误");
        }
        Equipment equipment = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, id);
//        Equipment equipment = athenaBesEquipmentMapper.selectAthenaBesEquipmentById(id);
        return AjaxResult.success(equipment);
    }

    /**
     * 查询物联设备详情
     *
     * @param id 物联设备主键
     * @return 物联设备详情
     */
    @Override
    public AjaxResult selectAthenaBesEquipmentInfoById(Long id) {
        if (id == null) {
            return AjaxResult.error("参数错误");
        }
        Map<String, Object> map = athenaBesEquipmentMapper.selectAthenaBesEquipmentInfoById(id);
        if (map.get("pId") != null && !"".equals(map.get("pId").toString())) {
            Map<String, Object> mapParent = athenaBesEquipmentMapper.selectAthenaBesEquipmentInfoById(Long.parseLong(map.get("pId").toString()));
            if (mapParent.get("communication") != null && !"".equals(mapParent.get("communication").toString())) {
                map.put("communicationParent", mapParent.get("communication").toString());
            } else {
                map.put("communicationParent", "");
            }
            if (mapParent.get("message") != null && !"".equals(mapParent.get("message").toString())) {
                map.put("messageParent", mapParent.get("message").toString());
            } else {
                map.put("messageParent", "");
            }
            if (mapParent.get("ipAddress") != null && !"".equals(mapParent.get("ipAddress").toString())) {
                map.put("ipAddressParent", mapParent.get("ipAddress").toString());
            } else {
                map.put("ipAddressParent", "");
            }
            if (mapParent.get("portNum") != null && !"".equals(mapParent.get("portNum").toString())) {
                map.put("portNumParent", mapParent.get("portNum").toString());
            } else {
                map.put("portNumParent", "");
            }
        }
        return AjaxResult.success(map);
    }


    /**
     * 查询物联设备实时数据
     *
     * @param id 物联设备主键
     * @return 物联设备详情
     */
    @Override
    public AjaxResult selectAthenaBesEquipmentActualTimeById(Long id) {
        Equipment e = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, id);
        if (e == null) {
            return AjaxResult.error("缓存未取到设备信息");
        }

        List<ProductItemData> itemDataList = new ArrayList<>();
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product_ItemData).values();
        for (Object j : values) {
            ProductItemData p = (ProductItemData) j;
            if (p.getProductId().equals(e.getProductId())) {
                itemDataList.add(p);
            }
        }

        List<Map<String, Object>> returnList = new ArrayList<>();
        if (itemDataList.size() > 0) {
            for (ProductItemData p : itemDataList) {
                Map<String, Object> map = new HashMap<>();
                //数据
                map.put("value","-");
                //名称
                map.put("label",p.getName());
                //编号
                map.put("code",p.getDataItemNum());
                //单位
                map.put("unit",p.getDataUnit());
                //最后上传时间
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                map.put("time",format.format(new Date()));

                returnList.add(map);
            }
        }

        return AjaxResult.success(returnList);
    }

    /**
     * 查询物联设备列表
     *
     * @param athenaBesEquipment 物联设备
     * @return 物联设备
     */
    @Override
    public List<Equipment> selectAthenaBesEquipmentList(Equipment athenaBesEquipment) {
        List<Equipment> list = new ArrayList<>();
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
        for (Object j : values) {
            Equipment e = (Equipment) j;
            //名称 、编号、 品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null
                    && !StringUtils.isEmpty(athenaBesEquipment.getName())
                    && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())
                        && (e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName()))
                        && (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode()))) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //名称 、 品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null
                    && !StringUtils.isEmpty(athenaBesEquipment.getName())) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())
                        && (e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName()))) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //编号 、 品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null
                    && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())
                        && (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode()))) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //编号 、 名称
            if (athenaBesEquipment != null && !StringUtils.isEmpty(athenaBesEquipment.getName())
                    && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if ((e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName()))
                        && (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode()))) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //编号
            if (athenaBesEquipment != null && !StringUtils.isEmpty(athenaBesEquipment.getName())) {
                if (e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName())) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //名称
            if (athenaBesEquipment != null && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode())) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())) {
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            list.add(e);
                        }
                    } else {
                        list.add(e);
                    }
                }
                continue;
            }
            //无条件查询
            if (athenaBesEquipment == null || (athenaBesEquipment.getCategoryId() == null
                    && StringUtils.isEmpty(athenaBesEquipment.getName())
                    && StringUtils.isEmpty(athenaBesEquipment.getCode()))) {
                //子设备
                if (athenaBesEquipment.getpId() != null) {
                    if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                        list.add(e);
                    }
                } else {
                    list.add(e);
                }
                continue;
            }
        }

        return list;
//        return athenaBesEquipmentMapper.selectAthenaBesEquipmentList(athenaBesEquipment);
    }

    /**
     * 新增物联设备
     *
     * @param athenaBesEquipment 物联设备
     * @return 结果
     */
    @Override
    public AjaxResult insertAthenaBesEquipment(Equipment athenaBesEquipment) {
        if (StringUtils.isEmpty(athenaBesEquipment.getCode()) ||
                StringUtils.isEmpty(athenaBesEquipment.getName()) ||
                athenaBesEquipment.getProductId() == null) {
            return AjaxResult.error("参数错误");
        }
        if (athenaBesEquipment.getpId() == null) {
            if (StringUtils.isEmpty(athenaBesEquipment.getIpAddress()) || StringUtils.isEmpty(athenaBesEquipment.getPortNum())) {
                return AjaxResult.error("参数错误");
            }
        }

        //查重产品iD/编号
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
        for (Object j : values) {
            Equipment e = (Equipment) j;
            if (e.getCode().equals(athenaBesEquipment.getCode()) /*|| e.getProductId().equals(athenaBesEquipment.getProductId())*/) {
                return AjaxResult.error(/*产品/*/"编号重复");
            }
        }
//        List<Equipment> equipments = athenaBesEquipmentMapper.selectAthenaBesEquipmentListCheck(athenaBesEquipment);
//        if (equipments.size() > 0) {
//            return AjaxResult.error("产品/编号重复");
//        }

        athenaBesEquipment.setCreateName(SecurityUtils.getUsername());
        athenaBesEquipment.setCreateTime(DateUtils.getNowDate());
        boolean isADD = athenaBesEquipmentMapper.insertAthenaBesEquipment(athenaBesEquipment);
        if (isADD) {
            //查询所有产品信息
            List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(athenaBesEquipment);
            athenaBesEquipment = equipmentsRedis.get(0);
            //添加缓存
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, athenaBesEquipment.getId(), athenaBesEquipment);
            return AjaxResult.success("添加成功");
        } else {
            return AjaxResult.error("添加失败");
        }
    }

    /**
     * 修改物联设备
     *
     * @param athenaBesEquipment 物联设备
     * @return 结果
     */
    @Override
    public AjaxResult updateAthenaBesEquipment(Equipment athenaBesEquipment) {
        if (athenaBesEquipment.getId() == null ||
                StringUtils.isEmpty(athenaBesEquipment.getCode()) ||
                StringUtils.isEmpty(athenaBesEquipment.getName()) ||
                athenaBesEquipment.getProductId() == null) {
            return AjaxResult.error("参数错误");
        }
        if (athenaBesEquipment.getpId() == null) {
            if (StringUtils.isEmpty(athenaBesEquipment.getIpAddress()) || StringUtils.isEmpty(athenaBesEquipment.getPortNum())) {
                return AjaxResult.error("参数错误");
            }
        }

        //查重产品iD/编号
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
        for (Object j : values) {
            Equipment e = (Equipment) j;
            /*|| e.getProductId().equals(athenaBesEquipment.getProductId())*/
            if (e.getCode().equals(athenaBesEquipment.getCode()) && !e.getId().equals(athenaBesEquipment.getId())) {
                return AjaxResult.error(/*产品/*/"编号重复");
            }
        }

        athenaBesEquipment.setUpdateName(SecurityUtils.getUsername());
        athenaBesEquipment.setUpdateTime(DateUtils.getNowDate());
        boolean isUpdtae = athenaBesEquipmentMapper.updateAthenaBesEquipment(athenaBesEquipment);
        if (isUpdtae) {
            //查询所有产品信息
            List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(athenaBesEquipment);
            athenaBesEquipment = equipmentsRedis.get(0);
            //添加缓存
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, athenaBesEquipment.getId(), athenaBesEquipment);
            return AjaxResult.success("修改成功");
        } else {
            return AjaxResult.error("修改失败");
        }
    }

    /**
     * 批量删除物联设备
     *
     * @param ids 需要删除的物联设备主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteAthenaBesEquipmentByIds(Long[] ids) {
        if (ids == null || ids.length == 0) {
            return AjaxResult.error("参数错误");
        }
        Long[] sonIds;
        boolean isDelete = false;
        //查询对应的子设备
        for (Long id : ids) {
            //是否有子设备，有子设备先删除子设备
            Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
            for (Object j : values) {
                Equipment e = (Equipment) j;
                if (e.getpId() != null && e.getpId().equals(id)) {
                    return AjaxResult.error("请先删除该设备下的子设备");
                }
            }
//            //删除所有子设备
//            athenaBesEquipmentMapper.deleteSonAthenaBesEquipmentByIds(ids[i]);
        }

        isDelete = athenaBesEquipmentMapper.deleteAthenaBesEquipmentByIds(ids);
        if (isDelete) {
            for (Long id : ids) {
                //删除缓存
                redisCache.delCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, id);
            }
            return AjaxResult.success("删除成功");
        } else {
            return AjaxResult.error("删除失败");
        }
    }

    /**
     * 删除物联设备信息
     *
     * @param id 物联设备主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteAthenaBesEquipmentById(Long id) {
        if (id == null) {
            return AjaxResult.error("参数错误");
        }
        boolean isDelete = athenaBesEquipmentMapper.deleteAthenaBesEquipmentById(id);
        if (isDelete) {
            return AjaxResult.success("删除成功");
        } else {
            return AjaxResult.error("删除失败");
        }
    }
}

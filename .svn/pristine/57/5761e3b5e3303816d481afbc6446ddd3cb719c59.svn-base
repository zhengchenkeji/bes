<template>
  <div class="app-container">
    <span @click="handleClose()" style="font-size: 15px">
      <i class="el-icon-back"></i>
      返回
    </span>
    &nbsp;&nbsp;
    <span style="color: #BABABA">
        |
    </span>
    &nbsp;&nbsp;
    <span style="font-size: 18px">{{this.productName}}</span>
    <span style="font-size: 18px;color: #BABABA">/{{this.productCode}}</span>
    <br/>
    <br/>
    <el-tabs v-model="activeName" type="border-card" style="height: 80.4vh;">
      <el-tab-pane label="数据项定义" name="first">
        <el-row :gutter="10" class="mb8">
          <el-col :span="1.5">
            <el-button
              type="primary"
              plain
              icon="el-icon-plus"
              size="mini"
              @click="handleAdd"
              v-hasPermi="['baseData:product:add']"
            >新增
            </el-button>
          </el-col>
          <el-col :span="1.5">
            <el-button
              type="success"
              plain
              icon="el-icon-view"
              size="mini"
              @click="handleItemDataLook"
              v-hasPermi="['baseData:product:edit']"
            >查看物模型
            </el-button>
          </el-col>
          <el-col :span="1.5">
            <el-button
              type="warning"
              plain
              icon="el-icon-download"
              size="mini"
              @click="handleExport"
              v-hasPermi="['baseData:product:export']"
            >导出
            </el-button>
          </el-col>
        </el-row>

        <el-table v-loading="loading" :data="productItemDataList" :header-cell-style="{background:'#FAFAFA'}">
          <el-table-column type="index" label="序号" width="50"/>
          <el-table-column label="产品编号" align="center">
            <template slot-scope="scope">
              <span>{{productCode}}</span>
            </template>
          </el-table-column>
          <el-table-column label="数据项编号(对应设备)" align="center" prop="dataItemNum" min-width="150px"/>
          <el-table-column label="数据项标识(平台自定义)" align="center" prop="dataItemMark" min-width="160px"/>
          <el-table-column label="数据项名称" align="center" prop="name"/>
          <el-table-column label="数据类型" align="center" prop="dataName"/>
          <el-table-column label="单位" align="center" prop="dataUnit"/>
          <el-table-column label="读写类型" align="center" prop="readType">
            <template slot-scope="scope">
              <span v-if="scope.row.readType == '1'">只读</span>
              <span v-if="scope.row.readType == '0'">读写</span>
            </template>
          </el-table-column>
          <el-table-column label="是否保存" align="center" prop="preserveType">
            <template slot-scope="scope">
              <span v-if="scope.row.preserveType == '1'">是</span>
              <span v-if="scope.row.preserveType == '0'">否</span>
            </template>
          </el-table-column>
          <el-table-column label="备注" align="center" prop="remark"/>
          <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
            <template slot-scope="scope">
              <el-button
                size="mini"
                type="text"
                icon="el-icon-edit"
                @click="handleUpdate(scope.row)"
                v-hasPermi="['baseData:product:edit']"
              >修改
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-delete"
                @click="handleDelete(scope.row)"
                v-hasPermi="['baseData:product:remove']"
              >删除
              </el-button>
            </template>
          </el-table-column>
        </el-table>

        <!--        <pagination-->
        <!--          v-show="total>0"-->
        <!--          :total="total"-->
        <!--          :page.sync="queryParams.pageNum"-->
        <!--          :limit.sync="queryParams.pageSize"-->
        <!--          @pagination="getList"-->
        <!--        />-->

        <!-- 添加或修改产品定义对话框 -->
        <el-dialog :title="title" :visible.sync="open" width="520px" append-to-body>
          <div class="box">
            <el-form ref="form" :model="form" :rules="rules" label-width="100px">
              <el-form-item label="所属产品" prop="productName">
                <el-input v-model="form.productName" placeholder="请输入所属产品" disabled/>
              </el-form-item>
              <el-form-item label="数据项编号" prop="dataItemNum">
                <el-input v-model="form.dataItemNum" placeholder="请输入数据项编号"/>
              </el-form-item>
              <el-form-item label="数据项标识" prop="dataItemMark">
                <el-input v-model="form.dataItemMark" placeholder="请输入数据项标识"/>
              </el-form-item>
              <el-form-item label="数据项名称" prop="name">
                <el-input v-model="form.name" placeholder="请输入数据项名称"/>
              </el-form-item>
              <el-form-item label="订阅地址" prop="subscribeAddress" v-if="productAgreement == '1'">
                <el-select v-model="form.subscribeAddress" placeholder="请选择mqtt订阅地址" style="width:100%!important;">
                  <el-option
                    v-for="item in subscribes"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="功能码" prop="functionCode">
                <el-input v-model="form.functionCode" placeholder="请输入功能码"/>
              </el-form-item>
              <el-form-item label="排序" prop="sortNum">
                <el-input type="number" v-model="form.sortNum" placeholder="请输入排序"/>
              </el-form-item>
              <el-form-item label="数据类型" prop="dataType">
                <el-select v-model="form.dataType" placeholder="请选择数据类型" style="width: 340px">
                  <el-option
                    v-for="item in dataTypeList"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="单位" prop="dataUnit">
                <el-input v-model="form.dataUnit" placeholder="请输入单位"/>
              </el-form-item>
              <el-form-item label="小数点位置" prop="radixPoint">
                <el-input v-model="form.radixPoint" placeholder="请输入小数点位置"/>
              </el-form-item>
              <el-form-item label="比率" prop="ratioSize">
                <el-input v-model="form.ratioSize" placeholder="请输入比率"/>
              </el-form-item>
              <el-form-item label="读写类型" prop="readType">
                <el-radio v-model="form.readType" label="0" style="width: 150px">只读</el-radio>
                <el-radio v-model="form.readType" label="1" style="width: 150px">读写</el-radio>
              </el-form-item>
              <el-form-item label="是否保存" prop="preserveType">
                <el-radio v-model="form.preserveType" label="0" style="width: 150px">否</el-radio>
                <el-radio v-model="form.preserveType" label="1" style="width: 150px">是</el-radio>
              </el-form-item>
              <el-form-item label="能源类型" prop="energyCode" v-if="form.preserveType == '1'">
                <el-select v-model="form.energyCode" filterable placeholder="请选择能源类型" style="width: 340px" clearable>
                  <el-option
                    v-for="item in energyList"
                    :key="item.code"
                    :label="item.name"
                    :value="item.code">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="备注" prop="remark">
                <el-input v-model="form.remark" placeholder="请输入备注"/>
              </el-form-item>
            </el-form>
          </div>
          <div slot="footer" class="dialog-footer">
            <el-button type="primary" @click="submitForm">确 定</el-button>
            <el-button @click="cancel">取 消</el-button>
          </div>
        </el-dialog>
      </el-tab-pane>
      <el-tab-pane label="功能定义" name="second">
        <el-row :gutter="10" class="mb8">
          <el-col :span="1.5">
            <el-button
              type="primary"
              plain
              icon="el-icon-plus"
              size="mini"
              @click="handleAddFunction"
              v-hasPermi="['baseData:product:add']"
            >新增
            </el-button>
          </el-col>
          <el-col :span="1.5">
            <el-button
              type="success"
              plain
              icon="el-icon-view"
              size="mini"
              @click="handleFunctionLook"
              v-hasPermi="['baseData:product:edit']"
            >查看物模型
            </el-button>
          </el-col>
          <el-col :span="1.5">
            <el-button
              type="warning"
              plain
              icon="el-icon-download"
              size="mini"
              @click="handleExportFunction"
              v-hasPermi="['baseData:product:export']"
            >导出
            </el-button>
          </el-col>
        </el-row>

        <el-table v-loading="loadingFunction" :data="productFunctionList" :header-cell-style="{background:'#FAFAFA'}">
          <el-table-column type="index" label="序号" width="50"/>
          <el-table-column label="功能编号" align="center" prop="functionNum"/>
          <el-table-column label="功能名称" align="center" prop="name" min-width="150px"/>
          <el-table-column label="产品编号" align="center">
            <template slot-scope="scope">
              <span>{{productCode}}</span>
            </template>
          </el-table-column>
          <el-table-column label="功能类型" align="center" prop="type">
            <template slot-scope="scope">
              <span v-if="scope.row.type == '0'">控制</span>
              <span v-if="scope.row.type == '1'">采集</span>
            </template>
          </el-table-column>
          <el-table-column label="下发方式" align="center" prop="issuedType">
            <template slot-scope="scope">
              <span v-if="scope.row.issuedType == '0'">指令下发</span>
              <span v-if="scope.row.issuedType == '1'">数据项下发</span>
            </template>
          </el-table-column>
          <el-table-column label="通讯模式" align="center" prop="communicationMode">
            <template slot-scope="scope">
              <span v-if="scope.row.communicationMode == '0'">同步</span>
              <span v-if="scope.row.communicationMode == '1'">异步</span>
            </template>
          </el-table-column>
          <el-table-column label="备注" align="center" prop="remark"/>
          <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
            <template slot-scope="scope">
              <el-button
                size="mini"
                type="text"
                icon="el-icon-edit"
                @click="handleUpdateFunction(scope.row)"
                v-hasPermi="['baseData:product:edit']"
              >修改
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-delete"
                @click="handleDeleteFunction(scope.row)"
                v-hasPermi="['baseData:product:remove']"
              >删除
              </el-button>
            </template>
          </el-table-column>
        </el-table>

        <!--        <pagination-->
        <!--          v-show="totalFunction>0"-->
        <!--          :total="totalFunction"-->
        <!--          :page.sync="queryParamsFunction.pageNum"-->
        <!--          :limit.sync="queryParamsFunction.pageSize"-->
        <!--          @pagination="getList"-->
        <!--        />-->

        <!-- 添加或修改产品定义对话框 -->
        <el-dialog :title="title" :visible.sync="openFunction" width="500px" append-to-body>
          <el-form ref="formFunction" :model="formFunction" :rules="rulesFunction" label-width="100px">
            <el-form-item label="产品" prop="productName">
              <el-input v-model="formFunction.productName" placeholder="请输入产品" disabled/>
            </el-form-item>
            <el-form-item label="功能编号" prop="functionNum">
              <el-input v-model="formFunction.functionNum" placeholder="请输入功能编号"/>
            </el-form-item>
            <el-form-item label="功能名称" prop="name">
              <el-input v-model="formFunction.name" placeholder="请输入功能名称"/>
            </el-form-item>
            <el-form-item label="功能类型" prop="type">
              <el-radio v-model="formFunction.type" label="0" style="width: 150px">控制</el-radio>
              <el-radio v-model="formFunction.type" label="1" style="width: 150px">采集</el-radio>
            </el-form-item>
            <el-form-item label="下发方式" prop="issuedType">
              <el-radio v-model="formFunction.issuedType" label="0" style="width: 150px">指令下发</el-radio>
              <el-radio v-model="formFunction.issuedType" label="1" style="width: 150px">数据项下发</el-radio>
            </el-form-item>
            <el-form-item label="通讯模式" prop="communicationMode">
              <el-radio v-model="formFunction.communicationMode" label="0" style="width: 150px">同步</el-radio>
              <el-radio v-model="formFunction.communicationMode" label="1" style="width: 150px">异步</el-radio>
            </el-form-item>
            <el-form-item label="指令" prop="instruct" v-if="formFunction.issuedType == '0'">
              <el-input v-model="formFunction.instruct" placeholder="请输入指令"/>
            </el-form-item>

            <el-form-item label="数据长度" prop="dataLen" v-if="formFunction.issuedType == '0'">
              <el-input v-model="formFunction.dataLen" placeholder="请输入数据长度"/>
            </el-form-item>
            <el-form-item label="数据项" prop="dataItem" v-if="formFunction.issuedType == '1'">
              <el-select v-model="formFunction.dataItem" placeholder="请选择数据项" style="width: 360px">
                <el-option
                  v-for="item in productItemDataList"
                  :key="item.id"
                  :label="item.name"
                  :value="item.id">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="下发值" prop="itemValue" v-if="formFunction.issuedType == '1'">
              <el-input v-model="formFunction.itemValue" placeholder="请输入下发值"/>
            </el-form-item>
            <el-form-item label="参数" prop="paramsInfo">

            </el-form-item>
            <el-form-item label="备注" prop="remark">
              <el-input v-model="formFunction.remark" placeholder="请输入备注"/>
            </el-form-item>
          </el-form>
          <div slot="footer" class="dialog-footer">
            <el-button type="primary" @click="submitFormFunction">确 定</el-button>
            <el-button @click="cancelFunction">取 消</el-button>
          </div>
        </el-dialog>
      </el-tab-pane>
    </el-tabs>
    <el-dialog :title="title" :visible.sync="openModel" width="520px" append-to-body>
      <div class="box">
        <el-input v-model="jsonModel" autosize type="textarea" readonly/>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import {
    listIotType,
    getProductItemData,
    delProductItemData,
    listProductItemData,
    addProductItemData,
    updateProductItemData,
    getProductFunction,
    delProductFunction,
    listProductFunction,
    addProductFunction,
    updateProductFunction, getProduct, getAgreeMentByProductId, getMessageListById,listEnergy
  } from "@/api/basicData/deviceDefinition/product/product";
  import {getEquipment, listEquipmentSon} from "@/api/basicData/deviceDefinition/equipment/equipment";

  export default {
    name: "setting",
    data() {
      return {
        // 产品通讯协议
        productAgreement: null,
        // mqtt订阅主题数组
        subscribes: [],
        //tabs默认项
        activeName: 'first',
        //产品名称
        productName: null,
        //产品编码
        productCode: null,
        //产品ID
        productId: null,
        // 遮罩层
        loading: true,
        loadingFunction: true,
        // 选中数组
        ids: [],
        // 总条数
        total: 0,
        totalFunction: 0,
        // 数据类型
        dataTypeList: [],
        // 能源类型
        energyList: [],
        //数据项
        productItemDataList: [],
        productFunctionList: [],
        // 弹出层标题
        title: "",
        // 是否显示弹出层
        open: false,
        openFunction: false,
        openModel: false,
        // 查询参数
        queryParams: {
          pageNum: 1,
          pageSize: 10,
          productId: null,
        },
        queryParamsFunction: {
          pageNum: 1,
          pageSize: 10,
          productId: null,
        },
        // 表单参数
        form: {},
        formFunction: {},
        // 表单校验
        rules: {
          productName: [{required: true, message: '请输入所属产品', trigger: 'blur'}],
          dataItemNum: [{required: true, message: '请输入数据项编号', trigger: 'blur'}],
          dataItemMark: [{required: true, message: '请输入数据项标识', trigger: 'blur'}],
          name: [{required: true, message: '请输入数据项名称', trigger: 'blur'}],
          functionCode: [{required: true, message: '请输入功能码', trigger: 'blur'}, {
            pattern: /^\+?[0-9][0-9]*$/,
            message: "只能输入0/正整数",
          }],
          sortNum: [{required: true, message: '请输入排序', trigger: 'blur'}, {
            pattern: /^\+?[0-9][0-9]*$/,
            message: "只能输入0/正整数",
          }],
          dataType: [{required: true, message: '请选择数据类型', trigger: 'change'}],
          subscribeAddress: [{required: true, message: '请选择订阅地址', trigger: 'change'}],
          radixPoint: [{pattern: /^\+?[0-9][0-9]*$/, message: "只能输入0/正整数",}],
          ratioSize: [{pattern: /^\+?[1-9][0-9]*$/, message: "只能输入正整数",}],
          energyCode: [{required: true, message: '请选择能源类型', trigger: 'change'}],
        },
        rulesFunction: {
          productName: [{required: true, message: '请输入产品', trigger: 'blur'}],
          functionNum: [{required: true, message: '请输入功能编号', trigger: 'blur'}],
          name: [{required: true, message: '请输入功能名称', trigger: 'blur'}],
        },
        //物模型
        jsonModel: '',
      }
    },
    created() {
      this.productName = this.$route.params.productName
      this.productCode = this.$route.params.productCode
      this.productId = this.$route.params.productId
      this.productAgreement = this.$route.params.productAgreement;
      this.getDataTypeList()
      this.getList();
      this.getFunctionList();
      this.getEnergyList();
    },
    methods: {
      //查询协议数据
      getAgreement() {

        this.subscribes = [];
        // 判断是否是mqtt通讯协议
        if (this.productAgreement == 1) {
          getAgreeMentByProductId(this.productId).then(response => {
            console.log(response)
            if (response.code == 200) {
              console.log(response.data.mqttAddress)
              var array = response.data.mqttAddress.split(',');
              for (let i = 0; i < array.length; i++) {
                const element = array[i];

                const option = {
                  value: element,
                  label: element
                }
                this.subscribes.push(option);

              }

            }
            console.log(this.subscribes)
          })
        }
      },
      /** 数据类型 */
      getDataTypeList() {
        let param = {
          dictType: 'data_item_type'
        }
        listIotType(param).then(response => {
          this.dataTypeList = response.data;
        });
      },
      /** 新增按钮操作 */
      handleAdd() {
        this.reset();
        this.open = true;
        this.title = "添加数据项";
      },
      handleAddFunction() {
        this.resetFunction();
        this.openFunction = true;
        this.title = "添加数据项";
      },
      /** 修改按钮操作 */
      handleUpdate(row) {
        this.reset();
        const id = row.id || this.ids
        getProductItemData(id).then(response => {
          this.form = response.data;
          this.form.productName = this.productName
          this.open = true;
          this.title = "修改数据项";
        });
      },
      handleUpdateFunction(row) {
        this.resetFunction();
        const id = row.id || this.ids
        getProductFunction(id).then(response => {
          this.formFunction = response.data;
          this.formFunction.productName = this.productName
          this.openFunction = true;
          this.title = "修改数据项";
        });
      },
      /** 提交按钮 */
      submitForm() {
        this.$refs["form"].validate(valid => {
          if (valid) {
            if (this.form.id != null) {
              updateProductItemData(this.form).then(response => {
                this.$modal.msgSuccess("修改成功");
                this.open = false;
                this.getList();
              });
            } else {
              addProductItemData(this.form).then(response => {
                this.$modal.msgSuccess("新增成功");
                this.open = false;
                this.getList();
              });
            }
          }
        });
      },
      submitFormFunction() {
        this.$refs["formFunction"].validate(valid => {
          if (valid) {
            if (this.formFunction.id != null) {
              updateProductFunction(this.formFunction).then(response => {
                this.$modal.msgSuccess("修改成功");
                this.openFunction = false;
                this.getFunctionList();
              });
            } else {
              addProductFunction(this.formFunction).then(response => {
                this.$modal.msgSuccess("新增成功");
                this.openFunction = false;
                this.getFunctionList();
              });
            }
          }
        });
      },
      /** 删除按钮操作 */
      handleDelete(row) {
        const ids = row.id || this.ids;
        this.$modal.confirm('是否确认删除产品定义编号为"' + ids + '"的数据项？').then(function () {
          return delProductItemData(ids);
        }).then(() => {
          this.getList();
          this.$modal.msgSuccess("删除成功");
        }).catch(() => {
        });
      },
      handleDeleteFunction(row) {
        const ids = row.id || this.ids;
        this.$modal.confirm('是否确认删除产品定义编号为"' + ids + '"的数据项？').then(function () {
          return delProductFunction(ids);
        }).then(() => {
          this.getFunctionList();
          this.$modal.msgSuccess("删除成功");
        }).catch(() => {
        });
      },
      /** 导出按钮操作 */
      handleExport() {
        this.download('baseData/product/exportItemData', {
          ...this.queryParams
        }, this.productName + `数据项_${new Date().getTime()}.xlsx`)
      },
      handleExportFunction() {
        this.download('baseData/product/exportFunction', {
          ...this.queryParamsFunction
        }, this.productName + `功能_${new Date().getTime()}.xlsx`)
      },
      /** 查询能源类型列表 */
      getEnergyList(){
        listEnergy().then(response => {
          this.energyList = response.data;
        });
      },
      /** 查询产品数据项列表 */
      getList() {
        this.loading = true;
        if (this.productName == null || this.productName == undefined) {
          getProduct(this.productId).then(response => {
            this.productName = response.data.name;
            this.productCode = response.data.code;

            this.productAgreement = response.data.communicationProtocol;
            this.queryParams.productId = this.productId
            listProductItemData(this.queryParams).then(response => {
              this.productItemDataList = response.rows;
              this.total = response.total;
              this.loading = false;
            });
            this.getAgreement();

          })

        } else {
          this.queryParams.productId = this.productId
          listProductItemData(this.queryParams).then(response => {
            this.productItemDataList = response.rows;
            this.total = response.total;
            this.loading = false;
          });
          this.getAgreement();

        }
      },
      /** 查询产品功能列表 */
      getFunctionList() {
        this.loadingFunction = true;
        this.queryParamsFunction.productId = this.productId
        listProductFunction(this.queryParamsFunction).then(response => {
          this.productFunctionList = response.rows;
          this.totalFunction = response.total;
          this.loadingFunction = false;
        });
      },
      // 取消按钮
      cancel() {
        this.open = false;
        this.reset();
      },
      cancelFunction() {
        this.openFunction = false;
        this.resetFunction();
      },
      // 表单重置
      reset() {
        this.form = {
          id: null,
          productName: this.productName,
          sortNum: null,
          productId: this.productId,
          dataItemNum: null,
          dataItemMark: null,
          name: null,
          dataType: null,
          dataUnit: null,
          readType: null,
          preserveType: null,
          remark: null,
          createTime: null,
          createName: null,
          updateTime: null,
          updateName: null,
          functionCode: null,
          energyCode: null,
        };
        this.resetForm("form");
      },
      resetFunction() {
        this.formFunction = {
          id: null,
          productName: this.productName,
          productId: this.productId,
          functionNum: null,
          name: null,
          type: null,
          issuedType: null,
          communicationMode: null,
          instruct: null,
          dataLen: null,
          dataItem: null,
          itemValue: null,
          remark: null,
          createTime: null,
          createName: null,
          updateTime: null,
          updateName: null
        };
        this.resetForm("formFunction");
      },
      /** 返回按钮操作 */
      handleClose() {
        // const productId = this.$route.params && this.$route.params.productId
        const obj = {
          name: 'product',
          // params: {
          //   productId: productId
          // }
        }
        this.$tab.closeOpenPage(obj)
      },
      /** 查看数据项物模型 **/
      handleItemDataLook() {
        this.queryParams.productId = this.productId
        listProductItemData(this.queryParams).then(response => {
          let modelVOList = response.rows;
          this.title = '数据项物模型'
          this.jsonModel = ''
          modelVOList.forEach(item => {
            if (this.jsonModel == '') {
              this.jsonModel = JSON.stringify(item, null, '\t')
            } else {
              this.jsonModel = this.jsonModel + ',\n' +JSON.stringify(item, null, '\t')
            }
          })
          this.openModel = true
        });
      },
      handleFunctionLook() {
        this.queryParamsFunction.productId = this.productId
        listProductFunction(this.queryParamsFunction).then(response => {
          let modelVOList = response.rows;
          this.title = '功能定义物模型'
          this.jsonModel = ''
          modelVOList.forEach(item => {
            if (this.jsonModel == '') {
              this.jsonModel = JSON.stringify(item, null, '\t')
            } else {
              this.jsonModel = this.jsonModel + ',\n' +JSON.stringify(item, null, '\t')
            }
          })
          this.openModel = true
        });
      },
    }
  }
</script>
<style lang="scss" scoped>
  .box {
    // 必须有高度 overflow 为自动
    overflow: auto;
    height: 650px;
    width: 500px;
    padding: 0px 30px 11px 27px;

    // 滚动条的样式,宽高分别对应横竖滚动条的尺寸
    &::-webkit-scrollbar {
      width: 3px;
    }

    // 滚动条里面默认的小方块,自定义样式
    &::-webkit-scrollbar-thumb {
      background: #BABABA;
      border-radius: 2px;
    }

    // 滚动条里面的轨道
    &::-webkit-scrollbar-track {
      background: transparent;
    }
  }
</style>

package com.ruoyi.efounder.JEnterprise.controller.scheduling;

import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.efounder.JEnterprise.domain.PlanCollection;
import com.ruoyi.efounder.JEnterprise.domain.PlanConfig;
import com.ruoyi.efounder.JEnterprise.domain.PlanController;
import com.ruoyi.efounder.JEnterprise.domain.SceneModelPointControl;
import com.ruoyi.efounder.JEnterprise.service.scheduling.IPlanConfigService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * @Author: gaojikun
 * @Description:计划编排
 * @Date: Created in 14:51 2022/11/5
 * @Modified By:
 */
@RestController
@RequestMapping("/deviceManagement/scheduling/PlanConfig")
public class PlanConfigController extends BaseController {
    @Autowired
    private IPlanConfigService planConfigService;


    /*********************************************************** 左侧树 **************************************************/

    /**
     * @Description: 左侧计划树
     * @auther: gaojikun
     * @param: PlanConfig
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:list')")
    @PostMapping("/getAllPlanConfigListInfo")
    public AjaxResult getAllPlanConfigListInfo(PlanConfig planConfig) {
        return planConfigService.getAllPlanConfigListInfo(planConfig);
    }

    /**
     * @Description: 查询计划信息
     * @auther: gaojikun
     * @param: PlanConfig
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:query')")
    @PostMapping("/getPlanConfigInfo")
    public AjaxResult getPlanConfigInfo(PlanConfig planConfig) {
        return planConfigService.getPlanConfigInfo(planConfig);
    }

    /**
     * @Description: 新增计划
     * @auther: gaojikun
     * @param: PlanConfig
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:add')")
    @Log(title = "计划编排", businessType = BusinessType.INSERT)
    @PostMapping("/addPlanConfig")
    public AjaxResult addPlanConfig(PlanConfig planConfig) {
        return planConfigService.addPlanConfig(planConfig);
    }

    /**
     * @Description: 修改计划
     * @auther: gaojikun
     * @param: PlanConfig
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:edit')")
    @Log(title = "计划编排", businessType = BusinessType.UPDATE)
    @PostMapping("/editPlanConfig")
    public AjaxResult editPlanConfig(PlanConfig planConfig) {
        return planConfigService.editPlanConfig(planConfig);
    }

    /**
     * @Description: 删除计划
     * @auther: gaojikun
     * @param: Long[]
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:remove')")
    @Log(title = "计划编排", businessType = BusinessType.DELETE)
    @DeleteMapping("/delPlanConfig/{ids}")
    public AjaxResult delPlanConfig(@PathVariable Long[] ids) {
        return planConfigService.delPlanConfig(ids);
    }


    /*********************************************************** 右侧列表 **************************************************/

    /**
     * @Description: 查询控制计划列表
     * @auther: gaojikun
     * @param: planController
     * @return: TableDataInfo
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:list')")
    @GetMapping("/planControl/list")
    public TableDataInfo planControlList(PlanController planController) {
        startPage();
        List<PlanController> list = planConfigService.selectPlanControlList(planController);
        return getDataTable(list);
    }

    /**
     * @Description: 查询采集计划列表
     * @auther: gaojikun
     * @param: planCollection
     * @return: TableDataInfo
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Collection:list')")
    @GetMapping("/planCollect/list")
    public TableDataInfo planCollectList(PlanCollection planCollection) {
        startPage();
        List<PlanCollection> list = planConfigService.selectPlanCollectList(planCollection);
        return getDataTable(list);
    }

    /**
     * 导出控制/采集计划
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:export')")
    @Log(title = "计划列表", businessType = BusinessType.EXPORT)
    @PostMapping("/PlanControl/export")
    public void export(HttpServletResponse response, PlanController planConfig) {
        List<PlanController> list = planConfigService.selectPlanControlList(planConfig);
        ExcelUtil<PlanController> util = new ExcelUtil<>(PlanController.class);
        util.exportExcel(response, list, "控制计划列表");

    }

    /**
     * @Description: 控制计划详情
     * @auther: gaojikun
     * @param: planController
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:getPlanControl')")
    @PostMapping("/getPlanControl")
    public AjaxResult getPlanControl(PlanController planController) {
        return planConfigService.selectPlanControllerById(planController);
    }

    /**
     * @Description: 新增控制计划
     * @auther: gaojikun
     * @param: planController
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:add')")
    @Log(title = "控制计划", businessType = BusinessType.INSERT)
    @PostMapping("/addPlanController")
    public AjaxResult addPlanController(PlanController planController) {
        return planConfigService.insertPlanController(planController);
    }

    /**
     * @Description: 修改控制计划
     * @auther: gaojikun
     * @param: planController
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:edit')")
    @Log(title = "控制计划", businessType = BusinessType.UPDATE)
    @PostMapping("/updatePlanControl")
    public AjaxResult updatePlanControl(PlanController planController) {
        return planConfigService.updatePlanController(planController);
    }

    /**
     * @Description: 删除控制计划
     * @auther: gaojikun
     * @param: ids
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:remove')")
    @Log(title = "控制计划", businessType = BusinessType.DELETE)
    @DeleteMapping("/deletePlanControl/{ids}")
    public AjaxResult remove(@PathVariable Long[] ids) {
        return planConfigService.deletePlanControllerByIds(ids);
    }

    /**
     * @Description: 控制计划-模式点位同步
     * @auther: gaojikun
     * @param: planController
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:sync')")
    @PostMapping("/modelPointSync")
    public AjaxResult modelPointSync(PlanController planController) {
        return planConfigService.modelPointSync(planController);
    }

    /**
     * @Description: 控制计划-计划数据对比
     * @auther: gaojikun
     * @param: planController
     * @return: AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('Scheduling:PlanConfig:Controller:contrast')")
    @PostMapping("/planPointContrast")
    public AjaxResult planPointContrast(PlanController planController) {
        return planConfigService.planPointContrast(planController);
    }
}

package com.zc.iot.service.impl;

import com.google.auto.service.AutoService;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.spring.SpringUtils;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.common.constant.WebSocketEvent;
import com.zc.common.core.websocket.WebSocketService;
import com.zc.iot.domain.IotDevice;
import com.zc.iot.service.IIotDeviceService;
import com.zc.relay.dto.DeviceFunctionValue;
import com.zc.relay.handler.DeviceDataAcceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

/**
 * 接收设备实时数据
 * @author Athena-xiepufeng
 */
@AutoService(DeviceDataAcceptor.class)
public class IotDeviceDataAcceptorImpl implements DeviceDataAcceptor
{

    private static final Logger log = LoggerFactory.getLogger(IotDeviceDataAcceptorImpl.class);

    private final IIotDeviceService iIotDeviceService = SpringUtils.getBean(IIotDeviceService.class);

    private final RedisCache redisCache = SpringUtils.getBean(RedisCache.class);
    /**
     * 接收设备实时数据
     *
     * @param deviceFunctionValue 设备实时数据
     */
    @Override
    public void dataReceive(DeviceFunctionValue deviceFunctionValue)
    {
        if (deviceFunctionValue == null)
        {
            log.error("设备状态变化:{输出条件: (deviceFunctionValue == null)}");
            return;
        }

        Long deviceId = deviceFunctionValue.getDeviceId();
        Map<Long, Number> valueMap = deviceFunctionValue.getFunctionValue();

        // 更新缓存中实时数据
        valueMap.forEach((functionId, realValue) -> redisCache.setCacheMapValue(RedisKeyConstants.getDeviceFunctionValueKey(deviceId), functionId, realValue));

        // websocket 推送实时数据到前端
        WebSocketService.broadcast(WebSocketEvent.IOT_DEVICE_REALTIME_DATA, deviceFunctionValue);
    }

    /**
     * 设备控制响应
     *
     * @param identifier 消息标识
     * @param deviceId   设备id
     * @param functionId 功能id
     * @param state 操作状态 1成功 0 失败
     */
    @Override
    public void controlResponse(String identifier,
                                //Long deviceId,
                                //Long functionId,
                                Integer state)
    {

    }

    /**
     * 设备状态变化
     *
     * @param deviceId 设备id
     * @param state    在线状态
     */
    @Override
    public void deviceStateChange(Long deviceId, Integer state)
    {
        if (deviceId == null || state == null)
        {
            log.error("设备状态变化:{输出条件: (deviceId == null || state == null);" +
                    " deviceId：" + deviceId + "; state: " + state + "}");
            return;
        }

        IotDevice iotDevice = redisCache.getCacheMapValue(RedisKeyConstants.IOT_DEVICE, deviceId);

        if (iotDevice == null)
        {
            log.error("设备状态变化:{输出条件: (iotDevice == null)}");
            return;
        }

        iotDevice.setOnlineState(state);

        // 更新数据库和缓存
        iIotDeviceService.updateIotDevice(iotDevice);
    }
}

<template>
  <div>
    <div ref="page" style="max-height: 84.5vh;overflow-y: auto;">
      <div ref="container" class="bg">
        <div class="canvas-container">
          <div
            class="canvas"
            :style="{
                    ...getCanvasStyle(canvasStyleData),

                    width: changeStyleWithScale(canvasStyleData.width) + 'px',
                    height: changeStyleWithScale(canvasStyleData.height) + 'px',
                }"
          >
            <ComponentWrapper
              v-for="(item, index) in copyData"
              :key="index"
              :config="item"
            />
          </div>

          <div style="position:absolute; ">
            <el-button @click="back">返回</el-button>
            <el-button @click="screenfullDiv">全屏</el-button>
          </div>
        </div>
      </div>
    </div>
  </div>

</template>

<script>
  import screenfull from "screenfull";
  import {getStyle, getCanvasStyle} from '@/utils/designer/style'
  import {mapState} from 'vuex'
  import ComponentWrapper from '@/components/designer/Editor/ComponentWrapper'
  import {changeStyleWithScale} from '@/utils/designer/translate'
  import {toPng} from 'html-to-image'
  import {deepCopy} from '@/utils/designer/utils'
  import {seleteDesignerAreaPage} from "@/api/designerConfigure/designer";
  import {setDefaultcomponentData} from "@/store/designer/snapshot";
  import pubsub from "@/store/modules/PubSub";

  export default {
    components: {ComponentWrapper},
    name: "index",
    props: {
      areaId:{
        type: String,
        default: "",
      },
      pageId:{
        type: String,
        default: "",
      },
      isScreenshot: {
        type: Boolean,
        default: false,
      },
    },
    data() {
      return {
        copyData: [],
        // areaId: "1",//区域id
        // pageId:"1",//页面id
        form: {},
      }
    },
    computed: mapState([
      'componentData',
      'canvasStyleData',
      'ToViewPage'
    ]),
    created() {
      // this.areaId = this.$route.query && this.$route.query.areaId;
      // this.pageId = this.$route.query && this.$route.query.pageId;
      // this.form.id = parseInt(this.pageId);
      // this.form.areaId = parseInt(this.areaId);
      // this.getAreaDesignerPage(this.form);
    },

    watch: {
      pageId: function (newVal, oldVal) {

      }
    },

    beforeDestroy() {

      this.$store.commit('setToViewPage', false)
      // if (!this.ToViewPage) {
      //   pubsub.remove(null,'VtextWebsocket')
      //   pubsub.remove(null,'VLightWebsocket')
      // }
      // pubsub.remove(null,'VtextWebsocket')
      // pubsub.remove(null,'VtextWebsocket')
      // pubsub.remove(null,'VtextWebsocket')
    },
    methods: {
      getStyle,
      getCanvasStyle,

      changeStyleWithScale,

      //获取当前区域的设计器页面
      getAreaDesignerPage(form) {
        this.$store.commit('setToViewPage', true)
        let that = this;
        seleteDesignerAreaPage(form).then(response => {
          if (response.code == 200) {
            let canvasData = JSON.parse(response.data[0].canvasData);
            let canvasStyle = JSON.parse(response.data[0].canvasStyle);

            setDefaultcomponentData(canvasData);
            that.$store.commit('setComponentData', canvasData);
            that.$store.commit('setCanvasStyle', canvasStyle);

            this.$set(that, 'copyData', deepCopy(this.componentData))
          }
        })
      },
      back() {
        this.$emit('back');
      },
      screenfullDiv() {
        if (screenfull.isEnabled) {
          screenfull.toggle(this.$refs.page);
        }
      }
    },
  }
</script>


<style lang="scss" scoped>
  .bg {
    /*width: 100%;*/
    /*height: 100%;*/
    /*top: 0;*/
    /*left: 0;*/
    /*position: fixed;*/
    /*background: rgb(0, 0, 0, .5);*/
    display: flex;
    /*align-items: center;*/
    /*justify-content: center;*/
    /*overflow: auto;*/
    /*padding: 20px;*/

    .canvas-container {
      /*width: calc(100% - 40px);*/
      /*height: calc(100% - 120px);*/
      /*overflow: auto;*/

      .canvas {
        background: #fff;
        position: absolute;
        margin: auto;
      }
    }

    .close {
      position: absolute;
      right: 20px;
      top: 20px;
    }
  }
</style>

package com.zc.efounder.JEnterprise.service.baseData.impl;

import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.exception.ServiceException;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.SecurityUtils;
import com.ruoyi.common.utils.StringUtils;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.efounder.JEnterprise.domain.baseData.Equipment;
import com.zc.efounder.JEnterprise.domain.baseData.Product;
import com.zc.efounder.JEnterprise.domain.baseData.ProductItemData;
import com.zc.efounder.JEnterprise.mapper.baseData.EquipmentMapper;
import com.zc.efounder.JEnterprise.service.baseData.EquipmentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

/**
 * 物联设备Service业务层处理
 *
 * @author gaojikun
 * @date 2023-03-08
 */
@Service
public class EquipmentServiceImpl implements EquipmentService {
    @Autowired
    private EquipmentMapper athenaBesEquipmentMapper;

    @Resource
    private RedisCache redisCache;

    @PostConstruct
    public void init() {
        /**
         * 添加数据到 redis 缓存
         */
        addEquipmentCache();

    }

    /**
     * 添加数据到 redis 缓存
     */
    public void addEquipmentCache() {
        // 获取全部物联设备列表数据
        List<Equipment> equipments = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(null);

        // 清除 redis 缓存数据
        redisCache.deleteObject(RedisKeyConstants.BES_BasicData_Equipment);

        if (equipments == null || equipments.isEmpty()) {
            return;
        }

        // 添加 redis 缓存数据
        equipments.forEach(val -> {
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, val.getId(), val);
        });
    }

    /**
     * 查询物联设备
     *
     * @param id 物联设备主键
     * @return 物联设备
     */
    @Override
    public AjaxResult selectAthenaBesEquipmentById(Long id) {
        if (id == null) {
            return AjaxResult.error("参数错误");
        }
        Equipment equipment = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, id);
//        Equipment equipment = athenaBesEquipmentMapper.selectAthenaBesEquipmentById(id);
        return AjaxResult.success(equipment);
    }

    /**
     * 查询物联设备详情
     *
     * @param id 物联设备主键
     * @return 物联设备详情
     */
    @Override
    public AjaxResult selectAthenaBesEquipmentInfoById(Long id) {
        if (id == null) {
            return AjaxResult.error("参数错误");
        }
        Map<String, Object> map = athenaBesEquipmentMapper.selectAthenaBesEquipmentInfoById(id);
        if (map.get("pId") != null && !"".equals(map.get("pId").toString())) {
            Map<String, Object> mapParent = athenaBesEquipmentMapper.selectAthenaBesEquipmentInfoById(Long.parseLong(map.get("pId").toString()));
            if (mapParent.get("communication") != null && !"".equals(mapParent.get("communication").toString())) {
                map.put("communicationParent", mapParent.get("communication").toString());
            } else {
                map.put("communicationParent", "");
            }
            if (mapParent.get("message") != null && !"".equals(mapParent.get("message").toString())) {
                map.put("messageParent", mapParent.get("message").toString());
            } else {
                map.put("messageParent", "");
            }
            if (mapParent.get("ipAddress") != null && !"".equals(mapParent.get("ipAddress").toString())) {
                map.put("ipAddressParent", mapParent.get("ipAddress").toString());
            } else {
                map.put("ipAddressParent", "");
            }
            if (mapParent.get("portNum") != null && !"".equals(mapParent.get("portNum").toString())) {
                map.put("portNumParent", mapParent.get("portNum").toString());
            } else {
                map.put("portNumParent", "");
            }
        }
        return AjaxResult.success(map);
    }


    /**
     * 查询物联设备实时数据
     *
     * @param id 物联设备主键
     * @return 物联设备详情
     */
    @Override
    public AjaxResult selectAthenaBesEquipmentActualTimeById(Long id) {
        Equipment e = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, id);
        if (e == null) {
            return AjaxResult.error("缓存未取到设备信息");
        }

        List<ProductItemData> itemDataList = new ArrayList<>();
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product_ItemData).values();
        for (Object j : values) {
            ProductItemData p = (ProductItemData) j;
            if (p.getProductId().equals(e.getProductId())) {
                itemDataList.add(p);
            }
        }

        List<Map<String, Object>> returnList = new ArrayList<>();
        if (itemDataList.size() > 0) {
            for (ProductItemData p : itemDataList) {
                Map<String, Object> map = new HashMap<>();
                //数据
                map.put("value", "-");
                //名称
                map.put("label", p.getName());
                //编号
                map.put("code", p.getDataItemNum());
                //单位
                map.put("unit", p.getDataUnit());
                //最后上传时间
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                map.put("time", format.format(new Date()));

                returnList.add(map);
            }
        }

        return AjaxResult.success(returnList);
    }

    /**
     * 查询物联设备列表
     *
     * @param athenaBesEquipment 物联设备
     * @return 物联设备
     */
    @Override
    public List<Equipment> selectAthenaBesEquipmentList(Equipment athenaBesEquipment) {
        List<Equipment> list = new ArrayList<>();
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
        for (Object j : values) {
            Equipment e = (Equipment) j;
            //名称 、编号、 品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null
                    && !StringUtils.isEmpty(athenaBesEquipment.getName())
                    && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())
                        && (e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName()))
                        && (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode()))) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //名称 、 品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null
                    && !StringUtils.isEmpty(athenaBesEquipment.getName())) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())
                        && (e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName()))) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //编号 、 品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null
                    && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())
                        && (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode()))) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //编号 、 名称
            if (athenaBesEquipment != null && !StringUtils.isEmpty(athenaBesEquipment.getName())
                    && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if ((e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName()))
                        && (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode()))) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //编号
            if (athenaBesEquipment != null && !StringUtils.isEmpty(athenaBesEquipment.getName())) {
                if (e.getName().contains(athenaBesEquipment.getName()) || e.getName().equals(athenaBesEquipment.getName())) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //名称
            if (athenaBesEquipment != null && !StringUtils.isEmpty(athenaBesEquipment.getCode())) {
                if (e.getCode().contains(athenaBesEquipment.getCode()) || e.getCode().equals(athenaBesEquipment.getCode())) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //品类
            if (athenaBesEquipment != null && athenaBesEquipment.getCategoryId() != null) {
                if (e.getCategoryId().equals(athenaBesEquipment.getCategoryId())) {
                    Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                    e.setProductCode(p.getCode());
                    //子设备
                    if (athenaBesEquipment.getpId() != null) {
                        if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                            Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                            e.setParentCode(eParent.getCode());
                            list.add(e);
                        }
                    } else {
                        if (e.getpId() == null) {
                            list.add(e);
                        }
                    }
                }
                continue;
            }
            //无条件查询
            if (athenaBesEquipment == null || (athenaBesEquipment.getCategoryId() == null
                    && StringUtils.isEmpty(athenaBesEquipment.getName())
                    && StringUtils.isEmpty(athenaBesEquipment.getCode()))) {
                Product p = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product, e.getProductId());
                e.setProductCode(p.getCode());
                //子设备
                if (athenaBesEquipment.getpId() != null) {
                    if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                        Equipment eParent = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, e.getpId());
                        e.setParentCode(eParent.getCode());
                        list.add(e);
                    }
                } else {
                    if (e.getpId() == null) {
                        list.add(e);
                    }
                }
                continue;
            }
        }

        // 排序.reversed())
        list = list.stream().sorted(Comparator.comparing(Equipment::getCreateTime))
                .collect(Collectors.toList());
        return list;
//        return athenaBesEquipmentMapper.selectAthenaBesEquipmentList(athenaBesEquipment);
    }

    /**
     * 新增物联设备
     *
     * @param athenaBesEquipment 物联设备
     * @return 结果
     */
    @Override
    public AjaxResult insertAthenaBesEquipment(Equipment athenaBesEquipment) {
        if (StringUtils.isEmpty(athenaBesEquipment.getCode()) ||
                StringUtils.isEmpty(athenaBesEquipment.getName()) ||
                StringUtils.isEmpty(athenaBesEquipment.getIpAddress()) ||
                athenaBesEquipment.getProductId() == null) {
            return AjaxResult.error("参数错误");
        }
        if (athenaBesEquipment.getpId() == null) {
            if (StringUtils.isEmpty(athenaBesEquipment.getPortNum())) {
                return AjaxResult.error("参数错误");
            }
        }

        if (StringUtils.isEmpty(athenaBesEquipment.getState())) {
            athenaBesEquipment.setState("0");
        }

        //查重产品iD/编号
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
        for (Object j : values) {
            Equipment e = (Equipment) j;
            if (e.getCode().equals(athenaBesEquipment.getCode()) /*|| e.getProductId().equals(athenaBesEquipment.getProductId())*/) {
                return AjaxResult.error(/*产品/*/"编号重复");
            }
            if (e.getCode().equals(athenaBesEquipment.getName()) && !e.getId().equals(athenaBesEquipment.getId())) {
                if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                    return AjaxResult.error("名称重复");
                }
            }
            if (e.getIpAddress() != null && e.getIpAddress().equals(athenaBesEquipment.getIpAddress()) && !e.getId().equals(athenaBesEquipment.getId())) {
                if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                    return AjaxResult.error("设备地址重复");
                }
            }
        }
//        List<Equipment> equipments = athenaBesEquipmentMapper.selectAthenaBesEquipmentListCheck(athenaBesEquipment);
//        if (equipments.size() > 0) {
//            return AjaxResult.error("产品/编号重复");
//        }

        athenaBesEquipment.setCreateName(SecurityUtils.getUsername());
        athenaBesEquipment.setCreateTime(DateUtils.getNowDate());
        boolean isADD = athenaBesEquipmentMapper.insertAthenaBesEquipment(athenaBesEquipment);
        if (isADD) {
            //查询所有产品信息
            List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(athenaBesEquipment);
            athenaBesEquipment = equipmentsRedis.get(0);
            //添加缓存
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, athenaBesEquipment.getId(), athenaBesEquipment);
            return AjaxResult.success("添加成功");
        } else {
            return AjaxResult.error("添加失败");
        }
    }

    /**
     * 修改物联设备
     *
     * @param athenaBesEquipment 物联设备
     * @return 结果
     */
    @Override
    public AjaxResult updateAthenaBesEquipment(Equipment athenaBesEquipment) {
        if (athenaBesEquipment.getId() == null ||
                StringUtils.isEmpty(athenaBesEquipment.getCode()) ||
                StringUtils.isEmpty(athenaBesEquipment.getName()) ||
                StringUtils.isEmpty(athenaBesEquipment.getIpAddress()) ||
                athenaBesEquipment.getProductId() == null) {
            return AjaxResult.error("参数错误");
        }
        if (athenaBesEquipment.getpId() == null) {
            if (StringUtils.isEmpty(athenaBesEquipment.getPortNum())) {
                return AjaxResult.error("参数错误");
            }
        }

        if (StringUtils.isEmpty(athenaBesEquipment.getState())) {
            athenaBesEquipment.setState("0");
        }

        //查重产品iD/编号
        Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
        for (Object j : values) {
            Equipment e = (Equipment) j;
            /*|| e.getProductId().equals(athenaBesEquipment.getProductId())*/
            if (e.getCode().equals(athenaBesEquipment.getCode()) && !e.getId().equals(athenaBesEquipment.getId())) {
                return AjaxResult.error(/*产品/*/"编号重复");
            }
            if (e.getCode().equals(athenaBesEquipment.getName()) && !e.getId().equals(athenaBesEquipment.getId())) {
                if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                    return AjaxResult.error("名称重复");
                }
            }
            if (e.getIpAddress() != null && e.getIpAddress().equals(athenaBesEquipment.getIpAddress()) && !e.getId().equals(athenaBesEquipment.getId())) {
                if (e.getpId() != null && e.getpId().equals(athenaBesEquipment.getpId())) {
                    return AjaxResult.error("设备地址重复");
                }
            }
        }

        athenaBesEquipment.setUpdateName(SecurityUtils.getUsername());
        athenaBesEquipment.setUpdateTime(DateUtils.getNowDate());
        boolean isUpdtae = athenaBesEquipmentMapper.updateAthenaBesEquipment(athenaBesEquipment);
        if (isUpdtae) {
            //查询所有产品信息
            List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(athenaBesEquipment);
            athenaBesEquipment = equipmentsRedis.get(0);
            //添加缓存
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, athenaBesEquipment.getId(), athenaBesEquipment);
            return AjaxResult.success("修改成功");
        } else {
            return AjaxResult.error("修改失败");
        }
    }

    /**
     * 批量删除物联设备
     *
     * @param ids 需要删除的物联设备主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteAthenaBesEquipmentByIds(Long[] ids) {
        if (ids == null || ids.length == 0) {
            return AjaxResult.error("参数错误");
        }
        Long[] sonIds;
        boolean isDelete = false;
        //查询对应的子设备
        for (Long id : ids) {
            //是否有子设备，有子设备先删除子设备
            Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
            for (Object j : values) {
                Equipment e = (Equipment) j;
                if (e.getpId() != null && e.getpId().equals(id)) {
                    return AjaxResult.error("请先删除该设备下的子设备");
                }
            }
//            //删除所有子设备
//            athenaBesEquipmentMapper.deleteSonAthenaBesEquipmentByIds(ids[i]);
        }

        isDelete = athenaBesEquipmentMapper.deleteAthenaBesEquipmentByIds(ids);
        if (isDelete) {
            for (Long id : ids) {
                //删除缓存
                redisCache.delCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, id);
            }
            return AjaxResult.success("删除成功");
        } else {
            return AjaxResult.error("删除失败");
        }
    }

    /**
     * 删除物联设备信息
     *
     * @param id 物联设备主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteAthenaBesEquipmentById(Long id) {
        if (id == null) {
            return AjaxResult.error("参数错误");
        }
        boolean isDelete = athenaBesEquipmentMapper.deleteAthenaBesEquipmentById(id);
        if (isDelete) {
            return AjaxResult.success("删除成功");
        } else {
            return AjaxResult.error("删除失败");
        }
    }

    /*
     * 导入物联设备
     * */
    @Override
    public String importEquipment(List<Equipment> equipmentList, Boolean isUpdateSupport, String operName) {
        if (StringUtils.isNull(equipmentList) || equipmentList.size() == 0) {
            throw new ServiceException("导入物联设备数据不能为空！");
        }
        int successNum = 0;
        int failureNum = 0;
        StringBuilder successMsg = new StringBuilder();
        StringBuilder failureMsg = new StringBuilder();
        a:
        for (Equipment equipment : equipmentList) {
            try {
                //非空判断
                if (StringUtils.isEmpty(equipment.getProductCode())) {
                    failureNum++;
                    String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 产品编号为空：";
                    failureMsg.append(msg);
                    continue a;
                }
                if (StringUtils.isEmpty(equipment.getCode())) {
                    failureNum++;
                    String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getName() + " 设备编号为空：";
                    failureMsg.append(msg);
                    continue a;
                }
                if (StringUtils.isEmpty(equipment.getName())) {
                    failureNum++;
                    String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/ 设备名称为空：";
                    failureMsg.append(msg);
                    continue a;
                }
                if (StringUtils.isEmpty(equipment.getParentCode())) {
                    //网关/直连
                    if (StringUtils.isEmpty(equipment.getNetworkType())) {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 网络类型为空(或未填写客户端/服务器)：";
                        failureMsg.append(msg);
                        continue a;
                    }
                    if (StringUtils.isEmpty(equipment.getIpAddress())) {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " ip地址为空：";
                        failureMsg.append(msg);
                        continue a;
                    }
                    if (StringUtils.isEmpty(equipment.getPortNum())) {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 端口为空：";
                        failureMsg.append(msg);
                        continue a;
                    }
                }


                if (StringUtils.isEmpty(equipment.getState())) {
                    equipment.setState("0");
                }
                // 验证是否存在这个物联设备
                Equipment equipment1 = athenaBesEquipmentMapper.getInfoByCode(equipment.getCode());
                // 查重处理
//                List<Equipment> checkList = athenaBesEquipmentMapper.selectAthenaBesEquipmentListCheck(equipment);
//                if(checkList.size()>0){
//                    successMsg.append("<br/>" + successNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 导入失败，编号/名称重复");
//                    return successMsg.toString();
//                }

                if (StringUtils.isNull(equipment1)) {
                    //查重名称/编号
                    Collection<Object> valuesCheck = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
                    b:
                    for (Object j : valuesCheck) {
                        Equipment e = (Equipment) j;
                        if (e.getCode().equals(equipment.getCode())) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 设备编号重复：";
                            failureMsg.append(msg);
                            continue a;
                        }
                        if (e.getName().equals(equipment.getName())) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 设备名称重复：";
                            failureMsg.append(msg);
                            continue a;
                        }
                    }


                    //根据产品code获取产品ID
                    Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product).values();
                    e:
                    for (Object j : values) {
                        Product p = (Product) j;
                        if (p.getCode().equals(equipment.getProductCode())) {
                            equipment.setProductId(p.getId());
                            break e;
                        }
                    }
                    if (equipment.getProductId() == null) {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 产品编号有误：";
                        failureMsg.append(msg);
                        continue a;
                    }
                    if (!StringUtils.isEmpty(equipment.getParentCode())) {
                        //根据父设备code获取父ID
                        Collection<Object> values1 = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
                        f:
                        for (Object j : values1) {
                            Equipment eq = (Equipment) j;
                            if (eq.getCode().equals(equipment.getParentCode())) {
                                equipment.setpId(eq.getId());
                                if (!StringUtils.isEmpty(equipment.getIpAddress())) {
                                    //查重地址
                                    for (Object obj : valuesCheck) {
                                        Equipment equ = (Equipment) obj;
                                        if (equ.getpId() != null && equ.getpId().equals(equipment.getpId()) && equ.getIpAddress() != null &&
                                                equ.getIpAddress().equals(equipment.getIpAddress())) {
                                            failureNum++;
                                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + "地址重复：";
                                            failureMsg.append(msg);
                                            continue a;
                                        }
                                    }
                                } else {
                                    failureNum++;
                                    String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + "地址为空：";
                                    failureMsg.append(msg);
                                    continue a;
                                }
                                break f;
                            }
                        }
                        if (equipment.getpId() == null) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 父设备编号有误：";
                            failureMsg.append(msg);
                            continue a;
                        }
                    }
                    equipment.setCreateName(operName);
                    equipment.setCreateTime(DateUtils.getNowDate());
                    boolean isADD = athenaBesEquipmentMapper.insertAthenaBesEquipment(equipment);
                    if (isADD) {
                        //查询所有产品信息
                        List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(equipment);
                        equipment = equipmentsRedis.get(0);
                        //添加缓存
                        redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, equipment.getId(), equipment);
                        successNum++;
                        successMsg.append("<br/>" + successNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 导入成功");
                    } else {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 添加进数据库失败：";
                        failureMsg.append(msg);
                        continue a;
                    }
                } else if (isUpdateSupport) {
                    equipment.setId(equipment1.getId());
                    //查重名称/编号
                    Collection<Object> valuesCheck = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
                    c:
                    for (Object j : valuesCheck) {
                        Equipment e = (Equipment) j;
                        if (e.getCode().equals(equipment.getCode()) && !e.getId().equals(equipment.getId())) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 设备编号重复：";
                            failureMsg.append(msg);
                            continue a;
                        }
                        if (e.getName().equals(equipment.getName()) && !e.getId().equals(equipment.getId())) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 设备名称重复：";
                            failureMsg.append(msg);
                            continue a;
                        }
                    }

                    //根据产品code获取产品ID
                    Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product).values();
                    g:
                    for (Object j : values) {
                        Product p = (Product) j;
                        if (p.getCode().equals(equipment.getProductCode())) {
                            equipment.setProductId(p.getId());
                            break g;
                        }
                    }
                    if (equipment.getProductId() == null) {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 产品编号有误：";
                        failureMsg.append(msg);
                        continue a;
                    }
                    if (!StringUtils.isEmpty(equipment.getParentCode())) {
                        //根据父设备code获取父ID
                        Collection<Object> values1 = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
                        h:
                        for (Object j : values1) {
                            Equipment eq = (Equipment) j;
                            if (eq.getCode().equals(equipment.getParentCode())) {
                                equipment.setpId(eq.getId());
                                if (!StringUtils.isEmpty(equipment.getIpAddress())) {
                                    //查重地址
                                    for (Object obj : valuesCheck) {
                                        Equipment equ = (Equipment) obj;
                                        if (equ.getpId() != null && equ.getpId().equals(equipment.getpId()) && equ.getIpAddress() != null &&
                                                equ.getIpAddress().equals(equipment.getIpAddress())) {
                                            failureNum++;
                                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + "地址重复：";
                                            failureMsg.append(msg);
                                            continue a;
                                        }
                                    }
                                } else {
                                    failureNum++;
                                    String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + "地址为空：";
                                    failureMsg.append(msg);
                                    continue a;
                                }
                                break h;
                            }
                        }
                        if (equipment.getpId() == null) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 父设备编号有误：";
                            failureMsg.append(msg);
                            continue a;
                        }
                    }

                    equipment.setUpdateName(operName);
                    equipment.setUpdateTime(DateUtils.getNowDate());
                    boolean isUpdate = athenaBesEquipmentMapper.updateAthenaBesEquipment(equipment);
                    if (isUpdate) {
                        //查询所有产品信息
                        List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(equipment);
                        equipment = equipmentsRedis.get(0);
                        //添加缓存
                        redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, equipment.getId(), equipment);
                        successNum++;
                        successMsg.append("<br/>" + successNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 更新成功");
                    } else {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 修改数据库失败：";
                        failureMsg.append(msg);
                        continue a;
                    }
                } else {
                    //查重名称/编号
                    Collection<Object> valuesCheck = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
                    d:
                    for (Object j : valuesCheck) {
                        Equipment e = (Equipment) j;
                        if (e.getCode().equals(equipment.getCode())) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 设备编号重复：";
                            failureMsg.append(msg);
                            continue a;
                        }
                        if (e.getName().equals(equipment.getName())) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 设备名称重复：";
                            failureMsg.append(msg);
                            continue a;
                        }
                    }


                    //根据产品code获取产品ID
                    Collection<Object> values = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Product).values();
                    i:
                    for (Object j : values) {
                        Product p = (Product) j;
                        if (p.getCode().equals(equipment.getProductCode())) {
                            equipment.setProductId(p.getId());
                            break i;
                        }
                    }
                    if (equipment.getProductId() == null) {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 产品编号有误：";
                        failureMsg.append(msg);
                        continue a;
                    }
                    if (!StringUtils.isEmpty(equipment.getParentCode())) {
                        //根据父设备code获取父ID
                        Collection<Object> values1 = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment).values();
                        j:
                        for (Object j : values1) {
                            Equipment eq = (Equipment) j;
                            if (eq.getCode().equals(equipment.getParentCode())) {
                                equipment.setpId(eq.getId());
                                if (!StringUtils.isEmpty(equipment.getIpAddress())) {
                                    //查重地址
                                    for (Object obj : valuesCheck) {
                                        Equipment equ = (Equipment) obj;
                                        if (equ.getpId() != null && equ.getpId().equals(equipment.getpId()) && equ.getIpAddress() != null &&
                                                equ.getIpAddress().equals(equipment.getIpAddress())) {
                                            failureNum++;
                                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + "地址重复：";
                                            failureMsg.append(msg);
                                            continue a;
                                        }
                                    }
                                } else {
                                    failureNum++;
                                    String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + "地址为空：";
                                    failureMsg.append(msg);
                                    continue a;
                                }
                                break j;
                            }
                        }
                        if (equipment.getpId() == null) {
                            failureNum++;
                            String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 父设备编号有误：";
                            failureMsg.append(msg);
                            continue a;
                        }
                    }
                    equipment.setCreateName(operName);
                    equipment.setCreateTime(DateUtils.getNowDate());
                    boolean isADD = athenaBesEquipmentMapper.insertAthenaBesEquipment(equipment);
                    if (isADD) {
                        //查询所有产品信息
                        List<Equipment> equipmentsRedis = athenaBesEquipmentMapper.selectAthenaBesEquipmentList(equipment);
                        equipment = equipmentsRedis.get(0);
                        //添加缓存
                        redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, equipment.getId(), equipment);
                        successNum++;
                        successMsg.append("<br/>" + successNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 导入成功");
                    } else {
                        failureNum++;
                        String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 添加进数据库失败：";
                        failureMsg.append(msg);
                        continue a;
                    }
                }
            } catch (Exception e) {
                failureNum++;
                String msg = "<br/>" + failureNum + "、物联设备 " + equipment.getCode() + "/" + equipment.getName() + " 导入失败：";
                failureMsg.append(msg + e.getMessage());
                continue a;
            }
        }
        if (failureNum > 0) {
            failureMsg.insert(0, "很抱歉，导入失败！共 " + failureNum + " 条数据格式不正确，错误如下：");
            throw new ServiceException(failureMsg.toString());
        } else {
            successMsg.insert(0, "恭喜您，数据已全部导入成功！共 " + successNum + " 条，数据如下：");
        }
        return successMsg.toString();
    }


}

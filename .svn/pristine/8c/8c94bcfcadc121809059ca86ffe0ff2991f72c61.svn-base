<template>
  <div>
    <button
      class="v-button">{{ propValue }}
    </button>

    <!-- 添加或修改设备对话框 -->
    <el-dialog :title="title" :visible.sync="open" width="600px" append-to-body>
      <el-row v-for="(item, index) in pointList" :key="index" style="margin-left: 0.5vw">
        <el-col :span="24">
          <el-form :inline="true" :model="item" class="demo-ruleForm" ref="formInline">
            <el-form-item label="提示">
              <el-input v-model="item.nickName" :disabled="true" style="width: 10vw"></el-input>
            </el-form-item>
            <el-form-item label="数值">
              <el-input v-model="item.value" :disabled="true" style="width: 10vw"></el-input>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <el-form :inline="true" label-width="80px" style="text-align: center">
        <el-form-item>
          <el-button type="primary" @click="submitItem">下发</el-button>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="disItem">取消</el-button>
        </el-form-item>
      </el-form>
    </el-dialog>
  </div>

</template>

<script>
  // import OnEvent from '../common/OnEvent'
  import {debugPointListInfo} from '@/api/basicData/deviceManagement/deviceTree/deviceTreePoint'
  import {mapState} from "vuex";
  import eventBus from "@/utils/designer/eventBus";
  import screenfull from "screenfull";

  export default {
    // extends: OnEvent,
    props: {
      propValue: {
        type: String,
        required: true,
        default: '',
      },
      linkage: {
        type: Object,
        default: () => {
        },
      },
      element: {
        type: Object,
        default: () => {
        },
      },
    },
    computed: {
      ...mapState([
        'editMode',
        'curComponent',
        'isUnsubscribe'
      ]),
    },
    data() {
      return {
        // 是否显示弹出层
        open: false,
        // 弹出层标题
        title: "",
        pointList: [],//点位list
      }
    },
    created() {
      if (this.editMode != 'edit') {

        let linkagePoint = this.element.linkage.data[0].point;
        if (linkagePoint.length > 0) {
          linkagePoint.forEach(value => {
            let param = {};
            param.id = value.id;
            param.nickName = value.nickName;
            param.value = value.value;
            this.pointList.push(param)
          })
        }

      }
      if (this.linkage?.data?.length) {
        eventBus.$on('v-click', this.onClick)
        eventBus.$on('v-hover', this.onHover)
      }
    },
    methods: {
      onClick(componentId) {
        const data = this.linkage.data.filter(item => item.id === componentId && item.event === 'v-click')
        this.changeStyle(data)
        //传递父组件,打开相应弹窗
        this.openInout(componentId, this.element)
      },

      onHover(componentId) {
        const data = this.linkage.data.filter(item => item.id === componentId && item.event === 'v-hover')
        this.changeStyle(data)
      },

      changeStyle(data = []) {
        data.forEach(item => {
          item.style.forEach(e => {
            if (e.key) {
              this.element.style[e.key] = e.value
            }
          })
        })
      },

      openInout(componentId, data) {
        if (data.id == componentId && data.component == "VButton") {
          if (!screenfull.isFullscreen){
            this.open = true
          }
        }
      },

      //下发
      submitItem() {

        debugPointListInfo(JSON.stringify(this.pointList)).then(responent => {
          this.open = false;
        })
      },
      //取消
      disItem() {
        this.open = false
      }
    }
  }
</script>

<style lang="scss" scoped>
  .v-button {
    display: inline-block;
    line-height: 1;
    white-space: nowrap;
    cursor: pointer;
    background: #fff;
    border: 1px solid #dcdfe6;
    color: #606266;
    -webkit-appearance: none;
    text-align: center;
    box-sizing: border-box;
    outline: 0;
    margin: 0;
    transition: .1s;
    font-weight: 500;
    width: 100%;
    height: 100%;
    font-size: 14px;

    &:active {
      color: #3a8ee6;
      border-color: #3a8ee6;
      outline: 0;
    }

    &:hover {
      background-color: #ecf5ff;
      color: #3a8ee6;
    }
  }
</style>

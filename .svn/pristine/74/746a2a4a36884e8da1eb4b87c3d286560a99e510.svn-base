package com.ruoyi.deviceManagement.deviceTree.controller;

import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.deviceManagement.deviceTree.domain.Controller;
import com.ruoyi.deviceManagement.deviceTree.service.ControllerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * 控制器Controller
 *
 * @author sunshangeng
 * @date 2022-09-14
 */
@RestController
/**qindehua 修改控制器访问路径*/
@RequestMapping("/basicData/deviceTree/controller")
public class ControllerController extends BaseController
{
    @Autowired
    private ControllerService controllerService;

    /**getButtonByTreeType
     * 查询控制器列表
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:list')")
    @GetMapping("/list")
    public TableDataInfo list(Controller controller)
    {
        startPage();
        List<Controller> list = controllerService.selectControllerList(controller);
        return getDataTable(list);
    }

    /**
     * 导出控制器列表
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:export')")
    @Log(title = "控制器", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, Controller controller)
    {
        List<Controller> list = controllerService.selectControllerList(controller);
        ExcelUtil<Controller> util = new ExcelUtil<>(Controller.class);
        util.exportExcel(response, list, "控制器数据");
    }

    /**
     * 获取控制器详细信息
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:query')")
    @GetMapping(value = "/{id}")
    public AjaxResult getInfo(@PathVariable("id") Long id)
    {
        return AjaxResult.success(controllerService.selectControllerById(id));
    }

    /**
     * 新增控制器
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:add')")
    @Log(title = "控制器", businessType = BusinessType.INSERT)
    @PostMapping("/addController")
    public AjaxResult addController(@RequestBody Controller controller)
    {
        AjaxResult ajaxResult = controllerService.insertController(controller);
        return ajaxResult;
    }

    /**
     * 修改控制器
     */
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:edit')")
    @Log(title = "控制器", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody Controller controller)
    {
        return controllerService.updateController(controller);
    }


    /**
     * 设置时间,ddc
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/09/22
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:setTimeDDC')")
    @GetMapping("/setTimeDDC")
    public AjaxResult setTimeDDC( Long deviceTreeId, Integer type)
    {
        return controllerService.setTimeDDC(deviceTreeId,type);
    }

    /**
     * 获取时间,ddc
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/09/22
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:getTimeDDC')")
    @GetMapping("/getTimeDDC")
    public AjaxResult getTimeDDC(Long deviceTreeId,Integer type)
    {
        return controllerService.getTimeDDC(deviceTreeId,type);
    }

    /**
     * DDC重新启动
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/09/22
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:restartDDC')")
    @GetMapping("/restartDDC")
    public AjaxResult restartDDC(Long deviceTreeId,Integer type)
    {
        return controllerService.restartDDC(deviceTreeId,type);
    }

    /**
     * 重置DDC控制器
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/09/22
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:resetDDC')")
    @GetMapping("/resetDDC")
    public AjaxResult resetDDC(Long deviceTreeId,Integer type)
    {
        return controllerService.resetDDC(deviceTreeId,type);
    }

    /**
     * 同步DDC
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @param synchronize  是否批量同步
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/10/10
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:sync')")
    @GetMapping("/synchronizeDDC")
    public AjaxResult synchronizeDDC(Long deviceTreeId,Integer type,boolean synchronize)
    {
        return controllerService.synchronizeDDC(deviceTreeId,type,synchronize);
    }

    /**
     * DDC远程升级
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/09/22
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:remoteUpgradeDdc')")
    @GetMapping("/remoteUpgradeDdc")
    public AjaxResult remoteUpgradeDdc(Long deviceTreeId,Integer type)
    {
        return controllerService.remoteUpgradeDdc(deviceTreeId,type);
    }


    /**
     * 参数对比
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/09/23
     **/
    @PreAuthorize("@ss.hasPermi('deviceTree:controller:contrast')")
    @GetMapping("/getDDCInfoParam")
    public AjaxResult getDDCInfoParam(Long deviceTreeId,Integer type)
    {
        return controllerService.getDDCInfoParam(deviceTreeId,type);
    }

}

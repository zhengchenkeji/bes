package com.ruoyi.electricPowerTranscription.param.service.impl;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.deviceManagement.deviceTree.domain.AthenaElectricMeter;
import com.ruoyi.electricPowerTranscription.param.domain.vo.ParamVO;
import com.ruoyi.electricPowerTranscription.param.mapper.ParamMapper;
import com.ruoyi.electricPowerTranscription.param.service.ParamService;
import com.ruoyi.energyCollection.acquisitionParam.domain.ElectricParams;
import com.ruoyi.energyCollection.collMethod.domain.ElectricCollRlgl;
import com.zc.common.constant.PointPowerParam;
import com.zc.common.constant.RedisKeyConstants;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletResponse;
import java.util.*;

/**
 * 电参数impl
 *
 * @author qindehua
 * @date 2022/11/29
 */
@Service
public class ParamServiceImpl implements ParamService {

    @Autowired
    private RedisCache redisCache;

    @Autowired
    private ParamMapper mapper;

    /**
     * 查询电表下面的电能参数
     *
     * @param id id
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/11/29
     **/
    @Override
    public AjaxResult getMeterParams(Long id) {
        //采集参数
        List<ElectricParams> electricParams=new LinkedList<>();
        //查询电表
        AthenaElectricMeter athenaElectricMeter=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Meter,id);
        //获取采集参数Ids
        List<Integer> list=new ArrayList<>();
        //先判断当前电表是否为AI点
        if(athenaElectricMeter.getCollectionMethodCode()==null){
            electricParams.add(new ElectricParams(PointPowerParam.Point_Meter_Code,PointPowerParam.Point_Meter_Name));
        }else {
            //获取采集方案下的所有采集参数Id
            for (Object value : redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricCollRlgl).values()) {
                ElectricCollRlgl electricCollRlgl=(ElectricCollRlgl) value;
                if (electricCollRlgl.getCollId()==athenaElectricMeter.getCollectionMethodCode().intValue()){
                    list.add(electricCollRlgl.getElectricId());
                }
            }
            //循环获取采集参数
            for (Integer integer : list) {
                electricParams.add(redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams,(long)integer));
            }
        }
        return AjaxResult.success(electricParams);
    }

    /**
     * 查询根据电能参数  查询参数数据
     *
     * @param paramVO
     * @return {@code AjaxResult }
     * @Author qindehua
     * @Date 2022/11/30
     **/
    @Override
    public AjaxResult getDataByParamsCode(ParamVO paramVO) {
        AthenaElectricMeter athenaElectricMeter=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Meter,paramVO.getMeter());
        Map<String,Object> map=mapper.selectDataByParamsCode(paramVO,athenaElectricMeter.getSysName());
        List<Map<String,Object>> data=new LinkedList<>();
        map.values().forEach(item->{
            data.add((HashMap<String,Object>)item);
        });
        return AjaxResult.success(sortByFeild(data,"time","desc"));
    }

    /**
     * List<Map>根据map字段排序
     *
     * @param list
     * @param feild 排序字段
     * @param sortTyp 排序方式 desc-倒序 asc-正序
     * @return
     */
    private static List<Map<String, Object>> sortByFeild(List<Map<String, Object>> list, String feild, String sortTyp) {
        if (CollectionUtils.isNotEmpty(list)) {
            list.sort((m1, m2) -> {
                if (StringUtils.equals(sortTyp, "desc")) {
                    return DateUtils.parseDate(String.valueOf(m2.get(feild))).compareTo(DateUtils.parseDate(String.valueOf(m1.get(feild))));
                } else {
                    return DateUtils.parseDate(String.valueOf(m1.get(feild))).compareTo(DateUtils.parseDate(String.valueOf(m2.get(feild))));
                }
            });
            // 或者 Collections类里面的sort方法也是list.sort()与上面一样
            // Collections.sort(list, (m1, m2)-> String.valueOf(m1.get(feild)).compareTo(String.valueOf(m2.get(feild)))); // lamuda排序
        }

        return list;
    }

    /**
     * 导出excel
     *
     * @param response 响应
     * @param paramVO
     * @Author qindehua
     * @Date 2022/11/30
     **/
    @Override
    public void exportExcel(HttpServletResponse response, ParamVO paramVO) {
        AthenaElectricMeter athenaElectricMeter=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Meter,paramVO.getMeter());

        Map<String, ElectricParams> mappParams=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams);
        /**获取电参数名称字典***/
        Map<String,String> dictMap=new HashMap<>();
        //将AI 点 默认参数加载进来
        dictMap.put(PointPowerParam.Point_Meter_Code,PointPowerParam.Point_Meter_Name);
        for (ElectricParams value : mappParams.values()) {
            dictMap.put(value.getCode(),value.getName());
        }
        /**Excel标题名称***/
        Map<String,String> titleList=new LinkedHashMap();
        titleList.put("index","序号");
        titleList.put("time","采集时间");

        /**根据code 设置Excel标题名称***/
        for (String o : paramVO.getParamsId()) {
            if (StringUtils.isNotEmpty(dictMap.get(o))){
                titleList.put(o,dictMap.get(o));
            }
        }
        Map<String,Object> map=mapper.selectDataByParamsCode(paramVO,athenaElectricMeter.getSysName());
        //将数据按顺序排列
        List<Map<String,Object>> dataList=new LinkedList<>();
        map.values().forEach(item->{
            Map<String,Object> mapLink=new LinkedHashMap<>();
            Map<String,Object> mapData=(HashMap<String, Object>) item;
            for (String s : titleList.keySet()) {
                if ("index".equals(s)){
                    continue;
                }
                mapLink.put(s,mapData.get(s));
            }
            dataList.add(mapLink);
        });
        ArrayList<String> title=new ArrayList<>(titleList.values());
        exportCommon(sortByFeild(dataList,"time","desc"),title,athenaElectricMeter.getAlias(),"电参数数据表",response);
    }

    /**
     * 批量导出
     *
     * @param response 响应
     * @param paramVO
     * @Author qindehua
     * @Date 2022/12/01
     **/
    @Override
    public void exportExcelBatch(HttpServletResponse response, ParamVO paramVO) {

        Map<String, ElectricParams> mappParams=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams);
        /**获取电参数名称字典***/
        Map<String,String> dictMap=new HashMap<>();
        for (ElectricParams value : mappParams.values()) {
            dictMap.put(value.getCode(),value.getName());
        }
        //将AI 点 默认参数加载进来
        dictMap.put(PointPowerParam.Point_Meter_Code,PointPowerParam.Point_Meter_Name);
        List<List<Map<String,Object>>> listData=new ArrayList<>();
        List<List<String>> listTitle=new ArrayList<>();
        List<String> listSheet=new ArrayList<>();

        for (Long id : paramVO.getMeterIds()) {
            /**********先获取电表对应的采集参数*************/

            //采集参数
            List<String> paramsId=new ArrayList<>();
            //查询电表
            AthenaElectricMeter athenaElectricMeter=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Meter,id);

            listSheet.add(athenaElectricMeter.getAlias());
            //获取采集参数Ids
            List<Integer> list=new ArrayList<>();
            //先判断当前电表是否为AI点
            if(athenaElectricMeter.getCollectionMethodCode()==null){
                paramsId.add(PointPowerParam.Point_Meter_Code);
            }else {
                //获取采集方案下的所有采集参数Id
                for (Object value : redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricCollRlgl).values()) {
                    ElectricCollRlgl electricCollRlgl=(ElectricCollRlgl) value;
                    if (electricCollRlgl.getCollId()==athenaElectricMeter.getCollectionMethodCode().intValue()){
                        list.add(electricCollRlgl.getElectricId());
                    }
                }
                //循环获取采集参数
                for (Integer integer : list) {
                    ElectricParams electricParams=redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams,(long)integer);
                    paramsId.add(electricParams.getCode());
                }
            }
            paramVO.setParamsId(paramsId);

            /**********根据电表系统名称及采集参数查询   电能参数数据************/
            /**Excel标题名称***/
            Map<String,String> titleList=new LinkedHashMap();
            titleList.put("index","序号");
            titleList.put("time","采集时间");

            /**根据code 设置Excel标题名称***/
            for (String o : paramVO.getParamsId()) {
                if (StringUtils.isNotEmpty(dictMap.get(o))){
                    titleList.put(o,dictMap.get(o));
                }
            }
            Map<String,Object> map=mapper.selectDataByParamsCode(paramVO,athenaElectricMeter.getSysName());
            //将数据按顺序排列
            List<Map<String,Object>> dataList=new LinkedList<>();
            map.values().forEach(item->{
                Map<String,Object> mapLink=new LinkedHashMap<>();
                Map<String,Object> mapData=(HashMap<String, Object>) item;
                for (String s : titleList.keySet()) {
                    if ("index".equals(s)){
                        continue;
                    }
                    mapLink.put(s,mapData.get(s));
                }
                dataList.add(mapLink);
            });
            ArrayList<String> title=new ArrayList<>(titleList.values());
            listTitle.add(title);
            listData.add(sortByFeild(dataList,"time","desc"));
        }
        exportCommonBatch(listData,listTitle,listSheet,"支路下所有电表数据表",response);

    }

    /**
     * 导出
     *
     * @param dataList  组装后的数据
     * @param titleList 标题行名称
     * @param sheetName sheet名称
     * @param fileName  文件名称
     * @param response  响应
     * @Author qindehua
     * @Date 2022/12/01
     **/
    public void exportCommon(List<Map<String, Object>> dataList, List<String> titleList,String sheetName,String fileName, HttpServletResponse response) {
        // 创建工作簿
        XSSFWorkbook workbook = new XSSFWorkbook();
        // 创建sheet
        XSSFSheet sheet = workbook.createSheet(sheetName);
        // 生成一个样式
        CellStyle style = workbook.createCellStyle();
        // 设置这些样式
        style.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.getIndex());//设置背景色
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);//设置背景色
        style.setAlignment(HorizontalAlignment.CENTER);//居中
        style.setVerticalAlignment(VerticalAlignment.CENTER);//居中
        style.setBorderBottom(BorderStyle.THIN);//边框
        style.setBorderLeft(BorderStyle.THIN);//边框
        style.setBorderRight(BorderStyle.THIN);//边框
        style.setBorderTop(BorderStyle.THIN);//边框
        //生成一个字体样式
        XSSFFont font = workbook.createFont();
        font.setFontHeightInPoints((short) 11);//字体大小
        font.setColor(HSSFColor.HSSFColorPredefined.WHITE.getIndex());//字体颜色
        font.setFontName("Arial");
        font.setBold(true);//加粗
        // 把字体 应用到当前样式
        style.setFont(font);
        //存储最大列宽
        Map<Integer,Integer> maxWidth = new HashMap<Integer,Integer>();


        // 生成标题行
        XSSFRow row = sheet.createRow(0);
        for (int i = 0; i < titleList.size(); i++) {
            XSSFCell cell0 = row.createCell(i);
            row.createCell(i).setCellValue(titleList.get(i));
            maxWidth.put(i,cell0.getStringCellValue().getBytes().length  * 256 + 400);
            cell0.setCellStyle(style);
        }
        //填充数据
        for (int i = 0; i < dataList.size(); i++) {
            Map<String, Object> valueMap = dataList.get(i);
            row = sheet.createRow(i + 1); // 从第2行开始填充数据
            Set set = valueMap.keySet();
            //序号
            row.createCell(0).setCellValue(i + 1);
            int cellNum = 1;
            for (Object key : set) {
                String keyStr = valueMap.get(key).toString();
                //组装的字段填充
                row.createCell(cellNum).setCellValue(keyStr);
                cellNum++;
            }
        }

        // 列宽自适应
        for (int i = 0; i < titleList.size(); i++) {
            sheet.setColumnWidth(i,maxWidth.get(i));
        }

        try {
            response.setContentType("application/octet-stream");
            response.setHeader("Content-disposition", "attachment;filename=" + java.net.URLEncoder.encode(fileName, "UTF-8"));
            response.flushBuffer();

            workbook.write(response.getOutputStream());
        } catch (Exception e) {
            System.out.println(fileName + "导出excel出现错误————————————————————————————————————————》" + e);
        }
    }

    /**
     * 批量导出通用
     *
     * @param dataList  组装后的数据
     * @param titleList 标题行名称
     * @param listSheet sheet名单
     * @param fileName  excel名称
     * @param response  响应
     * @Author qindehua
     * @Date 2022/12/01
     **/

    public void exportCommonBatch(List<List<Map<String,Object>>> dataList,List<List<String>> titleList,List<String> listSheet, String fileName, HttpServletResponse response) {
        // 创建工作簿
        XSSFWorkbook workbook = new XSSFWorkbook();

        for (int x = 0; x < dataList.size(); x++) {
            // 创建sheet
            XSSFSheet sheet = workbook.createSheet(listSheet.get(x));
            // 生成一个样式
            CellStyle style = workbook.createCellStyle();
            // 设置这些样式
            style.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.getIndex());//设置背景色
            style.setFillPattern(FillPatternType.SOLID_FOREGROUND);//设置背景色
            style.setAlignment(HorizontalAlignment.CENTER);//居中
            style.setVerticalAlignment(VerticalAlignment.CENTER);//居中
            style.setBorderBottom(BorderStyle.THIN);//边框
            style.setBorderLeft(BorderStyle.THIN);//边框
            style.setBorderRight(BorderStyle.THIN);//边框
            style.setBorderTop(BorderStyle.THIN);//边框
            //生成一个字体样式
            XSSFFont font = workbook.createFont();
            font.setFontHeightInPoints((short) 11);//字体大小
            font.setColor(HSSFColor.HSSFColorPredefined.WHITE.getIndex());//字体颜色
            font.setFontName("Arial");
            font.setBold(true);//加粗
            // 把字体 应用到当前样式
            style.setFont(font);
            //存储最大列宽
            Map<Integer,Integer> maxWidth = new HashMap<Integer,Integer>();


            // 生成标题行
            XSSFRow row = sheet.createRow(0);
            for (int i = 0; i < titleList.get(x).size(); i++) {
                XSSFCell cell0 = row.createCell(i);
                row.createCell(i).setCellValue(titleList.get(x).get(i));
                maxWidth.put(i,cell0.getStringCellValue().getBytes().length  * 256 + 400);
                cell0.setCellStyle(style);
            }
            //填充数据
            for (int i = 0; i < dataList.get(x).size(); i++) {
                Map<String, Object> valueMap = dataList.get(x).get(i);
                row = sheet.createRow(i + 1); // 从第2行开始填充数据
                Set set = valueMap.keySet();
                //序号
                row.createCell(0).setCellValue(i + 1);
                int cellNum = 1;
                for (Object key : set) {
                    String keyStr = valueMap.get(key).toString();
                    //组装的字段填充
                    row.createCell(cellNum).setCellValue(keyStr);
                    cellNum++;
                }
            }
            // 列宽自适应
            for (int i = 0; i < titleList.get(x).size(); i++) {
                sheet.setColumnWidth(i,maxWidth.get(i));
            }
        }

        try {
            response.setContentType("application/octet-stream");
            response.setHeader("Content-disposition", "attachment;filename=" + java.net.URLEncoder.encode(fileName, "UTF-8"));
            response.flushBuffer();

            workbook.write(response.getOutputStream());
        } catch (Exception e) {
            System.out.println(fileName + "导出excel出现错误————————————————————————————————————————》" + e);
        }
    }
}

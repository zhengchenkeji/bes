package com.ruoyi.efounder.JEnterprise.controller.deviceTree;

import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.BuildNode;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.NodeConfigSet;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.Point;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.PointControlCommand;
import com.ruoyi.efounder.JEnterprise.service.deviceTree.PointService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * 虚点，总线
 *
 * @author gaojikun
 * @date 2022-09-14
 */
@RestController
@RequestMapping("/basicData/point")
public class PointController extends BaseController {
    @Autowired
    private PointService pointService;


    /**
     * @Description: 添加树节点
     * @auther: gaojikun
     * @param:deviceTree
     * @return:AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:insertDeviceTreee')")
    @PostMapping("/insertDeviceTreee")
    public AjaxResult insertDeviceTreee(BuildNode buildNode) {
        return pointService.insertDeviceTreee(buildNode);
    }

    /**
     * @Description: 修改树节点
     * @auther: gaojikun
     * @param:deviceTree
     * @return:AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:updateDeviceTreee')")
    @PostMapping("/updateDeviceTreee")
    public AjaxResult updateDeviceTreee(BuildNode buildNode) {
        return pointService.updateDeviceTreee(buildNode);
    }

    /**
     * @Description: 添加虚点
     * @auther: gaojikun
     * @param:point
     * @return:AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:insertPoint')")
    @PostMapping("/insertPoint")
    public AjaxResult insertPoint(Point point) {
        return pointService.insertPoint(point);
    }

    /**
     * @Description: 修改点位
     * @auther: gaojikun
     * @param:point
     * @return:AjaxResult
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:updatePoint')")
    @PostMapping("/updatePoint")
    public AjaxResult updatePoint(Point point) {
        return pointService.updatePoint(point);
    }

    /**
     * @Description: 查询虚点类型
     * @auther: gaojikun
     */
//    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:listVpoint')")
    @GetMapping("/listVpoint")
    public AjaxResult listVpoint() {
        return pointService.listVpoint();
    }


    /**
     * @description: 给照明子节点添加到树节点
     * @author: sunshangeng
     * @date: 2022/9/26 17:44
     * @param:
     * @return:
     **/
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:insertLightingTree')")
    @PostMapping("/insertLightingTree")
    public AjaxResult insertLightingTree(BuildNode buildNode)
    {
        return pointService.insertLightingTree(buildNode);
    }

    /**
     * @description: 修改照明子节点添加到树节点
     * @author: sunshangeng
     * @date: 2022/9/26 17:44
     * @param:
     * @return:
     **/
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:updateLightingTree')")
    @PostMapping("/updateLightingTree")
    public AjaxResult updateLightingTree(BuildNode buildNode)
    {
        return pointService.updateLightingTree(buildNode);
    }

    /**
     * 调试一个逻辑点的初始值值
     * @param pointControlCommand
     * @return AjaxResult
     * @author: gaojikun
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:debugPointInfo')")
    @GetMapping("/debugPointInfo")
    public AjaxResult debugPointInfo(PointControlCommand pointControlCommand){
        return pointService.debugPointInfo(pointControlCommand);
    }

    /**
     * 点值配置
     * @param NodeConfigSet
     * @return AjaxResult
     * @author: gaojikun
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:debuggerEditPointValue')")
    @GetMapping("/debuggerEditPointValue")
    public AjaxResult debuggerEditPointValue(NodeConfigSet NodeConfigSet){
        return pointService.debuggerEditPointValue(NodeConfigSet);
    }

    /**
     * 查询点值配置
     * @param NodeConfigSet
     * @return AjaxResult
     * @author: gaojikun
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:selectEditPointValue')")
    @GetMapping("/selectEditPointValue")
    public AjaxResult selectEditPointValue(NodeConfigSet NodeConfigSet){
        return pointService.selectEditPointValue(NodeConfigSet);
    }

    /**
     *
     * @Description:批量下发点位值
     *
     * @auther: wanghongjie
     * @date: 17:03 2022/11/3
     * @param:
     * @return:
     *
     */
    @PreAuthorize("@ss.hasPermi('basicData:deviceTree:point:debugPointListInfo')")
    @PostMapping("/debugPointListInfo")
    public AjaxResult debugPointListInfo(@RequestBody List<PointControlCommand> list){
        return pointService.debugPointListInfo(list);
    }

}

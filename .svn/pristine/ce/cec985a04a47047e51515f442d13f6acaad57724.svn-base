package com.zc.connect.nettyServer.ChildChannelHandler.ModbusHandler;

import com.zc.connect.business.handler.ReceiptMsgHandler;
import com.zc.connect.business.handler.ModbusMsgReceive;
import com.zc.connect.util.MsgUtil;
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.net.InetSocketAddress;

/**
 * @Author: wanghongjie
 * @Description:
 * @Date: Created in 9:16 2023/3/9
 * @Modified By:
 */
@Component
public class ModbusServerHandlers {
    private static final Logger log = LoggerFactory.getLogger(ModbusServerHandlers.class);

    /**
     * 回令业务处理
     * 解析
     */
    public void response_analysis(ChannelHandlerContext ctx, Object msg) throws Exception {

//        NettyClient.connect();
//        String host = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress().getHostAddress();
//        int post = ((InetSocketAddress) ctx.channel().remoteAddress()).getPort();
//        String ip_port = host + ":" + post;
//        //根据当前ip获取对应的消息解析方式
//        System.out.println(ip_port);
//        ByteBuf byteBuf = (ByteBuf) msg;
//
////        System.out.println("---------------start process msg--------------------");
////        System.out.println("readable bytes is:"+byteBuf.readableBytes());
//        short TransActionId = byteBuf.readShort();
//        short protocal = byteBuf.readShort();
//        short msg_len = byteBuf.readShort();
//        byte slave_id = byteBuf.readByte();
//        byte funcotion_code = byteBuf.readByte();
//
//        if(funcotion_code ==3 )//如果功能码是4，也就是读请求，我们要返回结果
//        {   //输出
//            short start_address = byteBuf.readByte();
//            short ncount = byteBuf.readShort();
//            System.out.println("TransactionID is:"+ TransActionId);
//            System.out.println("protocal id is:"+protocal);
//            System.out.println("msg len is:"+msg_len);
//            System.out.println("slave id  is:"+slave_id);
//            System.out.println("function code is:"+funcotion_code);
//            System.out.println("start address is:"+start_address);
//            System.out.println("count  is:"+ncount);
//            System.out.println("------------------------------------------------");
//
//            ByteBuf out = ctx.alloc().directBuffer(110);
//            out.writeShort(TransActionId);//Transaction ID  2
//            out.writeShort(protocal);//protocal id     2
//            out.writeShort(6);//msg len        2
//            out.writeByte(slave_id + 1);//slave id         1
//            out.writeByte(6);//function code    1
//            //out.writeShort(0);//start address 2
//            out.writeShort(0);//46个寄存器      46*2
//
//            int[] buffer = new int[2];
//            buffer[1] = 13;
//
//            for(int i=0;i<buffer.length;i++) {
//                out.writeByte(buffer[i]);
//            }
//
//
//
//            ctx.channel().writeAndFlush(out);
//        }

        InetSocketAddress ipSocket = (InetSocketAddress)ctx.channel().remoteAddress();

        //客户端IP地址
        String ip = ipSocket.getAddress().getHostAddress();

        //判断当前协议类型,是tcp或者udp

        System.out.println(ip);
        ModbusMsgReceive modbusMsgReceive = ReceiptMsgHandler.modbusMsgReceive;
        modbusMsgReceive.sendRegistrationMessage("1");
        ByteBuf byteBuf = (ByteBuf) msg;
        System.out.println("---------------start process msg--------------------");
        System.out.println("readable bytes is:"+byteBuf.readableBytes());
        short TransActionId = byteBuf.readShort();
        short protocal = byteBuf.readShort();
        short msg_len = byteBuf.readShort();
        byte slave_id = byteBuf.readByte();
        byte funcotion_code = byteBuf.readByte();

        int[] buffer = new int[20];
        if(funcotion_code ==4 || funcotion_code ==3 )//如果功能码是4，也就是读请求，我们要返回结果
        {   //输出
            short start_address = byteBuf.readShort();
            short ncount = byteBuf.readShort();
            System.out.println("TransactionID is:"+ TransActionId);
            System.out.println("protocal id is:"+protocal);
            System.out.println("msg len is:"+msg_len);
            System.out.println("slave id  is:"+slave_id);
            System.out.println("function code is:"+funcotion_code);
            System.out.println("start address is:"+start_address);
            System.out.println("count  is:"+ncount);
            //返回响应消息报文
            ByteBuf out = ctx.alloc().directBuffer(110);
            out.writeShort(TransActionId);//Transaction ID  2
            out.writeShort(protocal);//protocal id     2
            out.writeShort(23);//msg len        2
            out.writeByte(slave_id);//slave id         1
            out.writeByte(funcotion_code);//function code    1
            //out.writeShort(0);//start address 2
            out.writeByte(20);//46个寄存器      46*2

            buffer[1] = 1;

            buffer[3] = 15;
            for(int i=0;i<20;i++)
                out.writeByte(buffer[i]);
            ctx.channel().writeAndFlush(out);

        }
        else if(funcotion_code == 0x10)
        {
            short start_address = byteBuf.readShort();

            short nWords = byteBuf.readShort();
            byte  ncount = byteBuf.readByte();

            //更新本地buffer
            for(int i=0;i<ncount;i++)
                buffer[start_address*2+i] = byteBuf.readByte();
            //printMsg();
            //返回响应消息
            ByteBuf out = ctx.alloc().directBuffer(93);
            out.writeShort(0);//Transaction ID  2
            out.writeShort(0);//protocal id     2
            out.writeShort(0);//msg len         2
            out.writeByte(1);//slave id         1
            out.writeByte(0x10);//function code    1
            out.writeShort(start_address);//46个寄存器      46*2
            out.writeShort(ncount);//ncuont  2
            ctx.channel().writeAndFlush(out);
            //System.out.println("response write success,write words is:"+out.readableBytes());
            //out.release();
        }
        else{
            System.out.println("error function");
        }

        //读取客户端指令

        Channel channel = MsgUtil.getChannelByTokenSN(ip);

        if (channel == null)
        {
        } else {
            ByteBuf out = ctx.alloc().directBuffer(93);
            out.writeShort(TransActionId);//Transaction ID  2
            out.writeShort(protocal);//protocal id     2
            out.writeShort(23);//msg len        2
            out.writeByte(slave_id);//slave id         1
            out.writeByte(funcotion_code);//function code    1
            //out.writeShort(0);//start address 2
            out.writeByte(20);//46个寄存器      46*2

            buffer[1] = 1;

            buffer[3] = 20;
            for(int i=0;i<20;i++)
                out.writeByte(buffer[i]);
            channel.writeAndFlush(out);
        }

        byteBuf.release();

    }
}

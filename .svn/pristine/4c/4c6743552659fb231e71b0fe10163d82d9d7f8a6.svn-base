package com.zc.efounder.JEnterprise.service.safetyWarning.impl;

import com.zc.ApplicationContextProvider;
import com.ruoyi.common.constant.Constants;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.domain.entity.SysUser;
import com.ruoyi.common.core.domain.model.LoginUser;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.utils.sms.model.SmsParam;
import com.ruoyi.common.utils.sms.server.EmailServer;
import com.ruoyi.common.utils.sms.server.SmsServer;
import com.zc.efounder.JEnterprise.commhandler.AlarmHandler;
import com.zc.efounder.JEnterprise.domain.safetyWarning.AlarmHistoricalData;
import com.zc.efounder.JEnterprise.mapper.safetyWarning.AlarmHistoricalDataMapper;
import com.zc.efounder.JEnterprise.domain.safetyWarning.AlarmNotifier;
import com.zc.efounder.JEnterprise.domain.safetyWarning.AlarmRealtimeData;
import com.zc.efounder.JEnterprise.mapper.safetyWarning.AlarmRealtimeDataMapper;
import com.zc.efounder.JEnterprise.service.safetyWarning.IAlarmRealtimeDataService;
import com.zc.efounder.JEnterprise.domain.safetyWarning.AlarmNotificationRecord;
import com.zc.efounder.JEnterprise.domain.safetyWarning.AlarmTactics;
import com.zc.efounder.JEnterprise.mapper.safetyWarning.AlarmNotificationRecordMapper;
import com.zc.efounder.JEnterprise.mapper.safetyWarning.AlarmTacticsMapper;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.common.constant.WebSocketEvent;
import com.zc.common.core.model.DataReception;
import com.zc.common.core.websocket.WebSocketService;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.map.HashedMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * 告警实时数据Service业务层处理
 *
 * @author qindehua
 * @date 2022-11-04
 */
@Service
public class AlarmRealtimeDataServiceImpl implements IAlarmRealtimeDataService {
    //实时报警数据
    private AlarmRealtimeDataMapper alarmRealtimeDataMapper = ApplicationContextProvider.getBean(AlarmRealtimeDataMapper.class);
    //历史报警数据
    private AlarmHistoricalDataMapper alarmHistoricalDataMapper = ApplicationContextProvider.getBean(AlarmHistoricalDataMapper.class);
    //redis
    private RedisCache redisCache = ApplicationContextProvider.getBean(RedisCache.class);

    private static final Logger log = LoggerFactory.getLogger(AlarmHandler.class);
    //告警策略
    private AlarmNotificationRecordMapper notificationRecordMapper = ApplicationContextProvider.getBean(AlarmNotificationRecordMapper.class);
    //发送邮件
    private EmailServer emailServer = ApplicationContextProvider.getBean(EmailServer.class);
    //发送短信
    private SmsServer smsServer = ApplicationContextProvider.getBean(SmsServer.class);
    //告警策略
    private AlarmTacticsMapper alarmTacticsMapper = ApplicationContextProvider.getBean(AlarmTacticsMapper.class);

    /**
     * 查询告警实时数据
     *
     * @param id 告警实时数据主键
     * @return 告警实时数据
     */
    @Override
    public AlarmRealtimeData selectAlarmRealtimeDataById(Long id) {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataById(id);
    }

    /**
     * 查询告警实时数据列表
     *
     * @param alarmRealtimeData 告警实时数据
     * @return 告警实时数据
     */
    @Override
    public List<AlarmRealtimeData> selectAlarmRealtimeDataList(AlarmRealtimeData alarmRealtimeData) {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataList(alarmRealtimeData);
    }

    @Override
    public Integer selectAlarmCount() {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataCount();
    }

    @Override
    public AjaxResult selectAlarmInfo(String level) {
        if (StringUtils.isEmpty(level)){
            return AjaxResult.error("参数为空！");
        }
        return AjaxResult.success(alarmRealtimeDataMapper.selectAlarmRealtimeDataInfo(level));
    }


    /**
     * 批量删除告警实时数据
     *
     * @param ids 需要删除的告警实时数据主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteAlarmRealtimeDataByIds(Long[] ids) {
        if (StringUtils.isEmpty(ids)){
            return AjaxResult.error("告警ID不能为空！");
        }
        //删除数据
        alarmRealtimeDataMapper.deleteAlarmRealtimeDataByIds(ids);
        //推送前端实时条数
        Map<String, Object> msgMap = new HashedMap();
        DataReception dataReception = getNoRecoverCount();//查询报警的条数
        msgMap.put("alarmRealtimeCount", dataReception.getData());
        // 推送消息到web客户端
        WebSocketService.broadcast(WebSocketEvent.ALARM, msgMap);
        return AjaxResult.success("删除成功！");
    }

    /**
     * 处理报警实时数据
     *
     * @param alarmRealtimeDatas 报警实时数据
     * @return {@code AjaxResult }
     * @Author qindehua
     **/
    @Override
    @Transactional(rollbackFor = Exception.class)
    public AjaxResult updateAlarmRealtimeData(List<AlarmRealtimeData> alarmRealtimeDatas) {
        List<AlarmHistoricalData> list = new ArrayList<>();
        List<Long> ids = new ArrayList<>();
        /*if (CollectionUtils.isEmpty(alarmRealtimeDatas)){
            return AjaxResult.error("参数为空！");
        }
        for (AlarmRealtimeData alarmRealtimeData : alarmRealtimeDatas) {

            AlarmHistoricalData data = new AlarmHistoricalData();
            data.setCreateTime(DateUtils.getNowDate());
            if (alarmRealtimeData.getAlarmTacticsId() != null) {
                data.setAlarmTacticsId(alarmRealtimeData.getAlarmTacticsId());
            }
            data.setAlarmTypeId(alarmRealtimeData.getAlarmTypeId());
            data.setAlarmTime(alarmRealtimeData.getLastTime());
            data.setDescription(alarmRealtimeData.getPromptMsg());
            data.setAlarmValue(Double.parseDouble(alarmRealtimeData.getAlarmValue()));
            list.add(data);
            if(alarmRealtimeData.getId()!=null){
                ids.add(alarmRealtimeData.getId());
            }
        }
        //先删除报警实时数据
        alarmRealtimeDataMapper.deleteAlarmRealtimeDataByIds(ids.toArray(new Long[ids.size()]));
        //再新增历史数据表
        alarmHistoricalDataMapper.insertAlarmHistoricalDataBatch(list);
        //完成操作后 循环进行通知
        for (AlarmRealtimeData alarmRealtimeData : alarmRealtimeDatas) {
            //告警策略Id 不为空 进行以下操作
            if (null != alarmRealtimeData.getAlarmTacticsId()) {

                String context = strMessage(alarmRealtimeData.getAlarmName(), alarmRealtimeData.getPromptMsg()
                        , alarmRealtimeData.getAlarmValue(), alarmRealtimeData.getPlanVal());
                AlarmTactics alarmTactics = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_SafetyWarning_AlarmTactics, alarmRealtimeData.getAlarmTacticsId());

                if (alarmTactics == null) {
                    AlarmTactics dataMapper = alarmTacticsMapper.selectAlarmTacticsById(alarmRealtimeData.getAlarmTacticsId());
                    if (dataMapper == null) {
                        continue;
                    } else {
                        redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_SafetyWarning_AlarmTactics, dataMapper.getAlarmTypeId(), dataMapper);
                        alarmTactics = dataMapper;
                    }
                }
                //判断是否发送消息通知  0：否  1：是  通知类型  为0：全部 或者  2：告警解除
                if (1 == alarmTactics.getIsSendInform() && (0 == alarmTactics.getInformType() || 2 == alarmTactics.getInformType())) {
                    //告警播报  0：否  1：是
                    if (1 == alarmTactics.getAlarmSound()) {
                        //查询出来该报警策略关联了那些告警接收人
                        List<AlarmNotifier> alarmNotifiers = alarmTacticsMapper.selectAlarmNotifierByAlarmTacticsId(alarmTactics.getId());
                        for (AlarmNotifier alarmNotifier : alarmNotifiers) {
                            List<String> tokens=getTokenList(alarmNotifier.getPost());
                            for (String token : tokens) {
                                // 推送消息到web客户端
                                WebSocketService.postEvent(token,WebSocketEvent.ALARMMSG, context);
                            }
                        }
//                        // 推送消息到web客户端
//                        WebSocketService.broadcast(WebSocketEvent.ALARMMSG, context);
                    }
                    //发送邮件  0：否  1：是
                    if (1 == alarmTactics.getSendEmail()) {

                        //查询出来该报警策略关联了那些告警接收人
                        List<AlarmNotifier> alarmNotifiers = alarmTacticsMapper.selectAlarmNotifierByAlarmTacticsId(alarmTactics.getId());
                        //循环发送邮件
                        for (AlarmNotifier alarmNotifier : alarmNotifiers) {
                            //业务id暂定
                            SmsParam smsParam = new SmsParam(alarmNotifier.getEmail(), context, "", alarmRealtimeData.getAlarmName());
                            //发送邮件
                            try {
                                emailServer.sendMessage(smsParam);
                                //添加通知记录
                                AlarmNotificationRecord alarmNotificationRecord = new AlarmNotificationRecord(alarmTactics.getId(), 1L, DateUtils.getNowDate(), 1L, context, alarmTactics.getName());
                                alarmNotificationRecord.setCreateTime(DateUtils.getNowDate());
                                notificationRecordMapper.insertAlarmNotificationRecord(alarmNotificationRecord);
                            } catch (Exception e) {
                                log.error("发送邮件失败！");
                                //添加通知记录
                                AlarmNotificationRecord alarmNotificationRecord = new AlarmNotificationRecord(alarmTactics.getId(), 1L, DateUtils.getNowDate(), 0L, context, alarmTactics.getName());
                                alarmNotificationRecord.setCreateTime(DateUtils.getNowDate());
                                notificationRecordMapper.insertAlarmNotificationRecord(alarmNotificationRecord);
                            }
                        }
                    }
                    //发送短信  0：否  1：是
                    if (1 == alarmTactics.getTextSb()) {

                        //查询出来该报警策略关联了那些告警接收人
                        List<AlarmNotifier> alarmNotifiers = alarmTacticsMapper.selectAlarmNotifierByAlarmTacticsId(alarmTactics.getId());
                        //循环发送邮件
                        for (AlarmNotifier alarmNotifier : alarmNotifiers) {
                            //业务id暂定
                            SmsParam smsParam = new SmsParam(alarmNotifier.getEmail(), context, "", alarmRealtimeData.getAlarmName());
                            //发送邮件
                            try {
                                smsServer.send(smsParam);
                                //添加通知记录
                                AlarmNotificationRecord alarmNotificationRecord = new AlarmNotificationRecord(alarmTactics.getId(), 2L, DateUtils.getNowDate(), 1L, context, alarmTactics.getName());
                                alarmNotificationRecord.setCreateTime(DateUtils.getNowDate());
                                notificationRecordMapper.insertAlarmNotificationRecord(alarmNotificationRecord);
                            } catch (Exception e) {
                                log.error("发送短信失败！");
                                AlarmNotificationRecord alarmNotificationRecord = new AlarmNotificationRecord(alarmTactics.getId(), 2L, DateUtils.getNowDate(), 0L, context, alarmTactics.getName());
                                alarmNotificationRecord.setCreateTime(DateUtils.getNowDate());
                                notificationRecordMapper.insertAlarmNotificationRecord(alarmNotificationRecord);
                            }
                        }
                    }
                }
            }
        }
*/
        //推送前端实时条数
        Map<String, Object> msgMap = new HashedMap();
        DataReception dataReception = getNoRecoverCount();//查询报警的条数
        msgMap.put("alarmRealtimeCount", dataReception.getData());
        // 推送消息到web客户端
        WebSocketService.broadcast(WebSocketEvent.ALARM, msgMap);
        return AjaxResult.success("处理成功！");
    }

    /**
     * 查询报警条数
     *
     * @return {@code DataReception }
     * @Author qindehua
     * @Date 2022/11/04
     **/
    public DataReception getNoRecoverCount() {
        try {
            Integer count = alarmRealtimeDataMapper.selectAlarmRealtimeDataCount();
            return new DataReception(true, count);
        } catch (Exception e) {
            return new DataReception(false);
        }
    }

    private String strMessage(String name, String msg, String val, String planVal) {
        String str = "报警名称:" + name + ",报警描述:" + msg + ",报警值:" + val + ",计划值:" + planVal + ",该报警已手动处理！";
        return str;
    }

    /**
     * 获得token列表
     *
     * @return {@code List<String> }
     * @Author qindehua
     * @Date 2023/01/13
     **/
    private List<String> getTokenList(String post) {
        Collection<String> keys = redisCache.keys(Constants.LOGIN_TOKEN_KEY + "*");
        List<String> list=new ArrayList<>();
        for (String key : keys) {
            LoginUser loginUser = redisCache.getCacheObject(key);
            String[] array = post.split(",");
            for (String str : array) {
                SysUser sysUser = loginUser.getUser();
                if (sysUser.getPostIds().contains(Long.parseLong(str))) {
                    list.add(loginUser.getToken());
                }
            }
        }
        return list;
    }


}

package com.ruoyi.systemSetting.parameterConfiguration.service.Impl;

import java.util.*;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.energyCollection.acquisitionParam.domain.ElectricParams;
import com.ruoyi.systemSetting.parameterConfiguration.domain.ParameterConfiguration;
import com.ruoyi.systemSetting.parameterConfiguration.domain.ParamsConfiguration;
import com.ruoyi.systemSetting.parameterConfiguration.mapper.ParameterConfigurationMapper;
import com.ruoyi.systemSetting.parameterConfiguration.service.ParameterConfigurationService;
import com.zc.common.constant.PointPowerParam;
import com.zc.common.constant.RedisKeyConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import static com.ruoyi.common.utils.SecurityUtils.getUsername;

/**
 * 主采集参数Service业务层处理
 *
 * @author ruoyi
 * @date 2022-11-30
 */
@Service
public class ParameterConfigurationServiceImpl implements ParameterConfigurationService {
    @Autowired
    private ParameterConfigurationMapper parameterConfigurationMapper;

    @Resource
    private RedisCache redisCache;

    /**
     * 查询主采集参数
     *
     * @param id 主采集参数主键
     * @return 主采集参数
     */
    @Override
    public ParameterConfiguration selectAthenaBesParamsById(Long id) {
        return parameterConfigurationMapper.selectAthenaBesParamsById(id);
    }

    /**
     * 查询主采集参数列表
     *
     * @param parameterConfiguration 主采集参数
     * @return 主采集参数
     */
    @Override
    public List<ParameterConfiguration> selectAthenaBesParamsList(ParameterConfiguration parameterConfiguration) {
        return parameterConfigurationMapper.selectAthenaBesParamsList(parameterConfiguration);
    }

    /**
     * 新增主采集参数
     *
     * @param parameterConfiguration 主采集参数
     * @return 结果
     */
    @Override
    public AjaxResult insertAthenaBesParams(ParameterConfiguration parameterConfiguration) {
        parameterConfiguration.setCreateBy(getUsername());
        parameterConfiguration.setCreateTime(DateUtils.getNowDate());
        boolean isAdd = parameterConfigurationMapper.insertAthenaBesParams(parameterConfiguration);
        if (isAdd) {
            return AjaxResult.success("添加成功");
        } else {
            return AjaxResult.error("添加失败");
        }
    }

    /**
     * 修改主采集参数
     *
     * @param parameterConfiguration 主采集参数
     * @return 结果
     */
    @Override
    public AjaxResult updateAthenaBesParams(ParameterConfiguration parameterConfiguration) {
        parameterConfiguration.setUpdateBy(getUsername());
        parameterConfiguration.setUpdateTime(DateUtils.getNowDate());
        boolean isUpdate = parameterConfigurationMapper.updateAthenaBesParams(parameterConfiguration);
        if (isUpdate) {
            return AjaxResult.success("添加成功");
        } else {
            return AjaxResult.error("添加失败");
        }
    }

    /**
     * 批量删除主采集参数
     *
     * @param ids 需要删除的主采集参数主键
     * @return 结果
     */
    @Override
    public int deleteAthenaBesParamsByIds(Long[] ids) {
        return parameterConfigurationMapper.deleteAthenaBesParamsByIds(ids);
    }

    /**
     * 删除主采集参数信息
     *
     * @param id 主采集参数主键
     * @return 结果
     */
    @Override
    public int deleteAthenaBesParamsById(Long id) {
        return parameterConfigurationMapper.deleteAthenaBesParamsById(id);
    }

    /*
    查询选择采集参数列表
    */
    @Override
    public List<ElectricParams> listCheckList(ParamsConfiguration paramsConfiguration) {
        List<ElectricParams> returnList = new ArrayList<>();
        //查询关联表
        List<ParamsConfiguration> checkList = parameterConfigurationMapper.listCheckList(paramsConfiguration);

        if (checkList.size() > 0) {
            for (int i = 0; i < checkList.size(); i++) {
                ElectricParams electricParams = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams, checkList.get(i).getParamsId());
                if (paramsConfiguration.getKeywords() != null && !"".equals(paramsConfiguration.getKeywords()) ){
                    if(electricParams.getName().equals(paramsConfiguration.getKeywords())){
                        returnList.add(electricParams);
                    }
                }else{
                    returnList.add(electricParams);
                }
            }
        }


        return returnList;
    }

    /*
    查询未选择采集参数列表
    */
    @Override
    public List<ElectricParams> listNoCheckList(ParamsConfiguration paramsConfiguration) {
        List<ElectricParams> returnList = new ArrayList<>();
        //获取缓存
        Collection<Object> values = redisCache.getCacheMap(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams).values();

        for (Object val : values) {
            ElectricParams e = (ElectricParams) val;
            //电能参数跳过
            if(e.getCode().equals(PointPowerParam.Point_Meter_Code)){
                continue;
            }
            if (paramsConfiguration.getKeywords() != null && !"".equals(paramsConfiguration.getKeywords())) {
                if (e.getName().equals(paramsConfiguration.getKeywords())) {
                    returnList.add(e);
                }
            } else {
                returnList.add(e);
            }
        }

        //查询关联表
        List<ParamsConfiguration> checkList = parameterConfigurationMapper.listCheckList(paramsConfiguration);
        if (checkList.size() > 0 && returnList.size() > 0) {
            for (ParamsConfiguration p : checkList) {
                Iterator<ElectricParams> iterator = returnList.iterator();
                while (iterator.hasNext()) {
                    ElectricParams item = iterator.next();
                    if (item.getId().equals(p.getParamsId())) {
                        iterator.remove();
                    }
                }
            }
        }
        return returnList;

    }

    /*
    全部选择采集参数
    */
    @Override
    public AjaxResult allCheckList(ParamsConfiguration paramsConfiguration) {
        //删除全部配置
        parameterConfigurationMapper.delAllConfig(paramsConfiguration);
        //全部添加
        Collection<Object> values = redisCache.getCacheMap(RedisKeyConstants.BES_BasicData_EnergyCollection_ElectricParams).values();

        for (Object val : values) {
            ElectricParams e = (ElectricParams) val;
            paramsConfiguration.setParamsId(e.getId());
            paramsConfiguration.setCreateBy(getUsername());
            paramsConfiguration.setCreateTime(DateUtils.getNowDate());
            boolean isAdd = parameterConfigurationMapper.insertConfig(paramsConfiguration);
            if (!isAdd) {
                return AjaxResult.error("全选失败");
            }
        }
        return AjaxResult.success("全选成功");
    }

    /*
    全部取消采集参数
    */
    @Override
    public AjaxResult allNoCheckList(ParamsConfiguration paramsConfiguration) {
        boolean isDel = parameterConfigurationMapper.delAllConfig(paramsConfiguration);
        if (isDel) {
            return AjaxResult.success("全部取消成功");
        } else {
            return AjaxResult.error("全部取消失败");
        }
    }

    /*
     添加一条采集参数
    */
    @Override
    public AjaxResult insertParamConfigRlgl(ParamsConfiguration paramsConfiguration) {
        paramsConfiguration.setCreateBy(getUsername());
        paramsConfiguration.setCreateTime(DateUtils.getNowDate());
        boolean isAdd = parameterConfigurationMapper.insertConfig(paramsConfiguration);
        if (!isAdd) {
            return AjaxResult.error("添加失败");
        } else {
            return AjaxResult.success("添加成功");
        }
    }

    /*
     删除一条采集参数
    */
    @Override
    public AjaxResult delParamConfigRlgl(ParamsConfiguration paramsConfiguration) {
        boolean isDel = parameterConfigurationMapper.delParamConfig(paramsConfiguration);
        if (isDel) {
            return AjaxResult.success("取消成功");
        } else {
            return AjaxResult.error("取消失败");
        }
    }
}

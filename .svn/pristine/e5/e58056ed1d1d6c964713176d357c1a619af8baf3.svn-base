package com.zc.efounder.JEnterprise.commhandler;

import com.google.auto.service.AutoService;
import com.ruoyi.common.core.redis.RedisCache;
import com.zc.ApplicationContextProvider;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.common.constant.WebSocketEvent;
import com.zc.common.core.rabbitMQ.MessagingService;
import com.zc.common.core.websocket.WebSocketService;
import com.zc.connect.business.bo.ChannelTypeState;
import com.zc.connect.business.dto.ReceiveMsg;
import com.zc.connect.business.handler.ModbusMsgReceive;
import com.zc.efounder.JEnterprise.domain.baseData.Equipment;
import com.zc.efounder.JEnterprise.domain.deviceTree.Controller;
import com.zc.efounder.JEnterprise.domain.deviceTree.DeviceTree;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @Author: wanghongjie
 * @Description:
 * @Date: Created in 11:19 2023/2/22
 * @Modified By:
 */
@AutoService(ModbusMsgReceive.class)
public class ModbusClientEventCallback implements ModbusMsgReceive {

    // 客户端状态存储
    public static final Map<String, ChannelTypeState> stateStore = new HashMap<>();

    private MessagingService messagingService = ApplicationContextProvider.getBean(MessagingService.class);

    //redis
    private RedisCache redisCache = ApplicationContextProvider.getBean(RedisCache.class);

    private static final Logger log = LoggerFactory.getLogger(ModbusClientEventCallback.class);

    //上线离线处理
    @Override
    public void controllerState(String ip, int post, Boolean state) {

        if (!StringUtils.hasText(ip)) {
            log.warn("ip 地址不存在");
            return;
        }

        ChannelTypeState channelTypeState = stateStore.get(ip);

        if (null == channelTypeState) {
            channelTypeState = new ChannelTypeState();
        }

        try {

            Map<String, Equipment> controllerList  = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment);

            if (controllerList == null || controllerList.size() == 0) {
                return;
            }
            controllerList.values().forEach(val -> {
                //获取ip
                String deviceIp = val.getIpAddress();
                //获取端口
                String devicePost = val.getPortNum();

                if (ip.equals(deviceIp) && String.valueOf(post).equals(devicePost)) {
                    String deviceState = val.getState();
                    //获取当前ip状态
                    if (!state && deviceState.equals("1")) {//"0"离线  "1" 在线
                        val.setState("0");
                    }


                    if (state && deviceState.equals("0")) {//
                        val.setState("1");

                    }
                    redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Equipment, val.getId(), val);
                }


            });

            ReceiveMsg<List<Equipment>> msg = new ReceiveMsg();
            msg.setIp(ip);
            msg.setPost(String.valueOf(post));
            msg.setCode(0);

            // 0：离线；1：在线
            Integer onlineStatus = 0;

            channelTypeState.setState(state);

            if (state) {
                onlineStatus = 1;
                msg.setCode(1);
            }

            // 推送消息到web客户端
            WebSocketService.broadcast(WebSocketEvent.MODBUS_SERVER, msg);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *
     * @Description: rabbitMQ消息订阅
     *
     * @auther: wanghongjie
     * @date: 17:52 2023/3/9
     * @param: [s]
     * @return: void
     *
     */
    @Override
    public void sendRegistrationMessage(String s) throws Exception {
//        messagingService.sendRegistrationMessage(s);
        messagingService.sendMsg(s);
    }
}

package com.ruoyi.energyInfo.branchConfig.controller;

import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.domain.entity.AthenaBranchConfig;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.energyInfo.branchConfig.domain.vo.MeterDataVo;
import com.ruoyi.energyInfo.branchConfig.service.AthenaBranchConfigService;
import com.ruoyi.energyInfo.branchConfig.service.impl.AthenaBranchMeterLinkServiceImpl;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * 支路拓扑配置Controller
 */
@RestController
@Api(value = "支路拓扑配置", tags = {"支路拓扑配置"})
@RequestMapping("/branchConfig/config")
public class AthenaBranchConfigController extends BaseController {
    @Autowired
    private AthenaBranchConfigService athenaBranchConfigService;
    @Autowired
    private AthenaBranchMeterLinkServiceImpl athenaBranchMeterLinkService;

    /**
     * 查询支路拓扑配置列表
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:list')")
    @ApiOperation("查询支路拓扑配置列表")
    @GetMapping("/list")
    public TableDataInfo list(AthenaBranchConfig athenaBranchConfig,
                              //搜索按钮标识 0:节点查询 1:搜索按钮查询
                              String code) {
        startPage();
        List<AthenaBranchConfig> list = athenaBranchConfigService.selectAthenaBranchConfigListSun(athenaBranchConfig, code);
        return getDataTable(list);
    }


    /**
     * 获取支路拓扑配置下拉树列表
     */
    @GetMapping("/treeSelect")
    @ApiOperation("获取支路拓扑配置下拉树列表")
    @PreAuthorize("@ss.hasPermi('branchConfig:config:list')")
    public AjaxResult treeSelect(AthenaBranchConfig athenaBranchConfig) {
        List<AthenaBranchConfig> list = athenaBranchConfigService.selectAthenaBranchConfigList(athenaBranchConfig);
        return AjaxResult.success(athenaBranchConfigService.buildTreeSelect(list));
    }

//    /**
//     * 导出支路拓扑配置列表
//     */
//    @PreAuthorize("@ss.hasPermi('branchConfig:config:export')")
//    @ApiOperation("导出支路拓扑配置列表")
//    @Log(title = "支路拓扑配置", businessType = BusinessType.EXPORT)
//    @PostMapping("/export")
//    public void export(HttpServletResponse response, AthenaBranchConfig athenaBranchConfig)
//    {
//        List<AthenaBranchConfig> list = athenaBranchConfigService.selectAthenaBranchConfigList(athenaBranchConfig);
//        ExcelUtil<AthenaBranchConfig> util = new ExcelUtil<>(AthenaBranchConfig.class);
//        util.exportExcel(response, list, "支路拓扑配置数据");
//    }

    /**
     * 获取支路拓扑配置详细信息
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:query')")
    @ApiOperation("获取支路拓扑配置详细信息")
    @GetMapping(value = "/{branchId}")
    public AjaxResult getInfo(@PathVariable("branchId") Long branchId) {
        return AjaxResult.success(athenaBranchConfigService.selectAthenaBranchConfigByBranchId(branchId));
    }


    /**
     * 新增支路拓扑配置
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:add')")
    @ApiOperation("新增支路拓扑配置")
    @Log(title = "支路拓扑配置", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@Validated @RequestBody AthenaBranchConfig athenaBranchConfig) {
        return athenaBranchConfigService.insertAthenaBranchConfig(athenaBranchConfig);
    }

    /**
     * 修改支路拓扑配置
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:edit')")
    @ApiOperation("修改支路拓扑配置")
    @Log(title = "支路拓扑配置", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@Validated @RequestBody AthenaBranchConfig athenaBranchConfig) {
        return athenaBranchConfigService.updateAthenaBranchConfig(athenaBranchConfig);
    }

    /**
     * 删除时 查看是否关联分户及分项
     */
    @GetMapping("/getMessage/{branchIds}")
    @ApiOperation("删除时 查看是否关联分户及分项")
    @PreAuthorize("@ss.hasPermi('branchConfig:config:remove')")
    public AjaxResult treeSelect(@PathVariable Long[] branchIds) {
        return athenaBranchConfigService.getMessage(branchIds);
    }

    /**
     * 删除支路拓扑配置
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:remove')")
    @ApiOperation("删除支路拓扑配置")
    @Log(title = "支路拓扑配置", businessType = BusinessType.DELETE)
    @DeleteMapping("/{branchIds}")
    public AjaxResult remove(@PathVariable Long[] branchIds) {
        return athenaBranchConfigService.deleteAthenaBranchConfigByBranchIds(branchIds);
    }


    /**
     * 包含电表 保存操作
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:edit')")
    @ApiOperation("包含电表 保存操作")
    @Log(title = "包含电表操作", businessType = BusinessType.UPDATE)
    @PutMapping("/meter")
    public AjaxResult meter(@RequestBody MeterDataVo meterDataVo) {
        if (athenaBranchConfigService.saveAthenaBranchConfigMeter(meterDataVo)) {
            return AjaxResult.success("包含电表成功!");
        } else {
            return AjaxResult.error("包含电表失败！");
        }
    }


    /**
     * 查询当前支路下电表列表
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:list')")
    @ApiOperation("查询当前支路下电表列表")
    @GetMapping("/meterList")
    public AjaxResult meterList(@RequestParam("branchId") Long branchId, @RequestParam("energyCode") String energyCode) {
        return AjaxResult.success(athenaBranchMeterLinkService.selectAthenaBranchMeterLinkList(branchId, energyCode));
    }

    /**
     * 查询所有建筑列表
     */
    @ApiOperation("查询所有建筑列表")
    @GetMapping("/buildingList")
    public AjaxResult buildingList(@RequestParam("parkCode") String parkCode) {
        return AjaxResult.success(athenaBranchConfigService.selectBuildingList(parkCode));
    }

    /**
     * 根据能源，园区查询支路列表
     */
    @PreAuthorize("@ss.hasPermi('branchConfig:config:list')")
    @ApiOperation("查询支路列表")
    @GetMapping("/branchList")
    public AjaxResult branchList(AthenaBranchConfig athenaBranchConfig) {
        return AjaxResult.success(athenaBranchConfigService.selectAthenaBranchConfigList(athenaBranchConfig));
    }

    /**
     * @description:获取所有支路数据
     * @author: sunshangeng
     * @date: 2022/11/14 15:55
     * @param: [athenaBranchConfig]
     * @return: com.ruoyi.common.core.domain.AjaxResult
     **/
    @ApiOperation("查询支路所有数据")
    @GetMapping("/selectBranchTreeList")
    public AjaxResult selectBranchTreeList() {
        return athenaBranchConfigService.SelectBranchTreeList();
    }

}

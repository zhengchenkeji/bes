package com.zc.connect.nettyServer.ChildChannelHandler.EnergyHandler;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.group.ChannelGroup;
import io.netty.channel.group.DefaultChannelGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.handler.codec.LineBasedFrameDecoder;
import io.netty.handler.codec.MessageToByteEncoder;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.codec.string.StringEncoder;
import io.netty.handler.timeout.IdleStateHandler;
import io.netty.util.CharsetUtil;
import io.netty.util.concurrent.GlobalEventExecutor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;

/**
 * @auther YangChao
 * @description
 * @date 2021/11/18/018
 * @apiNote
 */
public class ChildChannelHandler_Energy extends ChannelInitializer<SocketChannel> {
    private static final Logger log = LoggerFactory.getLogger(ChildChannelHandler_Energy.class);

    /**
     * 用于记录和管理所有客户端的Channel
     * */
    private static ChannelGroup clients = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);

    @Override
    protected void initChannel(SocketChannel ch) throws Exception {
        log.info("能源handler");
        //检测连接有效性（心跳）,此处功能：5秒内read()未被调用则触发一次useEventTrigger()方法
        ch.pipeline().addLast(new IdleStateHandler(15, 0, 0, TimeUnit.SECONDS));
        // 解码器 LineBasedFrameDecoder，使用换行符\n或者\r\n作为依据，遇到\n或者\r\n都认为是一条完整的消息。
        ch.pipeline().addLast(new LineBasedFrameDecoder(Integer.MAX_VALUE));
        // 编码器LineBasedFrameEncoder，自动对每条消息末端添加换行符
        ch.pipeline().addLast(new LineBasedFrameEncoder("\n"));
        // 解码器 StringDecoder，将字符串自动转成utf8编码
        ch.pipeline().addLast(new StringDecoder(CharsetUtil.UTF_8));
        // 编码器 StringEncoder，将字符串自动转成utf8编码
        ch.pipeline().addLast(new StringEncoder(CharsetUtil.UTF_8));
        //ServerHandler实现了业务逻辑
        ch.pipeline().addLast(new ServerHandler_Energy());
    }

    /**
     * 自定义解码器
     * @author xiepufeng
     */
    public class LineBasedFrameEncoder extends MessageToByteEncoder<ByteBuf>
    {

        // 分隔符
        private String separator;

        public LineBasedFrameEncoder(String separator)
        {
            if (null == separator || separator.isEmpty())
            {
                separator = "\n";
            }

            this.separator = separator;
        }

        public LineBasedFrameEncoder(Class<? extends ByteBuf> outboundMessageType, String separator)
        {
            super(outboundMessageType);
            this.separator = separator;
        }


        @Override
        protected void encode(ChannelHandlerContext ctx, ByteBuf msg, ByteBuf out) throws Exception
        {
            msg.writeBytes(Unpooled.copiedBuffer(separator, Charset.forName("utf-8")));
            out.writeBytes(msg);
        }
    }

}

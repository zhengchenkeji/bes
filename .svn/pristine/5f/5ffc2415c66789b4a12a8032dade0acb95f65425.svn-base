package com.ruoyi.safetyWarning.alarmRealtime.service.impl;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.safetyWarning.alarmHistoricalData.domain.AlarmHistoricalData;
import com.ruoyi.safetyWarning.alarmHistoricalData.mapper.AlarmHistoricalDataMapper;
import com.ruoyi.safetyWarning.alarmRealtime.domain.AlarmRealtimeData;
import com.ruoyi.safetyWarning.alarmRealtime.mapper.AlarmRealtimeDataMapper;
import com.ruoyi.safetyWarning.alarmRealtime.service.IAlarmRealtimeDataService;
import com.zc.common.constant.WebSocketEvent;
import com.zc.common.core.model.DataReception;
import com.zc.common.core.websocket.WebSocketService;
import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 告警实时数据Service业务层处理
 *
 * @author qindehua
 * @date 2022-11-04
 */
@Service
public class AlarmRealtimeDataServiceImpl implements IAlarmRealtimeDataService {
    //实时报警数据
    @Autowired
    private AlarmRealtimeDataMapper alarmRealtimeDataMapper;
    //历史报警数据
    @Autowired
    private AlarmHistoricalDataMapper alarmHistoricalDataMapper;

    /**
     * 查询告警实时数据
     *
     * @param id 告警实时数据主键
     * @return 告警实时数据
     */
    @Override
    public AlarmRealtimeData selectAlarmRealtimeDataById(Long id) {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataById(id);
    }

    /**
     * 查询告警实时数据列表
     *
     * @param alarmRealtimeData 告警实时数据
     * @return 告警实时数据
     */
    @Override
    public List<AlarmRealtimeData> selectAlarmRealtimeDataList(AlarmRealtimeData alarmRealtimeData) {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataList(alarmRealtimeData);
    }

    @Override
    public Integer selectAlarmCount() {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataCount();
    }

    @Override
    public List<AlarmRealtimeData> selectAlarmInfo(String level) {
        return alarmRealtimeDataMapper.selectAlarmRealtimeDataInfo(level);
    }


    /**
     * 批量删除告警实时数据
     *
     * @param ids 需要删除的告警实时数据主键
     * @return 结果
     */
    @Override
    public boolean deleteAlarmRealtimeDataByIds(Long[] ids) {
        //删除数据
         alarmRealtimeDataMapper.deleteAlarmRealtimeDataByIds(ids);
        //推送前端实时条数
        Map<String, Object> msgMap = new HashedMap();
        DataReception dataReception = getNoRecoverCount();//查询报警的条数
        msgMap.put("alarmRealtimeCount", dataReception.getData());
        // 推送消息到web客户端
        WebSocketService.broadcast(WebSocketEvent.ALARM, msgMap);
        return true;
    }

    /**
     * 处理报警实时数据
     *
     * @param alarmRealtimeDatas 报警实时数据
     * @return {@code AjaxResult }
     * @Author qindehua
     **/
    @Override
    @Transactional(rollbackFor = Exception.class)
    public AjaxResult updateAlarmRealtimeData(List<AlarmRealtimeData> alarmRealtimeDatas) {
        List<AlarmHistoricalData> list=new ArrayList<>();
        List<Long> ids=new ArrayList<>();
        for (AlarmRealtimeData alarmRealtimeData : alarmRealtimeDatas) {

            AlarmHistoricalData data=new AlarmHistoricalData();
            data.setCreateTime(DateUtils.getNowDate());
            if (alarmRealtimeData.getAlarmTacticsId()!=null){
                data.setAlarmTacticsId(alarmRealtimeData.getAlarmTacticsId());
            }
            data.setAlarmTypeId(alarmRealtimeData.getAlarmTypeId());
            data.setAlarmTime(alarmRealtimeData.getLastTime());
            data.setDescription(alarmRealtimeData.getPromptMsg());
            data.setAlarmValue(Double.parseDouble(alarmRealtimeData.getAlarmValue()));
            list.add(data);
            ids.add(alarmRealtimeData.getId());
        }
        //先删除报警实时数据
        alarmRealtimeDataMapper.deleteAlarmRealtimeDataByIds(ids.toArray(new Long[ids.size()]));
        //再新增历史数据表
        alarmHistoricalDataMapper.insertAlarmHistoricalDataBatch(list);
        //推送前端实时条数
        Map<String, Object> msgMap = new HashedMap();
        DataReception dataReception = getNoRecoverCount();//查询报警的条数
        msgMap.put("alarmRealtimeCount", dataReception.getData());
        // 推送消息到web客户端
        WebSocketService.broadcast(WebSocketEvent.ALARM, msgMap);
        return AjaxResult.success("处理成功！");
    }
    /**
     * 查询报警条数
     *
     * @return {@code DataReception }
     * @Author qindehua
     * @Date 2022/11/04
     **/
    public DataReception getNoRecoverCount() {
        try {
            Integer count = alarmRealtimeDataMapper.selectAlarmRealtimeDataCount();
            return new DataReception(true, count);
        } catch (Exception e) {
            return new DataReception(false);
        }
    }
}

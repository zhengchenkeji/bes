package com.ruoyi.energyDataReport.buildGroupInfo.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.energyDataReport.buildGroupInfo.domain.BuildGroupInfo;
import com.ruoyi.energyDataReport.buildGroupInfo.service.BuildGroupInfoService;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.common.core.page.TableDataInfo;

/**
 * 建筑群信息Controller
 *
 * @author ruoyi
 * @date 2022-09-13
 */
@RestController
@RequestMapping("/basicData/buildGroupInfo")
public class BuildGroupInfoController extends BaseController
{
    @Autowired
    private BuildGroupInfoService buildGroupInfoService;

    /**
     * 查询建筑群信息列表
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildGroupInfo:list')")
    @GetMapping("/list")
    public TableDataInfo list(BuildGroupInfo buildGroupInfo)
    {
        startPage();
        List<BuildGroupInfo> list = buildGroupInfoService.selectBuildGroupInfoList(buildGroupInfo);
        return getDataTable(list);
    }

    /**
     * 导出建筑群信息列表
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildGroupInfo:export')")
    @Log(title = "建筑群信息", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, BuildGroupInfo buildGroupInfo)
    {
        List<BuildGroupInfo> list = buildGroupInfoService.selectBuildGroupInfoList(buildGroupInfo);
        ExcelUtil<BuildGroupInfo> util = new ExcelUtil<>(BuildGroupInfo.class);
        util.exportExcel(response, list, "建筑群信息数据");
    }

    /**
     * 获取建筑群信息详细信息
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildGroupInfo:query')")
    @GetMapping(value = "/{id}")
    public AjaxResult getInfo(@PathVariable("id") Long id)
    {
        return AjaxResult.success(buildGroupInfoService.selectBuildGroupInfoById(id));
    }

    /**
     * 新增建筑群信息
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildGroupInfo:add')")
    @Log(title = "建筑群信息", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody BuildGroupInfo buildGroupInfo)
    {
        return buildGroupInfoService.insertBuildGroupInfo(buildGroupInfo);
    }

    /**
     * 修改建筑群信息
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildGroupInfo:edit')")
    @Log(title = "建筑群信息", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody BuildGroupInfo buildGroupInfo)
    {
        return toAjax(buildGroupInfoService.updateBuildGroupInfo(buildGroupInfo));
    }

    /**
     * 删除建筑群信息
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildGroupInfo:remove')")
    @Log(title = "建筑群信息", businessType = BusinessType.DELETE)
	@DeleteMapping("/{ids}")
    public AjaxResult remove(@PathVariable Long[] ids)
    {
        return toAjax(buildGroupInfoService.deleteBuildGroupInfoByIds(ids));
    }
}

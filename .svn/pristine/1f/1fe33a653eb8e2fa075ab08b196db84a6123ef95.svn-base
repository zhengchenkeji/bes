package com.zc.efounder.JEnterprise.service.baseData.impl;

import java.util.List;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.efounder.JEnterprise.domain.baseData.Agreement;
import com.zc.efounder.JEnterprise.mapper.baseData.AgreementMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.ruoyi.system.service.AgreementService;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

/**
 * 设备协议Service业务层处理
 *
 * @author sunshangeng
 * @date 2023-03-14
 */
@Service
public class AgreementServiceImpl implements AgreementService
{
    @Resource
    private AgreementMapper agreementMapper;

    @Resource
    private RedisCache redisCache;
    /**
     * 查询设备协议
     *
     * @param id 设备协议主键
     * @return 设备协议
     */

    /**
     * @description:初始化缓存
     * @author: sunshangeng
     * @date: 2023/3/14 15:04
     * @param: []
     * @return: void
     **/
    @PostConstruct
    public void init(){
        /**清除缓存*/
        redisCache.deleteObject(RedisKeyConstants.BES_BasicData_Agreement);
        /**存储缓存*/
        List<Agreement> agreements = agreementMapper.selectAgreementList(null);
        agreements.forEach(item->{
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Agreement,item.getId(),item);
        });
    }

    @Override
    public Agreement selectAgreementById(Long id)
    {
        return agreementMapper.selectAgreementById(id);
    }

    /**
     * 查询设备协议列表
     *
     * @param agreement 设备协议
     * @return 设备协议
     */
    @Override
    public List<Agreement> selectAgreementList(Agreement agreement)
    {
        return agreementMapper.selectAgreementList(agreement);
    }

    /**
     * 新增设备协议
     *
     * @param agreement 设备协议
     * @return 结果
     */
    @Override
    @Transactional
    public AjaxResult insertAgreement(Agreement agreement)
    {
        agreement.setCreateTime(DateUtils.getNowDate());
        Boolean save = agreementMapper.insertAgreement(agreement);
        /**处理缓存*/
        if(save){
         redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Agreement,agreement.getId(),agreement);
        }
        return  AjaxResult.success();

    }

    /**
     * 修改设备协议
     *
     * @param agreement 设备协议
     * @return 结果
     */
    @Override
    public AjaxResult updateAgreement(Agreement agreement)
    {
        agreement.setUpdateTime(DateUtils.getNowDate());
        Boolean update = agreementMapper.updateAgreement(agreement);
        /**处理缓存*/
        if(update){
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_Agreement,agreement.getId(),agreement);
        }
        return  AjaxResult.success();
    }

    /**
     * 批量删除设备协议
     *
     * @param ids 需要删除的设备协议主键
     * @return 结果
     */
    @Override
    @Transactional
    public AjaxResult deleteAgreementByIds(Long[] ids)
    {
        int delnum = agreementMapper.deleteAgreementByIds(ids);
        /**处理缓存*/
        if(delnum>0){
            for (Long id : ids) {
                redisCache.delCacheMapValue(RedisKeyConstants.BES_BasicData_Agreement,id);
            }
        }
        return AjaxResult.success();
    }

    /**
     * 删除设备协议信息
     *
     * @param id 设备协议主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteAgreementById(Long id)
    {
     return  deleteAgreementByIds(new Long[]{id});
    }
}

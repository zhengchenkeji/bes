<template>
  <div>
    <div ref="page" :style="topNav?'max-height: 84.5vh;overflow-y: auto;height: 89vh;':'max-height: 86.5vh;overflow-y: auto;height: 89vh;'">
      <div ref="container" class="bg">
        <div class="canvas-container" ref="content"
             @wheel="onWheel" @mousedown="onMouseDown" @mousemove="onMousemove" @mouseup="onMouseup" @mouseleave="onMouseleave"
             :style="{transform: `scale(${scale}) translate(${translate.x}px, ${translate.y}px)`,position: 'absolute'}">
          <!--transformOrigin: '10% 20%',  ,left:offsetX + 'px', top: offsetY + 'px'-->
          <div
            class="canvas"
            :style="{
                    ...getCanvasStyle(canvasStyleData),

                    width: changeStyleWithScale(canvasStyleData.width) + 'px',
                    height: changeStyleWithScale(canvasStyleData.height) + 'px',
                }"
          >
            <ComponentWrapper
              v-for="(item, index) in copyData"
              :key="index"
              :config="item"
            />
          </div>

<!--          <div style="position:absolute; ">-->

<!--            <el-button @click="back">返回</el-button>-->
<!--            <el-button @click="screenfullDiv">全屏</el-button>-->
<!--          </div>-->
        </div>
      </div>
      <suspension-ball @back="goBackHomePage" @screenfullDiv="screenfullDiv" @refreshPage="refreshPage"></suspension-ball>
    </div>
  </div>

</template>

<script>
  import screenfull from "screenfull";
  import {getStyle, getCanvasStyle} from '@/utils/designer/style'
  import {mapState} from 'vuex'
  import ComponentWrapper from '@/components/designer/Editor/ComponentWrapper'
  import {changeStyleWithScale} from '@/utils/designer/translate'
  import {toPng} from 'html-to-image'
  import {deepCopy} from '@/utils/designer/utils'
  import {seleteDesignerAreaPage} from "@/api/designerConfigure/designer";
  import {setDefaultcomponentData} from "@/store/designer/snapshot";
  import pubsub from "@/store/modules/PubSub";

  import suspensionBall from "@/views/designerConfigure/views/suspensionBall";

  export default {
    components: {ComponentWrapper,suspensionBall},
    name: "index",
    props: {
      areaId:{
        type: String,
        default: "",
      },
      pageId:{
        type: String,
        default: "",
      },
      isScreenshot: {
        type: Boolean,
        default: false,
      },
    },
    data() {
      return {
        // topNav: this.$store.state.settings.topNav,
        copyData: [],
        // areaId: "1",//区域id
        // pageId:"1",//页面id
        form: {},
        scale: 1,
        offsetX: 0,
        offsetY: 0,
        isDragging: false,
        startX: 0,
        startY: 0,
        lastX: 0,
        lastY: 0,
        translate: {
          x: 0,
          y: 0
        },
        moveStart: {},
      }
    },
    computed: {
      ...mapState([
                 'componentData',
                 'canvasStyleData',
                 'ToViewPage'
               ]),
      topNav: {
        get() {
          return this.$store.state.settings.topNav
        }
      },
    },
    created() {
      // this.areaId = this.$route.query && this.$route.query.areaId;
      // this.pageId = this.$route.query && this.$route.query.pageId;
      // this.form.id = parseInt(this.pageId);
      // this.form.areaId = parseInt(this.areaId);
      // this.getAreaDesignerPage(this.form);
    },

    watch: {
      pageId: function (newVal, oldVal) {

      }
    },

    beforeDestroy() {
      this.$store.commit('setToViewPage', false)
      // if (!this.ToViewPage) {
      //   pubsub.remove(null,'VtextWebsocket')
      //   pubsub.remove(null,'VLightWebsocket')
      // }
      pubsub.remove(null,'VtextWebsocket')
      pubsub.remove(null,'VLightWebsocket')
      // pubsub.remove(null,'VtextWebsocket')
    },
    methods: {
      getStyle,
      getCanvasStyle,

      changeStyleWithScale,

      //获取当前区域的设计器页面
      getAreaDesignerPage(form) {
        this.$store.commit('setToViewPage', true)
        let that = this;
        seleteDesignerAreaPage(form).then(response => {
          if (response.code == 200) {
            let canvasData = JSON.parse(response.data[0].canvasData);
            let canvasStyle = JSON.parse(response.data[0].canvasStyle);

            setDefaultcomponentData(canvasData);
            that.$store.commit('setComponentData', canvasData);
            that.$store.commit('setCanvasStyle', canvasStyle);

            this.$set(that, 'copyData', deepCopy(this.componentData))

            //解析canvasData数据,判断如果是第三方协议,那就走定时器,5秒一发请求实时数据

          }
        })
      },
      back() {
        this.$emit('back');
      },
      screenfullDiv() {
        if (screenfull.isEnabled) {
          screenfull.toggle(this.$refs.page);
        }
      },
      goBackHomePage() {
        this.$emit('back');
      },
      onWheel(event) {
        const { deltaX, deltaY } = event;
        const scaleDelta = 0.05;
        const newScale = deltaY > 0 ? this.scale - scaleDelta : this.scale + scaleDelta;
        this.scale = Math.max(newScale, 0.1);
      },
      onMouseDown(event) {

        if (event.button === 0 ) {
          event.preventDefault();
          this.isDragging = true;
          // this.startX = this.lastX = event.pageX;
          // this.startY = this.lastY = event.pageY;

          this.moveStart.x = event.clientX
          this.moveStart.y = event.clientY

        }
      },
      onMousemove(event) {

        event.preventDefault();   //阻止默认行为，防止拖动文字有BUG
        if (this.isDragging) {
          // const deltaX = event.pageX - this.lastX;
          // const deltaY = event.pageY - this.lastY;
          // this.offsetX += deltaX;
          // this.offsetY += deltaY;
          // this.lastX = event.pageX;
          // this.lastY = event.pageY;

          this.translate.x += (event.clientX - this.moveStart.x) / this.scale
          this.translate.y += (event.clientY - this.moveStart.y) / this.scale
          this.moveStart.x = event.clientX
          this.moveStart.y = event.clientY
        }
      },
      onMouseup(event) {
        if (this.isDragging && event.button === 0) {
          event.preventDefault();
          this.isDragging = false;
        }
      },
      onMouseleave() {
        if (this.isDragging) {
          this.isDragging = false;
        }
      },
      refreshPage() {

      }
    },
  }
</script>


<style lang="scss" scoped>
  .bg {
    /*width: 100%;*/
    /*height: 100%;*/
    /*top: 0;*/
    /*left: 0;*/
    /*position: fixed;*/
    /*background: rgb(0, 0, 0, .5);*/
    display: flex;
    /*align-items: center;*/
    /*justify-content: center;*/
    /*overflow: auto;*/
    /*padding: 20px;*/
    z-index: -11111;

    .canvas-container {
      width: calc(100% - 40px);
      height: calc(100% - 120px);
      /*overflow: auto;*/

      .canvas {
        background: #fff;
        position: relative;
        margin: auto;
      }
    }

    .close {
      position: absolute;
      right: 20px;
      top: 20px;
    }
  }
</style>

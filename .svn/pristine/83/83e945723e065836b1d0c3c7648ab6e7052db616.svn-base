package com.ruoyi.energyDataReport.buildBaseInfo.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;

import com.ruoyi.energyDataReport.buildGroupInfo.domain.BuildGroupInfo;
import com.ruoyi.energyDataReport.dataCenterBaseInfo.domain.DataCenterBaseInfo;
import com.ruoyi.energyInfo.parkInfo.domain.Park;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.energyDataReport.buildBaseInfo.domain.BuildBaseInfo;
import com.ruoyi.energyDataReport.buildBaseInfo.service.BuildBaseInfoService;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.common.core.page.TableDataInfo;

/**
 * 建筑基本项数据Controller
 *
 * @author ruoyi
 * @date 2022-09-14
 */
@RestController
@RequestMapping("/basicData/buildBaseInfo")
public class BuildBaseInfoController extends BaseController
{
    @Autowired
    private BuildBaseInfoService buildBaseInfoService;

    /**
     * 查询建筑基本项数据列表
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildBaseInfo:list')")
    @GetMapping("/list")
    public TableDataInfo list(BuildBaseInfo buildBaseInfo)
    {
        startPage();
        List<BuildBaseInfo> list = buildBaseInfoService.selectBuildBaseInfoList(buildBaseInfo);
        return getDataTable(list);
    }

    /**
     * 导出建筑基本项数据列表
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildBaseInfo:export')")
    @Log(title = "建筑基本项数据", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, BuildBaseInfo buildBaseInfo)
    {
        List<BuildBaseInfo> list = buildBaseInfoService.selectBuildBaseInfoList(buildBaseInfo);
        ExcelUtil<BuildBaseInfo> util = new ExcelUtil<>(BuildBaseInfo.class);
        util.exportExcel(response, list, "建筑基本项数据");
    }

    /**
     * 获取建筑基本项数据详细信息
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildBaseInfo:query')")
    @GetMapping(value = "/{id}")
    public AjaxResult getInfo(@PathVariable("id") Long id)
    {
        return AjaxResult.success(buildBaseInfoService.selectBuildBaseInfoById(id));
    }

    /**
     * 新增建筑基本项数据
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildBaseInfo:add')")
    @Log(title = "建筑基本项数据", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody BuildBaseInfo buildBaseInfo)
    {
        buildBaseInfo.setCreateUser(getUsername());
        return toAjax(buildBaseInfoService.insertBuildBaseInfo(buildBaseInfo));
    }

    /**
     * 修改建筑基本项数据
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildBaseInfo:edit')")
    @Log(title = "建筑基本项数据", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody BuildBaseInfo buildBaseInfo)
    {
        return toAjax(buildBaseInfoService.updateBuildBaseInfo(buildBaseInfo));
    }

    /**
     * 删除建筑基本项数据
     */
    @PreAuthorize("@ss.hasPermi('basicData:buildBaseInfo:remove')")
    @Log(title = "建筑基本项数据", businessType = BusinessType.DELETE)
	@DeleteMapping("/{ids}")
    public AjaxResult remove(@PathVariable Long[] ids)
    {
        return toAjax(buildBaseInfoService.deleteBuildBaseInfoByIds(ids));
    }

    /**
     * 查询所有数据中心
     */
    @GetMapping("/getAllDataCenterBaseInfo")
    public List<DataCenterBaseInfo> getAllDataCenterBaseInfo(){
        return buildBaseInfoService.getAllDataCenterBaseInfo();
    }

    /**
     * 查询所有建筑群
     */
    @GetMapping("/getAllBuildGroup")
    public List<BuildGroupInfo> getAllBuildGroup(){
        return buildBaseInfoService.getAllBuildGroup();
    }

    /**
     * 查询所有园区
     */
    @GetMapping("/getAllPark")
    public List<Park> getAllPark(){
        return buildBaseInfoService.getAllPark();
    }
}

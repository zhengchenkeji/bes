<template>
  <div class="white-body-view">
    <div class="fromHeader">
      <!--  ************************************************************虚点详情************************************** -->
      <el-form :inline="true" ref="queryForm" :model="queryForm" label-width="160px" :rules="rules"
               v-if="nodeTypeValue==deviceTreeSettings.Vpoint && !addPoint">
        <el-form-item label="系统名称" prop="sysName" style="width: 400px">
          <el-input v-model="queryForm.sysName" placeholder="请输入系统名称" disabled style="width: 202px"/>
        </el-form-item>
        <el-form-item label="别名" prop="nickName" style="width: 400px">
          <el-input v-model="queryForm.nickName"
                    maxlength="24" show-word-limit
                    placeholder="请输入别名" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="虚点类型" prop="vpointType" style="width: 400px">
          <el-select v-model="queryForm.vpointType" style="width: 202px">
            <el-option
              v-for="item in vNodeTypeList"
              :key="item.id"
              :label="item.value"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="单位" prop="engineerUnit" style="width: 400px"
                      v-if="queryForm.vpointType == '0' || queryForm.vpointType == '1'">
          <el-input v-model="queryForm.engineerUnit" placeholder="请输入工程单位" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="精度" prop="accuracy" style="width: 400px"
                      v-if="queryForm.vpointType == '0' || queryForm.vpointType == '1'">
          <el-select v-model="queryForm.accuracy" style="width: 202px">
            <el-option
              v-for="item in accuracyList"
              :key="item.id"
              :label="item.value"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="初始值" prop="initVal" style="width: 400px">
          <el-input v-model="queryForm.initVal" placeholder="请输入初始值" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="描述"
                      prop="description" style="width: 400px">
          <el-input v-model="queryForm.description"
                    maxlength="12" show-word-limit

                    placeholder="请输入描述" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="能源类型" prop="energyCode" style="width: 400px"
                      v-if="queryForm.vpointType == '0' ">
          <el-select v-model="queryForm.energyCode" style="width: 202px">
            <el-option
              v-for="item in energyList"
              :key="item.code"
              :label="item.name"
              :value="item.code">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="使能状态" prop="enabled" style="width: 400px">
          <el-switch v-model="queryForm.enabled" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949"/>
        </el-form-item>
        <el-form-item label="报警使能" prop="alarmEnable" style="width: 400px">
          <el-switch v-model="queryForm.alarmEnable" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949" @change="alarmEnableChange($event,'info')"/>
        </el-form-item>
        <el-form-item label="优先级" prop="alarmPriority" style="width: 500px">
          <el-radio-group v-model="queryForm.alarmPriority" :disabled="queryForm.alarmEnable == 0" style="width: 300px">
            <el-radio :label="0">一般</el-radio>
            <el-radio :label="1">较大</el-radio>
            <el-radio :label="2">重大</el-radio>
          </el-radio-group>
        </el-form-item>
        <br/>
        <el-form-item label="能耗采集" prop="energyStatics" style="width: 400px"
                      v-if="queryForm.vpointType == '0' ">
          <el-switch v-model="queryForm.energyStatics" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949"/>
        </el-form-item>
        <el-form-item label="闭合状态" prop="closeState"
                      v-if="queryForm.vpointType == '2' || queryForm.vpointType == '3'"
                      style="width: 400px">
          <el-radio-group v-model="queryForm.closeState" :disabled="queryForm.alarmEnable == 0"
                          style="width: 202px">
            <el-radio :label="0">闭合</el-radio>
            <el-radio :label="1">断开</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="是否故障" prop="faultState"
                      v-if="queryForm.vpointType == '2' || queryForm.vpointType == '3'"
                      style="width: 400px">
          <el-switch v-model="queryForm.faultState" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949" :disabled="queryForm.alarmEnable == 0"/>
        </el-form-item>
        <el-form-item label="是否同步" prop="syncState" style="width: 400px">
          <el-switch v-model="queryForm.syncState" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949" disabled/>
        </el-form-item>
      </el-form>
      <el-form :inline="true" label-width="80px" style="text-align: center"
               v-if="nodeTypeValue==deviceTreeSettings.Vpoint && !addPoint">
        <el-form-item>
          <el-button
            v-hasPermi="['basicData:deviceTree:point:selectEditPointValue']"
            type="primary" @click="editPointValue()"
            v-if="queryForm.vpointType == '0' || queryForm.vpointType == '2'">点值配置
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            v-hasPermi="['basicData:deviceTree:point:debugPointInfo']"
            type="primary" @click="editDebugger()"
            v-if="queryForm.vpointType == '1' || queryForm.vpointType == '3'">调试
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            type="primary"
            v-hasPermi="['basicData:deviceTree:vpoint:sync']"
            @click="synchronizeData(nodeTypeValue)">同步数据
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            type="primary"
            v-hasPermi="['basicData:deviceTree:moodule:contrast']"
            @click="dataComparison(nodeTypeValue)">数据对比
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            type="primary"
            v-hasPermi="['basicData:deviceTree:point:updatePoint']"
            @click="updateForm" :disabled="saveBoolean">保存
          </el-button>
        </el-form-item>
      </el-form>

      <!--  ************************************************************模块点详情************************************** -->
      <el-form :inline="true" ref="queryFormDO" :model="queryFormDO" label-width="160px" :rules="rulesPoint"
               v-if="pointArr.indexOf(this.nodeTypeValue)>-1 && !UIUX ">
        <el-form-item label="系统名称" prop="sysName" style="width: 400px">
          <el-input v-model="queryFormDO.sysName"
                    maxlength="24" show-word-limit
                    placeholder="请输入系统名称" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="别名"
                      prop="nickName" style="width: 400px">
          <el-input v-model="queryFormDO.nickName"
                    maxlength="24" show-word-limit
                    placeholder="请输入别名" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="类型" prop="DOType" style="width: 400px">
          <el-input v-model="queryFormDO.DOType" placeholder="请输入类型" disabled style="width: 202px"/>
        </el-form-item>
        <el-form-item label="初始值" prop="initVal"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.DO"
                      style="width: 400px">
          <el-input v-model="queryFormDO.initVal" placeholder="请输入初始值" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="描述" prop="description" style="width: 400px">
          <el-input v-model="queryFormDO.description"
                    maxlength="12" show-word-limit
                    placeholder="请输入描述" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="单位" prop="engineerUnit"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-input v-model="queryFormDO.engineerUnit" placeholder="请输入单位" style="width: 202px"/>
        </el-form-item>
        <el-form-item label="最小值" prop="minVal"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-input v-model="queryFormDO.minVal" placeholder="请输入最小值" style="width: 202px"/>
          <!--@blur="checknum('valInfo')"-->
        </el-form-item>
        <el-form-item label="最大值" prop="maxVal"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-input v-model="queryFormDO.maxVal" placeholder="请输入最大值" style="width: 202px"/>
          <!--@blur="checknum('valInfo')"-->
        </el-form-item>
        <el-form-item label="精度" prop="accuracy"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-select v-model="queryFormDO.accuracy" style="width: 202px">
            <el-option
              v-for="item in accuracyList"
              :key="item.id"
              :label="item.value"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="信号类型" prop="sinnalType"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-select v-model="queryFormDO.sinnalType" style="width: 202px">
            <el-option
              v-for="item in sinnalTypeList"
              :key="item.id"
              :label="item.value"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="低限报警" prop="lowLimit" @blur="checknum('limitInfo')"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-input v-model="queryFormDO.lowLimit" placeholder="" style="width: 202px"
                    :disabled="queryFormDO.alarmEnable == 0"/>
        </el-form-item>
        <el-form-item label="高限报警" prop="highLimit" @blur="checknum('limitInfo')"
                      v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-input v-model="queryFormDO.highLimit" placeholder="" style="width: 202px"
                    :disabled="queryFormDO.alarmEnable == 0"/>
        </el-form-item>
        <el-form-item label="能源类型" prop="energyCode"
                      v-if="nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-select v-model="queryFormDO.energyCode" style="width: 202px">
            <el-option
              v-for="item in energyList"
              :key="item.code"
              :label="item.name"
              :value="item.code">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="能耗采集" prop="energyStatics"
                      v-if="nodeTypeValue == deviceTreeSettings.AI"
                      style="width: 400px">
          <el-switch v-model="queryFormDO.energyStatics" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949"/>
        </el-form-item>
        <el-form-item label="使能状态" prop="enabled" style="width: 400px">
          <el-switch v-model="queryFormDO.enabled" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949"/>
        </el-form-item>
        <el-form-item label="是否反向" prop="reversed" style="width: 400px">
          <el-radio-group v-model="queryFormDO.reversed" style="width: 202px">
            <el-radio :label="0">正向</el-radio>
            <el-radio :label="1">反向</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="工作模式" prop="workMode" style="width: 400px">
          <el-radio-group v-model="queryFormDO.workMode" style="width: 202px">
            <el-radio :label="0">自动</el-radio>
            <el-radio :label="1">手动</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="是否有源" prop="sourced" v-if="nodeTypeValue == deviceTreeSettings.DI" style="width: 400px">
          <el-switch v-model="queryFormDO.sourced" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949"/>
        </el-form-item>
        <el-form-item label="报警使能" prop="alarmEnable" style="width: 400px">
          <el-switch v-model="queryFormDO.alarmEnable" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949" @change="alarmEnableChange($event,'info')"/>
        </el-form-item>
        <el-form-item label="闭合状态" prop="closeState"
                      v-if="nodeTypeValue == deviceTreeSettings.DO || nodeTypeValue == deviceTreeSettings.DI"
                      style="width: 400px">
          <el-radio-group v-model="queryFormDO.closeState" :disabled="queryFormDO.alarmEnable == 0"
                          style="width: 202px">
            <el-radio :label="0">闭合</el-radio>
            <el-radio :label="1">断开</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="优先级" prop="alarmPriority" style="width: 500px">
          <el-radio-group v-model="queryFormDO.alarmPriority" :disabled="queryFormDO.alarmEnable == 0"
                          style="width: 300px">
            <el-radio :label="0">一般</el-radio>
            <el-radio :label="1">较大</el-radio>
            <el-radio :label="2">重大</el-radio>
          </el-radio-group>
        </el-form-item>
        <br/>
        <el-form-item label="是否故障" prop="faultState"
                      v-if="nodeTypeValue==deviceTreeSettings.DO || nodeTypeValue==deviceTreeSettings.DI"
                      style="width: 400px">
          <el-switch v-model="queryFormDO.faultState" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949" :disabled="queryFormDO.alarmEnable == 0"/>
        </el-form-item>

        <el-form-item label="是否同步" prop="syncState" style="width: 400px">
          <el-switch v-model="queryFormDO.syncState" :active-value="1" :inactive-value="0" active-color="#13ce66"
                     inactive-color="#ff4949" disabled/>
        </el-form-item>
      </el-form>
      <el-form :inline="true" label-width="80px" style="text-align: center"
               v-if="pointArr.indexOf(this.nodeTypeValue)>-1 && !UIUX ">
        <el-form-item>
          <el-button
            v-hasPermi="['basicData:deviceTree:point:selectEditPointValue']"
            type="primary" @click="editPointValue()"
            v-if="nodeTypeValue==deviceTreeSettings.AI || nodeTypeValue==deviceTreeSettings.DI">点值配置
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            type="primary"
            v-hasPermi="['basicData:deviceTree:point:sync']"
            @click="synchronizeData(nodeTypeValue)">同步数据
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            v-hasPermi="['basicData:deviceTree:module:contrast']"
            type="primary"
            @click="dataComparison(nodeTypeValue)">数据对比
          </el-button>
        </el-form-item>
        <el-form-item>
          <el-button
            v-hasPermi="['basicData:deviceTree:point:updatePoint']"
            type="primary"
            @click="updateFormPoint"
            :disabled="saveBooleanDO">保存
          </el-button>
        </el-form-item>
      </el-form>

    </div>


    <!--  ************************************************************新增虚点************************************** -->
    <el-drawer
      v-if="nodeTypeValue==deviceTreeSettings.Vpoint"
      size='35%'
      title="新增虚点"
      :visible.sync="visible"
      :before-close="handleClose"
      direction="rtl"
    >
      <div style="margin-left: 15px; margin-right: 15px">
        <div style="margin-bottom: 15px;">
          <!-- 选择下拉框和搜索 -->
          <el-row :span="10" :xs="24">
            <el-col>
              <el-form :inline="true" ref="form" :model="form" label-width="90px" :rules="rules">
                <el-form-item label="系统名称" prop="sysName" style="width: 300px">
                  <el-input v-model="form.sysName" maxlength="24" show-word-limit placeholder="请输入系统名称"
                            style="width: 202px"/>
                </el-form-item>

                <el-form-item label="别名" prop="nickName" style="width: 300px">
                  <el-input v-model="form.nickName"
                            maxlength="24" show-word-limit
                            placeholder="请输入别名" style="width: 202px"/>
                </el-form-item>

                <el-form-item label="虚点类型" prop="vpointType" style="width: 300px">
                  <el-select v-model="form.vpointType" style="width: 202px">
                    <el-option
                      v-for="item in vNodeTypeList"
                      :key="item.id"
                      :label="item.value"
                      :value="item.id">
                    </el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="单位" prop="engineerUnit" style="width: 300px"
                              v-if="form.vpointType == '0' || form.vpointType == '1'">
                  <el-input v-model="form.engineerUnit" placeholder="请输入工程单位" style="width: 202px"/>
                </el-form-item>

                <el-form-item label="精度" prop="accuracy" style="width: 300px"
                              v-if="form.vpointType == '0' || form.vpointType == '1'">
                  <el-select v-model="form.accuracy" style="width: 202px">
                    <el-option
                      v-for="item in accuracyList"
                      :key="item.id"
                      :label="item.value"
                      :value="item.id">
                    </el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="初始值" prop="initVal" style="width: 300px">
                  <el-input v-model="form.initVal" maxlength="11" show-word-limit placeholder="请输入初始值"
                            style="width: 202px"/>
                </el-form-item>

                <el-form-item label="描述" prop="description" style="width: 300px">
                  <el-input v-model="form.description" maxlength="12" show-word-limit placeholder="请输入描述"
                            style="width: 202px"/>
                </el-form-item>

                <el-form-item label="能源类型" prop="energyCode" style="width: 300px" v-if="form.vpointType == '0'">
                  <el-select v-model="form.energyCode" style="width: 202px">
                    <el-option
                      v-for="item in energyList"
                      :key="item.code"
                      :label="item.name"
                      :value="item.code">
                    </el-option>
                  </el-select>
                </el-form-item>

                <el-form-item label="使能状态" prop="enabled" style="width: 300px">
                  <el-switch v-model="form.enabled" :active-value="1" :inactive-value="0" active-color="#13ce66"
                             inactive-color="#ff4949" @change="alarmEnableChange($event,'add')"/>
                </el-form-item>

                <el-form-item label="报警使能" prop="alarmEnable" style="width: 300px">
                  <el-switch v-model="form.alarmEnable" :active-value="1" :inactive-value="0" active-color="#13ce66"
                             inactive-color="#ff4949" @change="changeSwitch"/>
                </el-form-item>
                <!--<el-form-item label="报警类型" prop="alarmType">
                  <el-radio-group v-model="form.alarmType">
                    <el-radio :label="0">不报警</el-radio>
                    <el-radio :label="1">标准报警</el-radio>
                    <el-radio :label="2">增强报警</el-radio>
                  </el-radio-group>
                </el-form-item>
                <br/>-->
                <el-form-item label="闭合状态" prop="closeState"
                              v-if="form.vpointType == '2' || form.vpointType == '3'"
                              style="width: 300px">
                  <el-radio-group v-model="form.closeState" :disabled="form.alarmEnable == 0"
                                  style="width: 202px">
                    <el-radio :label="0">闭合</el-radio>
                    <el-radio :label="1">断开</el-radio>
                  </el-radio-group>
                </el-form-item>
                <el-form-item label="优先级" prop="alarmPriority">
                  <el-radio-group v-model="form.alarmPriority" :disabled="form.alarmEnable == 0" style="width: 300px">
                    <el-radio :label="0">一般</el-radio>
                    <el-radio :label="1">较大</el-radio>
                    <el-radio :label="2">重大</el-radio>
                  </el-radio-group>
                </el-form-item>
                <br/>
                <el-form-item label="能耗采集" prop="energyStatics" style="width: 300px" v-if="form.vpointType == '0'">
                  <el-switch v-model="form.energyStatics" :active-value="1" :inactive-value="0" active-color="#13ce66"
                             inactive-color="#ff4949"/>
                </el-form-item>

                <el-form-item label="故障状态" prop="faultState" v-if="form.vpointType == '2' || form.vpointType == '3'"
                              style="width: 300px">
                  <el-switch v-model="form.faultState" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949"
                             :disabled="form.alarmEnable == 0"/>
                </el-form-item>
                <el-form-item label="是否同步" prop="syncState" style="width: 300px">
                  <el-switch v-model="form.syncState" :active-value="1" :inactive-value="0" active-color="#13ce66"
                             inactive-color="#ff4949" disabled/>
                </el-form-item>
              </el-form>
              <el-form :inline="true" label-width="80px" style="text-align: center">
                <el-form-item>
                  <el-button
                    v-hasPermi="['basicData:deviceTree:point:updatePoint']"
                    type="primary" @keyup.enter="submitForm" @click="submitForm">新增
                  </el-button>
                </el-form-item>
              </el-form>
            </el-col>
          </el-row>
        </div>
      </div>
    </el-drawer>

    <!--  ************************************************************新增模块点************************************** -->
    <el-drawer
      v-if="pointArr.indexOf(this.nodeTypeValue)>-1"
      size='35%'
      title="新增模块点"
      :visible.sync="visible"
      :before-close="handleClose"
      direction="rtl"
    >
      <div style="margin-left: 15px; margin-right: 15px">
        <div style="margin-bottom: 15px;">
          <!-- 选择下拉框和搜索 -->
          <el-row :span="10" :xs="24">
            <el-col>
              <el-form :inline="true" ref="formModelPoint" :model="formModelPoint" label-width="90px"
                       :rules="rulesPoint"
                       v-if="pointArr.indexOf(this.nodeTypeValue)>-1">
                <el-form-item label="系统名称"
                              prop="sysName" style="width: 300px">
                  <el-input v-model="formModelPoint.sysName"
                            maxlength="24" show-word-limit
                            placeholder="请输入系统名称" style="width: 202px"/>
                </el-form-item>
                <el-form-item label="别名"
                              prop="nickName" style="width: 300px">
                  <el-input v-model="formModelPoint.nickName"
                            maxlength="24" show-word-limit
                            placeholder="请输入别名" style="width: 202px"/>
                </el-form-item>
                <el-form-item label="类型" prop="DOType"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.DOType" placeholder="请输入类型" disabled style="width: 202px"/>
                </el-form-item>
                <el-form-item label="初始值" prop="initVal"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.DO"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.initVal" placeholder="请输入初始值" style="width: 202px"/>
                </el-form-item>
                <el-form-item label="描述" prop="description" style="width: 300px">
                  <el-input v-model="formModelPoint.description" placeholder="请输入描述" style="width: 202px"/>
                </el-form-item>
                <el-form-item label="单位" prop="engineerUnit"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.engineerUnit" placeholder="请输入单位" style="width: 202px"/>
                </el-form-item>
                <el-form-item label="最小值" prop="minVal"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.minVal" placeholder="请输入最小值" @blur="checknum('valAdd')"
                            style="width: 202px"/>
                </el-form-item>
                <el-form-item label="最大值" prop="maxVal"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.maxVal" placeholder="请输入最大值" @blur="checknum('valAdd')"
                            style="width: 202px"/>
                </el-form-item>
                <el-form-item label="精度" prop="accuracy"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-select v-model="formModelPoint.accuracy" style="width: 202px">
                    <el-option
                      v-for="item in accuracyList"
                      :key="item.id"
                      :label="item.value"
                      :value="item.id">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item label="信号类型" prop="sinnalType"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-select v-model="formModelPoint.sinnalType" style="width: 202px">
                    <el-option
                      v-for="item in sinnalTypeList"
                      :key="item.id"
                      :label="item.value"
                      :value="item.id">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item label="低限报警" prop="lowLimit"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.lowLimit" placeholder="" @blur="checknum('limitAdd')"
                            style="width: 202px" :disabled="formModelPoint.alarmEnable == 0"/>
                </el-form-item>
                <el-form-item label="高限报警" prop="highLimit"
                              v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-input v-model="formModelPoint.highLimit" placeholder="" @blur="checknum('limitAdd')"
                            style="width: 202px" :disabled="formModelPoint.alarmEnable == 0"/>
                </el-form-item>
                <el-form-item label="能源类型" prop="energyCode"
                              v-if="nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-select v-model="formModelPoint.energyCode" style="width: 202px">
                    <el-option
                      v-for="item in energyList"
                      :key="item.code"
                      :label="item.name"
                      :value="item.code">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item label="能耗采集" prop="energyStatics"
                              v-if="nodeTypeValue == deviceTreeSettings.AI"
                              style="width: 300px">
                  <el-switch v-model="formModelPoint.energyStatics" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949"/>
                </el-form-item>
                <el-form-item label="使能状态" prop="enabled" style="width: 300px">
                  <el-switch v-model="formModelPoint.enabled" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949" @change="alarmEnableChange($event,'add')"/>
                </el-form-item>
                <el-form-item label="是否反向" prop="reversed" style="width: 300px">
                  <el-radio-group v-model="formModelPoint.reversed" style="width: 202px">
                    <el-radio :label="0">正向</el-radio>
                    <el-radio :label="1">反向</el-radio>
                  </el-radio-group>
                </el-form-item>
                <el-form-item label="工作模式" prop="workMode" style="width: 300px">
                  <el-radio-group v-model="formModelPoint.workMode" style="width: 202px">
                    <el-radio :label="0">自动</el-radio>
                    <el-radio :label="1">手动</el-radio>
                  </el-radio-group>
                </el-form-item>
                <el-form-item label="是否有源" prop="sourced" v-if="nodeTypeValue == deviceTreeSettings.DI"
                              style="width: 300px">
                  <el-switch v-model="formModelPoint.sourced" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949" @change="changeSwitch"/>
                </el-form-item>
                <el-form-item label="报警使能" prop="alarmEnable" style="width: 300px">
                  <el-switch v-model="formModelPoint.alarmEnable" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949" @change="changeSwitch"/>
                </el-form-item>
                <el-form-item label="闭合状态" prop="closeState"
                              v-if="nodeTypeValue == deviceTreeSettings.DO || nodeTypeValue == deviceTreeSettings.DI"
                              style="width: 300px">
                  <el-radio-group v-model="formModelPoint.closeState" :disabled="formModelPoint.alarmEnable == 0"
                                  style="width: 202px">
                    <el-radio :label="0">闭合</el-radio>
                    <el-radio :label="1">断开</el-radio>
                  </el-radio-group>
                </el-form-item>
                <!--<el-form-item label="报警类型" prop="alarmType" style="width: 500px">
                  <el-radio-group v-model="formModelPoint.alarmType">
                    <el-radio :label="0">不报警</el-radio>
                    <el-radio :label="1">标准报警</el-radio>
                    <el-radio :label="2">增强报警</el-radio>
                  </el-radio-group>
                </el-form-item>
                <br/>-->
                <el-form-item label="优先级" prop="alarmPriority" style="width: 500px">
                  <el-radio-group v-model="formModelPoint.alarmPriority" :disabled="formModelPoint.alarmEnable == 0"
                                  style="width: 300px">
                    <el-radio :label="0">一般</el-radio>
                    <el-radio :label="1">较大</el-radio>
                    <el-radio :label="2">重大</el-radio>
                  </el-radio-group>
                </el-form-item>
                <br/>
                <el-form-item label="故障状态" prop="faultState" v-if="deviceTreeSettings.DO" style="width: 300px">
                  <el-switch v-model="formModelPoint.faultState" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949"
                             :disabled="formModelPoint.alarmEnable == 0"/>
                </el-form-item>
                <el-form-item label="是否同步" prop="syncState" style="width: 300px">
                  <el-switch v-model="formModelPoint.syncState" :active-value="1" :inactive-value="0"
                             active-color="#13ce66" inactive-color="#ff4949" disabled/>
                </el-form-item>
              </el-form>
              <el-form :inline="true" label-width="80px" style="text-align: center">
                <el-form-item>
                  <el-button
                    v-hasPermi="['basicData:deviceTree:point:updatePoint']"
                    type="primary" @keyup.enter="submitFormModelPoint" @click="submitFormModelPoint">新增
                  </el-button>
                </el-form-item>
              </el-form>
            </el-col>
          </el-row>
        </div>
      </div>
    </el-drawer>


    <!--  ************************************************************数据对比************************************** -->
    <el-dialog title="数据对比" :visible.sync="visibleData" width="800px" append-to-body @close="clearParmas()">
      <div class="box">
        <el-row>
          <el-col :span="11" style="background-color: #ebf6fb;text-align: center">
            <el-button style="margin-bottom: 15px;margin-top: 10px">上位机数据</el-button>
            <el-form ref="upperFormData" :inline="true" :model="upperFormData" label-width="90px"
                     v-if="nodeTypeValue==deviceTreeSettings.Vpoint">
              <el-form-item label="ID" prop="equipmentId">
                <el-input v-model="upperFormData.equipmentId" readonly/>
              </el-form-item>
              <el-form-item label="系统名称" prop="sysName">
                <el-input v-model="upperFormData.sysName" readonly/>
              </el-form-item>
              <el-form-item label="别名" prop="nickName">
                <el-input v-model="upperFormData.nickName" readonly/>
              </el-form-item>
              <el-form-item label="虚点类型" prop="vpointType">
                <el-input v-model="upperFormData.vpointType" readonly/>
              </el-form-item>
              <el-form-item label="初始值" prop="initVal">
                <el-input v-model="upperFormData.initVal" readonly/>
              </el-form-item>
              <el-form-item label="描述" prop="description">
                <el-input v-model="upperFormData.description" readonly/>
              </el-form-item>
              <el-form-item label="使能状态" prop="enabled">
                <el-input v-model="upperFormData.enabled == 0 ? '否' : '是'" readonly/>
              </el-form-item>
            </el-form>

            <!-- *******************************上位机模块点数据对比***************************************************** -->
            <el-form ref="upperFormData" :inline="true" :model="upperFormData" label-width="90px"
                     v-if="pointArr.indexOf(this.nodeTypeValue)>-1">
              <el-form-item label="ID" prop="equipmentId">
                <el-input v-model="upperFormData.equipmentId" readonly/>
              </el-form-item>
              <el-form-item label="系统名称" prop="sysName">
                <el-input v-model="upperFormData.sysName" readonly/>
              </el-form-item>
              <el-form-item label="别名" prop="nickName">
                <el-input v-model="upperFormData.nickName" readonly/>
              </el-form-item>
              <el-form-item label="使能状态" prop="enabled">
                <el-input v-model="upperFormData.enabled == 0 ? '否' : '是'" readonly/>
              </el-form-item>
              <el-form-item label="是否反向" prop="reversed">
                <el-input v-model="upperFormData.reversed == 0 ? '正向' : '反向'" readonly/>
              </el-form-item>
              <el-form-item label="初始值" prop="initVal"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.DO"
              >
                <el-input v-model="upperFormData.initVal" readonly/>
              </el-form-item>
              <el-form-item label="描述" prop="description">
                <el-input v-model="upperFormData.description" readonly/>
              </el-form-item>
              <el-form-item label="工作模式" prop="workMode">
                <el-input v-model="upperFormData.workMode == 0 ? '自动' : '手动'" readonly/>
              </el-form-item>
              <el-form-item label="是否有源" prop="sourced" v-if="nodeTypeValue == deviceTreeSettings.DI">
                <el-input v-model="upperFormData.sourced == 0 ? '否' : '是'" readonly/>
              </el-form-item>
              <el-form-item label="单位" prop="engineerUnit"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.engineerUnit" readonly/>
              </el-form-item>
              <el-form-item label="最小值" prop="minVal"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.minVal" readonly/>
              </el-form-item>
              <el-form-item label="最大值" prop="maxVal"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.maxVal" readonly/>
              </el-form-item>
              <el-form-item label="精度" prop="accuracy"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.accuracy" readonly/>
              </el-form-item>
              <el-form-item label="信号类型" prop="sinnalType"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.sinnalType" readonly/>
              </el-form-item>
              <el-form-item label="报警使能" prop="alarmEnable">
                <el-input v-model="upperFormData.alarmEnable == 0 ? '否' : '是'" readonly/>
              </el-form-item>
              <br/>
              <el-form-item label="闭合状态" prop="closeState"
                            v-if="nodeTypeValue == deviceTreeSettings.DO || nodeTypeValue == deviceTreeSettings.DI"
              >
                <el-input v-model="upperFormData.closeState == 0 ? '断开' : '闭合'" readonly/>
              </el-form-item>
              <el-form-item label="低限报警" prop="lowLimit"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.lowLimit" readonly/>
              </el-form-item>
              <el-form-item label="高限报警" prop="highLimit"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI"
              >
                <el-input v-model="upperFormData.highLimit" readonly/>
              </el-form-item>
              <el-form-item label="优先级" prop="alarmPriority">
                <el-input v-model="upperFormData.alarmPriority1" readonly/>
              </el-form-item>
            </el-form>
          </el-col>
          <el-col :span="2" style="height: 1px"></el-col>
          <el-col :span="11" style="background-color: #ebf6fb;text-align: center">
            <el-button style="margin-bottom: 15px;margin-top: 10px">下位机数据</el-button>
            <!-- *******************************下位机虚点数据对比***************************************************** -->
            <el-form ref="underFormData" :inline="true" :model="underFormData" label-width="90px"
                     v-if="nodeTypeValue==deviceTreeSettings.Vpoint">
              <el-form-item label="ID" prop="id">
                <el-input v-model="underFormData.id" readonly class="error_input"
                          v-if="upperFormData.equipmentId != underFormData.id"/>
                <el-input v-model="underFormData.id" readonly v-else/>
              </el-form-item>
              <el-form-item label="系统名称" prop="name">
                <el-input v-model="underFormData.name" readonly class="error_input"
                          v-if="upperFormData.sysName != underFormData.name"/>
                <el-input v-model="underFormData.name" readonly v-else/>
              </el-form-item>
              <el-form-item label="别名" prop="alias">
                <el-input v-model="underFormData.alias" readonly class="error_input"
                          v-if="upperFormData.nickName != underFormData.alias"/>
                <el-input v-model="underFormData.alias" readonly v-else/>
              </el-form-item>
              <el-form-item label="虚点类型" prop="pointType">
                <el-input v-model="underFormData.pointType" readonly class="error_input"
                          v-if="upperFormData.vpointType != underFormData.pointType"/>
                <el-input v-model="underFormData.pointType" readonly v-else/>
              </el-form-item>
              <el-form-item label="初始值" prop="initValue">
                <el-input v-model="underFormData.initValue" readonly class="error_input"
                          v-if="upperFormData.initVal != underFormData.initValue"/>
                <el-input v-model="underFormData.initValue" readonly v-else/>
              </el-form-item>
              <el-form-item label="描述" prop="description">
                <el-input v-model="underFormData.description" readonly class="error_input"
                          v-if="upperFormData.description != underFormData.description"/>
                <el-input v-model="underFormData.description" readonly v-else/>
              </el-form-item>
              <el-form-item label="使能状态" prop="active">
                <el-input v-model="underFormData.active == 0 ? '否' : '是'" readonly class="error_input"
                          v-if="upperFormData.enabled != underFormData.active && underFormData.active != null"/>
                <el-input v-model="underFormData.active == 0 ? '否' : '是'" readonly
                          v-if="upperFormData.enabled == underFormData.active && underFormData.active != null"/>
                <el-input v-model="underFormData.active" readonly v-if="underFormData.active == null"/>
              </el-form-item>
            </el-form>

            <!-- *******************************下位机模块点数据对比***************************************************** -->
            <el-form ref="underFormData" :inline="true" :model="underFormData" label-width="90px"
                     v-if="pointArr.indexOf(this.nodeTypeValue)>-1">
              <el-form-item label="ID" prop="id">
                <el-input v-model="underFormData.id" readonly class="error_input"
                          v-if="upperFormData.equipmentId != underFormData.id"/>
                <el-input v-model="underFormData.id" readonly v-else/>
              </el-form-item>
              <el-form-item label="系统名称" prop="name">
                <el-input v-model="underFormData.name" readonly class="error_input"
                          v-if="upperFormData.sysName != underFormData.name"/>
                <el-input v-model="underFormData.name" readonly v-else/>
              </el-form-item>
              <el-form-item label="别名" prop="alias">
                <el-input v-model="underFormData.alias" readonly class="error_input"
                          v-if="upperFormData.nickName != underFormData.alias"/>
                <el-input v-model="underFormData.alias" readonly v-else/>
              </el-form-item>
              <el-form-item label="使能状态" prop="active">
                <el-input v-model="underFormData.active == 0 ? '否' : '是'" readonly class="error_input"
                          v-if="upperFormData.enabled != underFormData.active && underFormData.active != null"/>
                <el-input v-model="underFormData.active == 0 ? '否' : '是'" readonly
                          v-if="upperFormData.enabled == underFormData.active && underFormData.active != null"/>
                <el-input v-model="underFormData.active" readonly v-if="underFormData.active == null"/>
              </el-form-item>
              <el-form-item label="是否反向" prop="polarity">
                <el-input v-model="underFormData.polarity == 0 ? '正向' : '反向'" readonly class="error_input"
                          v-if="upperFormData.reversed != underFormData.polarity && underFormData.polarity != null"/>
                <el-input v-model="underFormData.polarity == 0 ? '正向' : '反向'" readonly
                          v-if="upperFormData.reversed == underFormData.polarity && underFormData.polarity != null"/>
                <el-input v-model="underFormData.polarity" readonly v-if="underFormData.polarity == null"/>
              </el-form-item>
              <el-form-item label="初始值" prop="initValue"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.DO">
                <el-input v-model="underFormData.initValue" readonly class="error_input"
                          v-if="upperFormData.initVal != underFormData.initValue"/>
                <el-input v-model="underFormData.initValue" readonly v-else/>
              </el-form-item>
              <el-form-item label="描述" prop="description">
                <el-input v-model="underFormData.description" readonly class="error_input"
                          v-if="upperFormData.description != underFormData.description"/>
                <el-input v-model="underFormData.description" readonly v-else/>
              </el-form-item>
              <el-form-item label="工作模式" prop="workMode">
                <el-input v-model="underFormData.workMode == 0 ? '自动' : '手动'" readonly class="error_input"
                          v-if="upperFormData.workMode != underFormData.workMode && underFormData.workMode != null"/>
                <el-input v-model="underFormData.workMode == 0 ? '自动' : '手动'" readonly
                          v-if="upperFormData.workMode == underFormData.workMode && underFormData.workMode != null"/>
                <el-input v-model="underFormData.workMode" readonly v-if="underFormData.workMode == null"/>
              </el-form-item>
              <el-form-item label="是否有源" prop="activePassive" v-if="nodeTypeValue == deviceTreeSettings.DI">
                <el-input v-model="underFormData.activePassive == 0 ? '否' : '是'" readonly class="error_input"
                          v-if="upperFormData.sourced != underFormData.activePassive && underFormData.activePassive != null"/>
                <el-input v-model="underFormData.activePassive == 0 ? '否' : '是'" readonly
                          v-if="upperFormData.sourced == underFormData.activePassive && underFormData.activePassive != null"/>
                <el-input v-model="underFormData.activePassive" readonly v-if="underFormData.activePassive == null"/>
              </el-form-item>
              <el-form-item label="单位" prop="unit"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.engineerUnit" readonly class="error_input"
                          v-if="upperFormData.engineerUnit != underFormData.unit"/>
                <el-input v-model="underFormData.unit" readonly v-else/>
              </el-form-item>
              <el-form-item label="最小值" prop="lowRange"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.lowRange" readonly class="error_input"
                          v-if="upperFormData.minVal != underFormData.lowRange"/>
                <el-input v-model="underFormData.lowRange" readonly v-else/>
              </el-form-item>
              <el-form-item label="最大值" prop="highRange"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.highRange" readonly class="error_input"
                          v-if="upperFormData.maxVal != underFormData.highRange"/>
                <el-input v-model="underFormData.highRange" readonly v-else/>
              </el-form-item>
              <el-form-item label="精度" prop="precision"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.precision" readonly class="error_input"
                          v-if="upperFormData.accuracy != underFormData.precision"/>
                <el-input v-model="underFormData.precision" readonly v-else/>
              </el-form-item>
              <el-form-item label="信号类型" prop="lineType"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.lineType" readonly class="error_input"
                          v-if="upperFormData.sinnalType != underFormData.lineType"/>
                <el-input v-model="underFormData.lineType" readonly v-else/>
              </el-form-item>
              <el-form-item label="报警使能" prop="alarmActive">
                <el-input v-model="underFormData.alarmActive == 0 ? '否' : '是'" readonly class="error_input"
                          v-if="upperFormData.alarmEnable != underFormData.alarmActive && underFormData.alarmActive != null"/>
                <el-input v-model="underFormData.alarmActive == 0 ? '否' : '是'" readonly
                          v-if="upperFormData.alarmEnable == underFormData.alarmActive && underFormData.alarmActive != null"/>
                <el-input v-model="underFormData.alarmActive" readonly v-if="underFormData.alarmActive == null"/>
              </el-form-item>
              <br/>
              <el-form-item label="闭合状态" prop="alarmTrigger"
                            v-if="nodeTypeValue == deviceTreeSettings.DO || nodeTypeValue == deviceTreeSettings.DI">
                <el-input v-model="underFormData.alarmTrigger == 0 ? '断开' : '闭合'" readonly class="error_input"
                          v-if="upperFormData.closeState != underFormData.alarmTrigger && underFormData.alarmTrigger != null"/>
                <el-input v-model="underFormData.alarmTrigger == 0 ? '断开' : '闭合'" readonly
                          v-if="upperFormData.closeState == underFormData.alarmTrigger && underFormData.alarmTrigger != null"/>
                <el-input v-model="underFormData.alarmTrigger" readonly v-if="underFormData.alarmTrigger == null"/>
              </el-form-item>
              <el-form-item label="低限报警" prop="alarmLowValue"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.alarmLowValue" readonly class="error_input"
                          v-if="upperFormData.lowLimit != underFormData.alarmLowValue"/>
                <el-input v-model="underFormData.alarmLowValue" readonly v-else/>
              </el-form-item>
              <el-form-item label="高限报警" prop="alarmHighValue"
                            v-if="nodeTypeValue == deviceTreeSettings.AO || nodeTypeValue == deviceTreeSettings.AI">
                <el-input v-model="underFormData.alarmHighValue" readonly class="error_input"
                          v-if="upperFormData.highLimit != underFormData.alarmHighValue"/>
                <el-input v-model="underFormData.alarmHighValue" readonly v-else/>
              </el-form-item>
              <el-form-item label="优先级" prop="alarmPriority1">
                <el-input v-model="underFormData.alarmPriority1" readonly class="error_input"
                          v-if="upperFormData.alarmPriority1 != underFormData.alarmPriority1"/>
                <el-input v-model="underFormData.alarmPriority1" readonly v-else/>
              </el-form-item>
            </el-form>
          </el-col>
        </el-row>
      </div>
    </el-dialog>


  </div>
</template>

<script>
  import {
    insertPoint, updatePoint, listEnergy, listVpoint,
    getDataInfoParam, synchronizeVpoint, synchronizeModelPoint
  } from '@/api/basicData/deviceManagement/deviceTree/deviceTreePoint'
  import {deviceTreeSettings} from '../../../../api/basicData/deviceManagement/deviceTree/deviceTreeSettings'
  import {mapState} from 'vuex'

  export default {
    props: {
      nodeType: {
        type: String,
        default: ''
      },
      treeNodeMsgs: {
        type: Object,
        default: {
          sysName: null,
          nickName: null,
          vpointType: null,
          engineerUnit: null,
          accuracy: null,
          initVal: null,
          description: null,
          energyCode: null,
          enabled: null,
          alarmEnable: null,
          alarmType: null,
          alarmPriority: null,
          energyStatics: null,
          reversed: null,
          workMode: null,
          sourced: null,
          minVal: null,
          maxVal: null,
          sinnalType: null,
          closeState: null,
          highLimit: null,
          lowLimit: null,
          faultState: null,
          DOType: null,
          VDOType: null,
          equipmentId: null,
          moduleId: null,
          syncState: null
        }
      }
    },

    data() {
      // 别名校验方法
      var checkinput = (rule, value, callback) => {
        if (!value) {
          return callback()
        }
        if (value) {
          var reg = /^[\u4E00-\u9FA5A-Za-z0-9_]+$/
          if (!reg.test(value)) {
            callback(new Error('只能输入英文、数字、下划线!'))
          } else {
            callback()
          }
        }
      }
      //不允许输入,/!特殊符号
      var checkText = (rule, value, callback) => {
        if (!value) {
          return callback()
        }
        if (value) {
          var reg = /[,/!]/;
          if (reg.test(value)) {
            callback(new Error('不允许输入,/!特殊符号'))
          } else {
            callback()
          }
        }
      }
      //不允许输入汉字
      var checkChinese = (rule, value, callback) => {
        if (!value) {
          return callback()
        }
        if (value) {
          var reg = /[\u4e00-\u9fa5]/;
          if (reg.test(value)) {
            callback(new Error('不允许输入汉字'))
          } else {
            callback()
          }
        }
      }
      var checkMaxVal = (rule, value, callback) => {
        var minVal = this.queryFormDO.minVal
        var maxVal = this.queryFormDO.maxVal
        if (this.addPoint) {
          minVal = this.formModelPoint.minVal
          maxVal = this.formModelPoint.maxVal
        }

        let reg = /^([1-9][\d]*|0)(\.[\d]+)?$/
        if (!reg.test(maxVal)) {
          return callback(new Error('请输入正确的最大值'))
        } else {
          if (Number(minVal) >= Number(maxVal)) {
            return callback(new Error('最小值需小于最大值'))
          } else {
            if (this.addPoint) {
              this.$refs.formModelPoint.clearValidate('minVal')
              this.$refs.formModelPoint.clearValidate('maxVal')
            } else {
              this.$refs.queryFormDO.clearValidate('minVal')
              this.$refs.queryFormDO.clearValidate('maxVal')
            }
            return callback()
          }
        }
      }
      var checkMinVal = (rule, value, callback) => {
        var minVal = this.queryFormDO.minVal
        var maxVal = this.queryFormDO.maxVal
        if (this.addPoint) {
          minVal = this.formModelPoint.minVal
          maxVal = this.formModelPoint.maxVal
        }
        let reg = /^([1-9][\d]*|0)(\.[\d]+)?$/
        if (!reg.test(minVal)) {
          return callback(new Error('请输入正确的最小值'))
        } else {
          if (Number(minVal) >= Number(maxVal)) {
            return callback(new Error('最小值需小于最大值'))
          } else {
            if (this.addPoint) {
              this.$refs.formModelPoint.clearValidate('minVal')
              this.$refs.formModelPoint.clearValidate('maxVal')
            } else {
              this.$refs.queryFormDO.clearValidate('minVal')
              this.$refs.queryFormDO.clearValidate('maxVal')
            }
            return callback()
          }
        }
      }
      var checkHighLimit = (rule, value, callback) => {
        var isCheck = false
        var lowLimit = this.queryFormDO.lowLimit
        var highLimit = this.queryFormDO.highLimit
        var alarmEnable = this.formModelPoint.alarmEnable
        if (this.addPoint) {
          if (this.formModelPoint.alarmEnable == 1) {
            isCheck = true
          }
          lowLimit = this.formModelPoint.lowLimit
          highLimit = this.formModelPoint.highLimit
          alarmEnable = this.formModelPoint.alarmEnable
        } else {
          if (this.queryFormDO.alarmEnable == 1) {
            isCheck = true
          }
        }
        if (isCheck) {
          let reg = /^([1-9][\d]*|0)(\.[\d]+)?$/
          if (!reg.test(highLimit) || !reg.test(lowLimit)) {
            return callback(new Error('请输入正确的报警值'))
          } else {
            if (Number(lowLimit) >= Number(highLimit)) {
              return callback(new Error('低限报警需小于高限报警'))
            } else {
              if (this.addPoint) {
                this.$refs.formModelPoint.clearValidate('highLimit')
                this.$refs.formModelPoint.clearValidate('lowLimit')
              } else {
                this.$refs.queryFormDO.clearValidate('highLimit')
                this.$refs.queryFormDO.clearValidate('lowLimit')
              }
              return callback()
            }
          }
        }
        return callback()
      }
      var checkLowLimit = (rule, value, callback) => {
        var isCheck = false
        var lowLimit = this.queryFormDO.lowLimit
        var highLimit = this.queryFormDO.highLimit
        var alarmEnable = this.queryFormDO.alarmEnable
        if (this.addPoint) {
          if (this.formModelPoint.alarmEnable == 1) {
            isCheck = true
          }
          lowLimit = this.formModelPoint.lowLimit
          highLimit = this.formModelPoint.highLimit
          alarmEnable = this.formModelPoint.alarmEnable
        } else {
          if (this.queryFormDO.alarmEnable == 1) {
            isCheck = true
          }
        }
        if (isCheck) {
          let reg = /^([1-9][\d]*|0)(\.[\d]+)?$/
          if (!reg.test(highLimit) || !reg.test(lowLimit)) {
            return callback(new Error('请输入正确的报警值'))
          } else {
            if (Number(lowLimit) >= Number(highLimit)) {
              return callback(new Error('低限报警需小于高限报警'))
            } else {
              if (this.addPoint) {
                this.$refs.formModelPoint.clearValidate('highLimit')
                this.$refs.formModelPoint.clearValidate('lowLimit')
              } else {
                this.$refs.queryFormDO.clearValidate('highLimit')
                this.$refs.queryFormDO.clearValidate('lowLimit')
              }
              return callback()
            }
          }
        }
        return callback()

      }
      return {
        addPoint: false,//是否节点添加
        UIUX: false,//是否UIXUX节点添加
        nodeTypeValue: null,
        upperFormData: {},//上位机数据
        underFormData: {},//下位机数据
        prefix: null,//通讯地址前缀
        watchBoolean: false,//是否忽略监听
        watchBooleanDO: false,//是否忽略监听
        saveBoolean: true,//按钮是否可以点击
        saveBooleanDO: true,//按钮是否可以点击
        deviceTreeSettings: deviceTreeSettings,//设备树node设置js
        controllerId: null,//DDC id
        fatherId: null,//设备树父ID
        pointArr: [deviceTreeSettings.AI, deviceTreeSettings.AO, deviceTreeSettings.DI, deviceTreeSettings.DO],//虚点+模块点
        visible: false,//右侧弹窗是否弹出
        visibleData: false,//对比框弹出
        formVisible: false,
        queryForm: this.treeNodeMsgs,//虚点展示，数据对比
        queryFormDO: this.treeNodeMsgs,//模块点展示，数据对比
        formModelPoint: {//模块点添加
          treeId: null,
          sysName: null,
          nickName: null,
          initVal: null,
          description: null,
          engineerUnit: null,
          minVal: null,
          maxVal: null,
          accuracy: null,
          lowLimit: null,
          highLimit: null,
          energyCode: null,
          alarmPriority: 0,
          faultState: null,
          syncState: null,
          alarmType: 1,
          sinnalType: null,
          sourced: 0,
          workMode: 1,
          enabled: 1,
          alarmEnable: 0,
          reversed: 0,
          closeState: 0,
          energyStatics: 0
        },
        form: {//虚点添加
          sysName: null,
          nickName: null,
          vpointType: null,
          engineerUnit: null,
          accuracy: null,
          initVal: null,
          description: null,
          energyCode: null,
          nodeType: 0,
          fatherId: 0,
          enabled: 1,
          alarmEnable: 0,
          alarmType: 0,
          alarmPriority: 0,
          energyStatics: 0,
          syncState: null,
          faultState: null,
          closeState: 0
        },
        vNodeTypeList: [],//虚点类型
        typeList: [{code: 0, name: 'ddc模块'}, {code: 1, name: '照明模块'}, {code: 2, name: '干线耦合器'}, {
          code: 3,
          name: '支线耦合器'
        }],//模块类型
        accuracyList: [{id: 0, value: 0}, {id: 1, value: 1}, {id: 2, value: 2}, {id: 3, value: 3}, {
          id: 4,
          value: 4
        }, {id: 5, value: 5}, {id: 6, value: 6}],//精度
        energyList: [],//能耗类型
        sinnalTypeList: [{id: 0, value: '0-10V'}, {id: 1, value: '0-20mA'}, {id: 2, value: '4-20mA'}],//信号类型
        // 表单校验
        rules: {
          sysName: [
            {required: true, message: '系统名称不能为空', trigger: 'blur'},
            {pattern: /^[a-zA-Z]/, message: "首位只能输入英文字母",},
            {validator: checkChinese},
            {validator: checkinput},
          ],
          nickName: [{required: true, message: '别名不能为空', trigger: 'blur'},
            {validator: checkText},
          ],
          vpointType: [{required: true, message: '虚点类型不能为空', trigger: 'change'}],
          engineerUnit: [{required: true, message: '单位不能为空', trigger: 'blur'}],
          accuracy: [{required: true, message: '请选择精度', trigger: 'change'}],
          initVal: [{required: true, message: '初始值不能为空', trigger: 'blur'}, {
            pattern: /^([1-9][\d]*|0)(\.[\d]+)?$/,
            message: '请输入正确的初始值'
          }],
          description: [{required: true, message: '描述不能为空', trigger: 'blur'}],
          energyCode: [{required: true, message: '能耗类型不能为空', trigger: 'change'}]
        },
        rulesPoint: {
          sysName: [{required: true, message: '系统名称不能为空', trigger: 'blur'},
            {pattern: /^[a-zA-Z]/, message: "首位只能输入英文字母",},
            {validator: checkChinese},
            {validator: checkinput},
          ],
          nickName: [{required: true, message: '别名不能为空', trigger: 'blur'},
            {validator: checkText},
          ],
          // enabled: [{ required: true, message: '请选择使能状态', trigger: 'change' }],
          reversed: [{required: true, message: '请选择反向状态', trigger: 'change'}],
          initVal: [{required: true, message: '初始值不能为空', trigger: 'blur'}, {
            pattern: /^([1-9][\d]*|0)(\.[\d]+)?$/,
            message: '请输入正确的初始值'
          }],
          description: [{required: true, message: '描述不能为空', trigger: 'blur'}],
          workMode: [{required: true, message: '请选择工作模式', trigger: 'change'}],
          // sourced: [{ required: true, message: '请选择是否有源', trigger: 'change' }],
          engineerUnit: [{required: true, message: '请输入单位', trigger: 'blur'}],
          minVal: [{required: true, message: '请输入正确的最小值', trigger: 'blur'}, {validator: checkMinVal}],
          maxVal: [{required: true, message: '请输入正确的最大值', trigger: 'blur'}, {validator: checkMaxVal}],
          accuracy: [{required: true, message: '请选择精度', trigger: 'change'}],
          sinnalType: [{required: true, message: '请选择信号类型', trigger: 'change'}],
          // alarmEnable: [{ required: true, message: '请选择报警使能', trigger: 'change' }],
          alarmType: [{required: true, message: '请选择报警类型', trigger: 'change'}],
          closeState: [{required: true, message: '请选择闭合状态', trigger: 'change'}],
          highLimit: [{validator: checkHighLimit}],
          lowLimit: [{validator: checkLowLimit}],
          // energyStatics: [{ required: true, message: '请选择能耗采集', trigger: 'change' }],
          energyCode: [{required: true, message: '请选择能源类型', trigger: 'change'}],
          // faultState: [{ required: true, message: '请选择故障状态', trigger: 'change' }],
          alarmPriority: [{required: true, message: '请选择报警优先级', trigger: 'change'}]
        }
      }
    },
    computed: {
      ...mapState({
        //点同步状态
        besPointState_websocket: state => state.websocket.besPointState,
        //点信息
        besPoint_websocket: state => state.websocket.besPoint,
        /***************************************************qindehua LDC*****************************************************/
        //点新增
        pointAddLDC: state => state.websocket.pointAddLDC,
        //点同步
        pointParamSetLDC: state => state.websocket.pointParamSetLDC,
        //点数据对比
        pointParamGetLDC: state => state.websocket.pointParamGetLDC
      }),
      watchList: function () {
        const obj = {}
        Object.keys(this.queryForm).forEach(key => {
          obj[key] = this.queryForm[key]
        })
        return obj
      },
      watchListDO: function () {
        const obj = {}
        Object.keys(this.queryFormDO).forEach(key => {
          obj[key] = this.queryFormDO[key]
        })
        return obj
      }
    },

    watch: {
      nodeType(value) {
        this.nodeTypeValue = value//设备node
      }
      ,

      //2.判断是否为人为修改数据   还是点击节点更换的数据
      //4.数据确定之后  再次发生变化 即为人为修改数据 保存按钮生效
      watchList: {
        deep: true,
        handler: function (newVal, oldVal) {
          if (this.watchBoolean) {
            // debugger
            if ((newVal.sysName !== oldVal.sysName || newVal.nickName !== oldVal.nickName || newVal.vpointType !== oldVal.vpointType
              || newVal.engineerUnit !== oldVal.engineerUnit || newVal.accuracy !== oldVal.accuracy
              || newVal.initVal !== oldVal.initVal || newVal.description !== oldVal.description
              || newVal.enabled !== oldVal.enabled || newVal.alarmEnable !== oldVal.alarmEnable
              || newVal.alarmPriority !== oldVal.alarmPriority || newVal.energyStatics !== oldVal.energyStatics
              || newVal.energyCode !== oldVal.energyCode || newVal.closeState !== oldVal.closeState
              || newVal.faultState !== oldVal.faultState) && oldVal.VDOType != null) {
              // debugger
              this.saveBoolean = false
            }
          }
        }
      }
      ,
      watchListDO: {
        deep: true,
        handler: function (newVal, oldVal) {
          if (this.watchBooleanDO) {
            // debugger
            if ((newVal.sysName !== oldVal.sysName || newVal.nickName !== oldVal.nickName || newVal.initVal !== oldVal.initVal
              || newVal.description !== oldVal.description || newVal.engineerUnit !== oldVal.engineerUnit
              || newVal.minVal !== oldVal.minVal || newVal.maxVal !== oldVal.maxVal
              || newVal.accuracy !== oldVal.accuracy || newVal.sinnalType !== oldVal.sinnalType
              || newVal.highLimit !== oldVal.highLimit || newVal.lowLimit !== oldVal.lowLimit
              || newVal.energyCode !== oldVal.energyCode || newVal.energyStatics !== oldVal.energyStatics
              || newVal.enabled !== oldVal.enabled || newVal.reversed !== oldVal.reversed
              || newVal.workMode !== oldVal.workMode || newVal.sourced !== oldVal.sourced
              || newVal.closeState !== oldVal.closeState || newVal.alarmEnable !== oldVal.alarmEnable
              || newVal.alarmPriority !== oldVal.alarmPriority || newVal.faultState !== oldVal.faultState)
              && oldVal.DOType != null) {
              this.saveBooleanDO = false
            }
          }
        }
      }
      ,
      //监听  1.先走该方法  刷新数据
      deep: true,
      treeNodeMsgs(value) {//右侧设备数据展示
        //查询能源类型
        if(value.treeId != null){
          this.queryEnergyType(value.treeId)
        }
        this.watchBoolean = false
        this.saveBoolean = true
        this.watchBooleanDO = false
        this.saveBooleanDO = true
        let str = value.nodeType
        str = str + ''
        if (str == deviceTreeSettings.Vpoint) {
          this.treeNodeMsgs.VDOType = '虚点'
          this.queryForm = this.treeNodeMsgs
          this.$nextTick(() => {
            this.watchBoolean = true
            this.watchBooleanDO = false
            if (this.$refs.queryForm != null && this.$refs.queryForm != undefined) {
              this.$refs.queryForm.clearValidate()
            }
          })
        }
        if (this.pointArr.indexOf(str) > -1) {
          if (this.treeNodeMsgs.enabled == null) {
            this.treeNodeMsgs.enabled = 0
          }
          if (this.treeNodeMsgs.reversed == null) {
            this.treeNodeMsgs.reversed = 0
          }
          if (this.treeNodeMsgs.workMode == null) {
            this.treeNodeMsgs.workMode = 0
          }
          if (this.treeNodeMsgs.sourced == null) {
            this.treeNodeMsgs.sourced = 0
          }
          if (this.treeNodeMsgs.alarmEnable == null) {
            this.treeNodeMsgs.alarmEnable = 0
          }
          if (this.treeNodeMsgs.closeState == null) {
            this.treeNodeMsgs.closeState = 0
          }
          if (this.treeNodeMsgs.energyStatics == null) {
            this.treeNodeMsgs.energyStatics = 0
          }
          if (this.treeNodeMsgs.faultState == null) {
            this.treeNodeMsgs.faultState = 0
          }
          if (str == deviceTreeSettings.DO) {
            this.treeNodeMsgs.DOType = 'DO节点'
          }
          if (str == deviceTreeSettings.DI) {
            this.treeNodeMsgs.DOType = 'DI节点'
          }
          if (str == deviceTreeSettings.AI) {
            this.treeNodeMsgs.DOType = 'AI节点'
          }
          if (str == deviceTreeSettings.AO) {
            this.treeNodeMsgs.DOType = 'AO节点'
          }
          this.queryFormDO = this.treeNodeMsgs
          this.$nextTick(() => {
            this.watchBoolean = false
            this.watchBooleanDO = true
            this.$refs.queryFormDO.clearValidate()
          })
        }
      }
      ,

      //点同步状态实时显示
      besPointState_websocket(data) {
        if (typeof data == null) {
          return
        }
        let str = ''
        str = data
        str = str.split('-')
        if (str[0] == 'true') {
          this.queryForm.syncState = 1
          this.queryFormDO.syncState = 1
        } else {
          this.queryFormDO.syncState = 0
          this.queryForm.syncState = 0
        }
      }
      ,

      //点信息
      besPoint_websocket(data) {

        if (data == null) {
          return
        }
        this.underFormData = data

        if (this.nodeTypeValue != deviceTreeSettings.Vpoint) {
          if (this.underFormData.alarmPriority == 0) {
            this.underFormData.alarmPriority1 = '一般'
          } else if (this.underFormData.alarmPriority == 1) {
            this.underFormData.alarmPriority1 = '较大'
          } else if (this.underFormData.alarmPriority == 2) {
            this.underFormData.alarmPriority1 = '重大'
          }
          this.underFormData.precision = this.setAccuracy(this.underFormData.precision)
          this.underFormData.lineType = this.setSinnalType(this.underFormData.lineType)
        } else {
          this.underFormData.pointType = this.setVpointType(this.underFormData.pointType)
        }
        //根据精度运算
        if (this.underFormData.precision != null
          && this.underFormData.precision > 0
          && this.underFormData.initValue != null
          && this.underFormData.initValue > 0) {
          this.underFormData.initValue = (this.underFormData.initValue / Math.pow(10, this.underFormData.precision)).toFixed(this.underFormData.precision)
        }
        if (this.underFormData.precision != null
          && this.underFormData.precision > 0
          && this.underFormData.highRange != null
          && this.underFormData.highRange > 0) {
          this.underFormData.highRange = (this.underFormData.highRange / Math.pow(10, this.underFormData.precision)).toFixed(this.underFormData.precision)
        }
        if (this.underFormData.precision != null
          && this.underFormData.precision > 0
          && this.underFormData.lowRange != null
          && this.underFormData.lowRange > 0) {
          this.underFormData.lowRange = (this.underFormData.lowRange / Math.pow(10, this.underFormData.precision)).toFixed(this.underFormData.precision)
        }
        this.$nextTick(() => {
          this.visibleData = true
        })

      }
      ,

      //点新增
      pointAddLDC(data) {
        if (typeof data != 'boolean') {
          return
        }
        if (data) {
          this.queryForm.syncState = 1
          this.queryFormDO.syncState = 1
        } else {
          this.queryFormDO.syncState = 0
          this.queryForm.syncState = 0
        }
        this.$store.commit('POINT_ADD_LDC', 0)
      }
      ,

      //点同步
      pointParamSetLDC(data) {
        if (typeof data != 'boolean') {
          return
        }
        if (data) {
          this.queryForm.syncState = 1
          this.queryFormDO.syncState = 1
        } else {
          this.queryFormDO.syncState = 0
          this.queryForm.syncState = 0
        }
        this.$store.commit('POINT_PARAM_SET_LDC', 0)
      }
      ,

      //点数据对比
      pointParamGetLDC(data) {
        if (data == null) {
          return
        }
        this.underFormData = data

        if (this.nodeTypeValue != deviceTreeSettings.Vpoint) {
          if (this.underFormData.alarmPriority == 0) {
            this.underFormData.alarmPriority1 = '一般'
          } else if (this.underFormData.alarmPriority == 1) {
            this.underFormData.alarmPriority1 = '较大'
          } else if (this.underFormData.alarmPriority == 2) {
            this.underFormData.alarmPriority1 = '重大'
          }
          this.underFormData.precision = this.setAccuracy(this.underFormData.precision)
          this.underFormData.lineType = this.setSinnalType(this.underFormData.lineType)
        } else {
          this.underFormData.pointType = this.setVpointType(this.underFormData.pointType)
        }

        //根据精度运算
        if (this.underFormData.precision != null
          && this.underFormData.precision > 0
          && this.underFormData.initValue != null
          && this.underFormData.initValue > 0) {
          this.underFormData.initValue = (this.underFormData.initValue / Math.pow(10, this.underFormData.precision)).toFixed(this.underFormData.precision)
        }
        if (this.underFormData.precision != null
          && this.underFormData.precision > 0
          && this.underFormData.highRange != null
          && this.underFormData.highRange > 0) {
          this.underFormData.highRange = (this.underFormData.highRange / Math.pow(10, this.underFormData.precision)).toFixed(this.underFormData.precision)
        }
        if (this.underFormData.precision != null
          && this.underFormData.precision > 0
          && this.underFormData.lowRange != null
          && this.underFormData.lowRange > 0) {
          this.underFormData.lowRange = (this.underFormData.lowRange / Math.pow(10, this.underFormData.precision)).toFixed(this.underFormData.precision)
        }

        this.$nextTick(() => {
          this.visibleData = true
        })
      }
    }
    ,

    created() {
      //按钮绑定回车
      // this.keyupEnter()
      //查询虚点类型列表
      this.queryVpointType()
    }
    ,
    mounted() {
    }
    ,
    methods: {
      checknum(type) {
        if (type === 'limitAdd') {
          if (this.formModelPoint.lowLimit > this.formModelPoint.highLimit) {
            this.$refs.formModelPoint.validateField('lowLimit')
            this.$refs.formModelPoint.validateField('hightLmit')
          }
        }
        if (type === 'limitInfo') {
          if (this.queryFormDO.lowLimit > this.queryFormDO.highLimit) {
            this.$refs.queryFormDO.validateField('lowLimit')
            this.$refs.queryFormDO.validateField('highLimit')
          }
        }
      },
      alarmEnableChange(e, msg) {//改变报警时能判断故障状态
        if (e == 1) {
          //开启
          if (this.queryForm.initVal == '125' && msg == 'info') {
            this.queryForm.faultState = 1
          }
          if (this.form.initVal == '125' && msg == 'add') {
            this.form.faultState = 1
          }
          if (this.queryFormDO.initVal == '125' && msg == 'info') {
            this.queryFormDO.faultState = 1
          }
          if (this.formModelPoint.initVal == '125' && msg == 'add') {
            this.formModelPoint.faultState = 1
          }
        }
        this.$forceUpdate()
      }
      ,
      changeSwitch() {//改变报警时能判断故障状态
        this.$forceUpdate()
      }
      ,
      checkprefix(prefix) {
        if (prefix == null || prefix == '') {
          this.prefix = '1.1.'
        } else {
          this.prefix = prefix
        }
      }
      ,
      keyupEnter() {
        document.onkeydown = e => {
          // && e.target === body
          if (e.keyCode === 13 && e.target.baseURI.match(/devicesManage/) && 1 == 0) {
            if (this.nodeTypeValue == deviceTreeSettings.Vpoint && this.visible) {
              this.submitForm()
            } else if (this.nodeTypeValue == deviceTreeSettings.Vpoint && !this.visible) {
              this.updateForm()
            }
            if (this.pointArr.indexOf(this.nodeTypeValue) > -1 && this.visible) {
              this.submitFormModelPoint()
            } else if (this.pointArr.indexOf(this.nodeTypeValue) > -1 && !this.visible) {
              this.updateFormPoint()
            }
          }
        }
      }
      ,
      queryVpointType() {//查询虚点类型列表
        listVpoint().then(response => {
          response.data.forEach(item => {
            item.id = item.id + ''
          })
          this.vNodeTypeList = response.data
        })
      }
      ,
      queryEnergyType(treeId) {//查询能源类型
        listEnergy({treeId:treeId}).then(response => {
          this.energyList = response.data
        })
      }
      ,
      // 表单重置
      reset() {
        this.form = {}
        this.resetForm('form')
      }
      ,
      //提交虚点按钮
      submitForm() {
        if (Number(this.form.initVal) > 0 && (this.form.initVal.toString()).indexOf('.') != -1) {//说明含有小数点
          if (this.form.initVal.toString().split('.')[1].length > this.form.accuracy || this.form.initVal.toString().split('.')[1].length < this.form.accuracy) {
            this.$modal.msgError('小数点位置不等于精度数值')
            return
          }
        }
        this.$refs['form'].validate(valid => {
          if (valid) {
            this.$confirm('确认提交当前虚点 ' + this.form.sysName + ' 吗?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              this.form.fatherId = Number(this.fatherId)
              this.form.nodeType = Number(this.nodeTypeValue)

              //添加虚点
              insertPoint(this.form).then(response => {
                if (response.code == 200) {
                  this.$modal.msgSuccess(response.msg)
                  response.data.deviceTreeId = response.data.treeId
                  response.data.id = response.data.guid
                  response.data.deviceNodeId = response.data.nodeType
                  response.data.alias = response.data.nickName
                  this.$emit('addTreeNode', response.data)
                  this.visible = false
                  this.rest()
                }
              })
            })
          }
        })
      }
      ,
      //保存虚点按钮
      updateForm() {
        if (Number(this.queryForm.initVal) > 0 && (this.queryForm.initVal.toString()).indexOf('.') != -1) {//说明含有小数点
          if (this.queryForm.initVal.toString().split('.')[1].length > this.queryForm.accuracy || this.queryForm.initVal.toString().split('.')[1].length < this.queryForm.accuracy) {
            this.$modal.msgError('小数点位置不等于精度数值')
            return
          }
        }
        //修改虚点
        this.$refs['queryForm'].validate(valid => {
          if (valid) {
            this.$confirm('确认修改当前虚点 ' + this.queryForm.sysName + ' 吗?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              updatePoint(this.queryForm).then(response => {
                if (response.code == 200) {
                  this.saveBoolean = true
                  this.$modal.msgSuccess(response.msg)
                  response.data.deviceTreeId = response.data.treeId
                  response.data.deviceNodeId = response.data.nodeType
                  response.data.id = response.data.treeId
                  response.data.left = true
                  response.data.alias = response.data.nickName
                  this.$emit('updateTreeNode', response.data)
                }
              }).catch(responseFail => {
                if (responseFail.message.indexOf('该点位已被支路关联') > -1) {
                  this.queryForm.energyStatics = 1
                }
              })
            })
          }
        })

      }
      ,
      //提交模块点
      submitFormModelPoint() {
        if (Number(this.formModelPoint.initVal) > 0 && (this.formModelPoint.initVal.toString()).indexOf('.') != -1) {//说明含有小数点
          if (this.form.formModelPoint.toString().split('.')[1].length > this.formModelPoint.accuracy || this.formModelPoint.initVal.toString().split('.')[1].length < this.formModelPoint.accuracy) {
            this.$modal.msgError('小数点位置不等于精度数值')
            return
          }
        }
        this.$refs['formModelPoint'].validate(valid => {
          if (valid) {
            // this.$emit('deleteTreeNodePoint', this.formModelPoint)
            //修改模块点
            this.$confirm('确认提交当前模块点 ' + this.formModelPoint.sysName + ' 吗?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              updatePoint(this.formModelPoint).then(response => {
                if (response.code == 200) {
                  this.$modal.msgSuccess(response.msg)
                  response.data.deviceTreeId = response.data.treeId
                  response.data.id = response.data.treeId
                  response.data.left = true
                  response.data.deviceNodeId = response.data.nodeType
                  response.data.alias = response.data.nickName
                  this.$emit('updateTreeNodePoint', response.data)
                  this.visible = false
                  this.addPoint = false
                  this.restPoint()
                }
              })
            })
          }
        })
      }
      ,
      //保存模块点
      updateFormPoint() {
        if (Number(this.queryFormDO.initVal) > 0 && (this.queryFormDO.initVal.toString()).indexOf('.') != -1) {//说明含有小数点
          if (this.form.queryFormDO.toString().split('.')[1].length > this.queryFormDO.accuracy || this.queryFormDO.initVal.toString().split('.')[1].length < this.queryFormDO.accuracy) {
            this.$modal.msgError('小数点位置不等于精度数值')
            return
          }
        }
        this.$refs['queryFormDO'].validate(valid => {
          if (valid) {
            this.$confirm('确认修改当前模块点 ' + this.queryFormDO.nickName + ' 吗?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              //修改模块点
              if (this.queryFormDO.treeId == null && this.queryFormDO.deviceTreeId != null) {
                this.queryFormDO.treeId = this.queryFormDO.deviceTreeId
              }
              if (this.queryFormDO.moduleId == null && this.queryFormDO.deviceTreeFatherId != null) {
                this.queryFormDO.moduleId = this.queryFormDO.deviceTreeFatherId
              }
              if (this.queryFormDO.faultState == null) {
                this.queryFormDO.faultState = 0
              }
              updatePoint(this.queryFormDO).then(response => {
                if (response.code == 200) {
                  this.saveBooleanDO = true
                  this.$modal.msgSuccess(response.msg)
                  response.data.deviceTreeId = response.data.treeId
                  response.data.alias = response.data.nickName
                  response.data.deviceNodeId = response.data.nodeType
                  response.data.id = response.data.treeId
                  this.$emit('updateTreeNode', response.data)
                  this.visible = false
                }
              }).catch(responseFail => {
                if (responseFail.message.indexOf('该点位已被支路关联') > -1) {
                  this.queryFormDO.energyStatics = 1
                }
              })
            })
          }
        })
      }
      ,
      //同步数据
      synchronizeData(nodeTypeValue) {
        if (!this.saveBoolean && this.nodeTypedValue == deviceTreeSettings.Vpoint) {
          this.$modal.confirm('数据已修改，请先保存！')
        } else if (!this.saveBooleanDO && this.nodeTypedValue != deviceTreeSettings.Vpoint) {
          this.$modal.confirm('数据已修改，请先保存！')
        } else {
          if (nodeTypeValue == deviceTreeSettings.Vpoint) {//虚点

            synchronizeVpoint({
              treeId: this.queryForm.treeId,
              nodeType: this.queryForm.nodeType
            }).then(response => {
              this.$modal.msgSuccess(response.msg)
            })

          } else {//模块点

            synchronizeModelPoint({
              treeId: this.queryFormDO.treeId,
              nodeType: this.queryFormDO.nodeType
            }).then(response => {
              this.$modal.msgSuccess(response.msg)
            })
          }
        }

      }
      ,
      //数据对比
      dataComparison(nodeTypeValue) {

        let data = {
          equipmentId: this.queryForm.equipmentId,//ID
          sysName: this.queryForm.sysName,//系统名称
          nickName: this.queryForm.nickName,//别名
          initVal: Number(this.queryForm.initVal),//初始值
          description: this.queryForm.description,//描述
          enabled: this.queryForm.enabled,//使能状态
          vpointType: this.setVpointType(this.queryForm.vpointType)//虚点类型
        }

        let pointData = {
          equipmentId: this.queryFormDO.equipmentId,//ID
          sysName: this.queryFormDO.sysName,//系统名称
          nickName: this.queryFormDO.nickName,//别名
          enabled: this.queryFormDO.enabled,//使能状态
          reversed: this.queryFormDO.reversed,//是否反向
          initVal: Number(this.queryFormDO.initVal),//初始值
          description: this.queryFormDO.description,//描述
          workMode: this.queryFormDO.workMode,//工作模式
          sourced: this.queryFormDO.sourced,//是否有源
          engineerUnit: this.queryFormDO.engineerUnit,//单位
          minVal: Number(this.queryFormDO.minVal),//最小值
          maxVal: Number(this.queryFormDO.maxVal),//最大值
          alarmEnable: this.queryFormDO.alarmEnable,//报警使能
          closeState: this.queryFormDO.closeState,//闭合状态
          highLimit: Number(this.queryFormDO.highLimit),//高限报警
          lowLimit: Number(this.queryFormDO.lowLimit),//低限报警
          // energyStatics: this.queryFormDO.energyStatics,//能耗统计
          // faultState: this.queryFormDO.faultState,//故障状态
          accuracy: this.setAccuracy(this.queryFormDO.accuracy),//精度
          sinnalType: this.setSinnalType(this.queryFormDO.sinnalType),//信号类型
          alarmPriority: this.queryFormDO.alarmPriority//优先级
        }

        if (nodeTypeValue == deviceTreeSettings.Vpoint) {//虚点
          //根据精度运算
          if (data.accuracy != null
            && data.accuracy > 0
            && data.initVal != null
            && data.initVal > 0) {
            data.initVal = (data.initVal).toFixed(data.accuracy)
          }
          this.upperFormData = data
          getDataInfoParam({
            deviceTreeId: this.queryForm.treeId,
            type: this.nodeTypeValue
          }).then(response => {

            this.$modal.msgSuccess(response.msg)
          })

        } else {//模块点
          //根据精度运算
          if (pointData.accuracy != null
            && pointData.accuracy > 0
            && pointData.initVal != null
            && pointData.initVal > 0) {
            pointData.initVal = (pointData.initVal).toFixed(pointData.accuracy)
          }
          if (pointData.accuracy != null
            && pointData.accuracy > 0
            && pointData.maxVal != null
            && pointData.maxVal > 0) {
            pointData.maxVal = (pointData.maxVal).toFixed(pointData.accuracy)
          }
          if (pointData.accuracy != null
            && pointData.accuracy > 0
            && pointData.minVal != null
            && pointData.minVal > 0) {
            pointData.minVal = (pointData.minVal).toFixed(pointData.accuracy)
          }

          this.upperFormData = pointData

          // this.upperFormData.energyCode = this.setEnergyCode(this.upperFormData.energyCode)
          if (this.upperFormData.alarmPriority == 0) {
            this.upperFormData.alarmPriority1 = '一般'
          } else if (this.upperFormData.alarmPriority == 1) {
            this.upperFormData.alarmPriority1 = '较大'
          } else {
            this.upperFormData.alarmPriority1 = '重大'
          }
          getDataInfoParam({
            deviceTreeId: this.queryFormDO.treeId,
            type: this.nodeTypeValue
          }).then(response => {
            this.$modal.msgSuccess(response.msg)
          })

        }
      }
      ,
      //取虚点类型值
      setVpointType(value) {
        if (value == 4) {
          value = 0
        } else if (value == 5) {
          value = 1
        } else if (value == 6) {
          value = 2
        } else if (value == 7) {
          value = 3
        }

        for (let i = 0; i < this.vNodeTypeList.length; i++) {
          if (value == this.vNodeTypeList[i].id) {
            return this.vNodeTypeList[i].value
          }
        }

      }
      ,
      //取精度值
      setAccuracy(value) {
        for (let i = 0; i < this.accuracyList.length; i++) {
          if (value == this.accuracyList[i].id) {
            return this.accuracyList[i].value
          }
        }
      }
      ,
      //取信号类型值
      setSinnalType(value) {
        for (let i = 0; i < this.sinnalTypeList.length; i++) {
          if (value == this.sinnalTypeList[i].id) {
            return this.sinnalTypeList[i].value
          }
        }
      }
      ,
      //取能耗类型值
      setEnergyCode(value) {
        if (typeof (value) != 'undefined' && value != null && value != '') {
          for (let i = 0; i < this.energyList.length; i++) {
            if (value == this.energyList[i].code) {
              return this.energyList[i].name
            }
          }
        }
        return ''
      }
      ,
      //点值配置
      editPointValue() {
        if (this.nodeTypeValue == deviceTreeSettings.Vpoint) {
          this.$emit('debuggerTreeNode', deviceTreeSettings.vpointValue, this.queryForm)
        } else {
          this.$emit('debuggerTreeNode', deviceTreeSettings.AIDebugger, this.queryFormDO)
        }
      },
      //调试
      editDebugger() {
        this.$emit('debuggerTreeNode', deviceTreeSettings.vpointDebugger, this.queryForm)
      },
      closedDialog() {//关闭数据对比
        this.visibleData = false
      }
      ,
      handleClose(done) {//关闭新增页面
        this.$confirm('确认关闭？')
          .then(_ => {
            done()
            // debugger
            if (this.addPoint) {
              this.addPoint = false
            }
            if (this.UIUX) {
              this.UIUX = false
            }
            if (this.nodeTypeValue == deviceTreeSettings.Vpoint) {
              this.rest()
            } else {
              this.restPoint()
            }
            this.$emit('ReloadNode')//重新加载当前选中的树节点
          })
          .catch(_ => {
          })
      }
      ,
      rest() {
        this.form = {
          sysName: null,
          nickName: null,
          vpointType: null,
          engineerUnit: null,
          accuracy: null,
          initVal: null,
          description: null,
          energyCode: null,
          nodeType: 0,
          fatherId: 0,
          enabled: 1,
          alarmEnable: 0,
          alarmType: 0,
          alarmPriority: 0,
          energyStatics: 0,
          syncState: null,
          faultState: null,
          closeState: 0
        }
      }
      ,
      restPoint() {
        this.formModelPoint = {
          treeId: null,
          sysName: null,
          nickName: null,
          initVal: null,
          description: null,
          engineerUnit: null,
          minVal: null,
          maxVal: null,
          accuracy: null,
          lowLimit: null,
          highLimit: null,
          energyCode: null,
          alarmPriority: 0,
          faultState: null,
          syncState: null,
          alarmType: 1,
          sinnalType: null,
          sourced: 0,
          workMode: 1,
          enabled: 1,
          alarmEnable: 0,
          reversed: 0,
          closeState: 0,
          energyStatics: 0
        }
      }
      ,
      //清除数据对比
      clearParmas() {
        this.underFormData = {}
      }

    }
  }
</script>
<style lang="scss" scoped>
  .white-body-view {
    width: 100%;
    min-width: 320px;
  }

  .fromHeader .el-select .el-input {
    border-color: #409EFF;
    width: 400px;
  }

  .error_input ::v-deep .el-input__inner {
    border: red 1px solid;
  }

  .box {
    // 必须有高度 overflow 为自动
    overflow: auto;
    height: 490px;
    padding: 0px 30px 11px 27px;

    // 滚动条的样式,宽高分别对应横竖滚动条的尺寸
    &::-webkit-scrollbar {
      width: 3px;
    }

    // 滚动条里面默认的小方块,自定义样式
    &::-webkit-scrollbar-thumb {
      background: #8798AF;
      border-radius: 2px;
    }

    // 滚动条里面的轨道
    &::-webkit-scrollbar-track {
      background: transparent;
    }
  }
</style>

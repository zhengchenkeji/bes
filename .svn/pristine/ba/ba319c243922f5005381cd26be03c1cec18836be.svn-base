package com.zc.iot.service.impl;

import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.StringUtils;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.common.core.foreignkeyservice.AssociatedService;
import com.zc.common.core.foreignkeyservice.ForeignKeyService;
import com.zc.common.core.foreignkeyservice.LinkModel;
import com.zc.iot.domain.IotFunctionValue;
import com.zc.iot.mapper.IotFunctionValueMapper;
import com.zc.iot.service.IIotFunctionValueService;
import com.zc.relay.dto.TradeItemLifecycleInfo;
import com.zc.relay.handler.TradeItemLifecycleHookDispatcher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import java.util.List;

import static com.zc.constant.IotConstants.LifecycleCategory.FUNCTION_VALUE;

/**
 * 功能值定义Service业务层处理
 *
 * @author Athena-YangChao
 * @date 2021-10-27
 */
@Service
public class IotFunctionValueServiceImpl implements IIotFunctionValueService, ForeignKeyService {

    @Autowired
    private IotFunctionValueMapper iotFunctionValueMapper;

    @Resource
    private RedisCache redisCache;

    @Resource
    private TradeItemLifecycleHookDispatcher tradeItemLifecycleHookDispatcher;

    @Resource(name="iotFunctionServiceImpl")
    private AssociatedService associatedService;

    @PostConstruct
    public void init()
    {
        registerForeignKey();
        /*
          添加数据到 redis 缓存
         */
        addIotFunctionValueCache();
    }

    /**
     * 添加数据到 redis 缓存
     */
    public void addIotFunctionValueCache()
    {
        // 获取全部品类列表数据
        List<IotFunctionValue> iotCategories = selectIotFunctionValueList(null);

        if (iotCategories == null || iotCategories.isEmpty())
        {
            return;
        }

        // 清楚 redis 缓存数据
        redisCache.deleteObject(RedisKeyConstants.IOT_FUNCTION_VALUE);

        // 添加 redis 缓存数据
        iotCategories.forEach(val -> redisCache.setCacheMapValue(RedisKeyConstants.IOT_FUNCTION_VALUE, val.getId(), val));
    }

    /**
     * 查询功能值定义
     *
     * @param id 功能值定义主键
     * @return 功能值定义
     */
    @Override
    public IotFunctionValue selectIotFunctionValueById(Long id) {
        return iotFunctionValueMapper.selectIotFunctionValueById(id);
    }

    /**
     * 查询功能值定义列表
     *
     * @param iotFunctionValue 功能值定义
     * @return 功能值定义
     */
    @Override
    public List<IotFunctionValue> selectIotFunctionValueList(IotFunctionValue iotFunctionValue) {
        return iotFunctionValueMapper.selectIotFunctionValueList(iotFunctionValue);
    }

    /**
     * 新增功能值定义
     *
     * @param iotFunctionValue 功能值定义
     * @return 结果
     */
    @Override
    public int insertIotFunctionValue(IotFunctionValue iotFunctionValue) {
        iotFunctionValue.setCreateTime(DateUtils.getNowDate());

        int result = iotFunctionValueMapper.insertIotFunctionValue(iotFunctionValue);

        if (result == 1)
        {
            // 添加到缓存
            redisCache.setCacheMapValue(RedisKeyConstants.IOT_FUNCTION_VALUE, iotFunctionValue.getId(), iotFunctionValue);

            // 数据变化通知给业务平台
            tradeItemLifecycleHookDispatcher.create(
                    new TradeItemLifecycleInfo(FUNCTION_VALUE, iotFunctionValue.getId()));
        }
        return result;
    }

    /**
     * 修改功能值定义
     *
     * @param iotFunctionValue 功能值定义
     * @return 结果
     */
    @Override
    public int updateIotFunctionValue(IotFunctionValue iotFunctionValue) {

        iotFunctionValue.setUpdateTime(DateUtils.getNowDate());

        int result = iotFunctionValueMapper.updateIotFunctionValue(iotFunctionValue);

        if (result == 1)
        {
            // 更新缓存
            redisCache.setCacheMapValue(RedisKeyConstants.IOT_FUNCTION_VALUE, iotFunctionValue.getId(), iotFunctionValue);

            // 数据变化通知给业务平台
            tradeItemLifecycleHookDispatcher.update(
                    new TradeItemLifecycleInfo(FUNCTION_VALUE, iotFunctionValue.getId()));
        }
        return result;
    }

    /**
     * 批量删除功能值定义
     *
     * @param ids 需要删除的功能值定义主键
     * @return 结果
     */
    @Override
    public int deleteIotFunctionValueByIds(Long[] ids) {

        int result = iotFunctionValueMapper.deleteIotFunctionValueByIds(ids);

        /*删除缓存数据*/
        if (result > 0)
        {
            redisCache.delCacheMapValue(RedisKeyConstants.IOT_FUNCTION_VALUE, ids);

            for (Long id : ids) {
                // 数据变化通知给业务平台
                tradeItemLifecycleHookDispatcher.destroy(
                        new TradeItemLifecycleInfo(FUNCTION_VALUE, id));
            }

        }

        return result;
    }

    /**
     * 删除功能值定义信息
     *
     * @param id 功能值定义主键
     * @return 结果
     */
    @Override
    public int deleteIotFunctionValueById(Long id) {

        int result = iotFunctionValueMapper.deleteIotFunctionValueById(id);

        /*删除缓存*/
        if (result == 1)
        {
            redisCache.delCacheMapValue(RedisKeyConstants.IOT_FUNCTION_VALUE, id);

            // 数据变化通知给业务平台
            tradeItemLifecycleHookDispatcher.destroy(
                    new TradeItemLifecycleInfo(FUNCTION_VALUE, id));
        }

        return result;
    }

    @Transactional
    @Override
    public int saveFvData(IotFunctionValue iotFunctionValue) {

        int res = 0;

        try {
            List<IotFunctionValue> iotFunctionValues = iotFunctionValue.getSaveFvDataList();

            if (iotFunctionValues == null || iotFunctionValues.isEmpty()){
                return res;
            }

            for (IotFunctionValue functionValue : iotFunctionValues) {

                if(StringUtils.isEmpty(functionValue.getValue()) || StringUtils.isEmpty(functionValue.getName())){
                    continue;
                }
                int up = updateIotFunctionValue(functionValue);
                // 更新失败 则新增
                if (up <= 0) {
                    insertIotFunctionValue(functionValue);
                }
            }

            res = 1;
        }catch (Exception e){
            e.printStackTrace();
            res = -1;
        }
        return res;
    }

    private static final String FOREIGN_KEY_IDENTIFY =  "functionValue";

    /**
     * 通过外键值查找本实体，如果查找到则说明本实体关联了外键对应的实体。
     *
     * @param foreignKey      ： 外键名称(用于区分一个表中有多个外键的情况)
     * @param foreignKeyValue ： 本实体的外键值
     * @return
     */
    @Override
    public LinkModel findByForeignKey(String foreignKey, Long foreignKeyValue)
    {
        if (!FOREIGN_KEY_IDENTIFY.equals(foreignKey))
        {
            return null;
        }

        IotFunctionValue iotFunctionValue = new IotFunctionValue();
        iotFunctionValue.setFunctionKey(foreignKeyValue);

        List<IotFunctionValue> iotFunctionValues = selectIotFunctionValueList(iotFunctionValue);

        if (iotFunctionValues == null || iotFunctionValues.isEmpty())
        {
            return null;
        }

        LinkModel linkModel = new LinkModel();

        linkModel.setCount(iotFunctionValues.size());
        linkModel.setDescription("已被功能值关联");

        return linkModel;
    }

    /**
     * 根据外键删除所有关联数据
     *
     * @param foreignKey      ： 本实体外键属性
     * @param foreignKeyValue ： 本实体的外键值
     * @return
     */
    @Override
    @Transactional
    public boolean deleteAllByForeignKey(String foreignKey, Long foreignKeyValue)
    {

        if (!FOREIGN_KEY_IDENTIFY.equals(foreignKey))
        {
            return true;
        }

        IotFunctionValue iotFunctionValue = new IotFunctionValue();
        iotFunctionValue.setFunctionKey(foreignKeyValue);

        List<IotFunctionValue> iotFunctionValues = selectIotFunctionValueList(iotFunctionValue);

        if (iotFunctionValues == null || iotFunctionValues.isEmpty())
        {
            return false;
        }

        iotFunctionValues.forEach(item -> deleteIotFunctionValueById(item.getId()));

        return true;
    }

    /**
     * 如果实体存在外键关联，则向外该键所指的实体服务注册外键，从而建立关联链关系。
     */
    @Override
    public void registerForeignKey()
    {
        associatedService.registerForeignKey(this, FOREIGN_KEY_IDENTIFY);
    }
}

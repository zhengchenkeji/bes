package com.ruoyi.inspection.task;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.deviceSynchronization.mapper.AthenaBesTimeTaskSyncSbMapper;
import com.ruoyi.efounder.JEnterprise.Cache.ControllerCache;
import com.ruoyi.efounder.JEnterprise.Cache.DeviceTreeCache;
import com.ruoyi.efounder.JEnterprise.Cache.ModuleAndPointCache;
import com.ruoyi.efounder.JEnterprise.commhandler.MsgSubPubHandler;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.Controller;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.DeviceTree;
import com.ruoyi.efounder.JEnterprise.domain.deviceTree.Point;
import com.ruoyi.inspection.domain.Inspection;
import com.ruoyi.quartz.domain.SysJob;
import com.zc.common.constant.DeviceTreeConstants;
import com.zc.common.constant.RedisKeyConstants;
import com.zc.common.constant.WebSocketEvent;
import com.zc.common.core.model.DataReception;
import com.zc.common.core.websocket.WebSocketService;
import com.zc.connect.business.dto.ReceiveMsg;
import com.zc.connect.business.dto.ddc.ControllerDataDDC;
import com.zc.connect.business.dto.ddc.PointParamDDC;
import com.zc.connect.business.handler.SendMsgHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * 定时巡检
 *
 * @author qindehua
 * @date 2023/02/06
 */
@Component("inspectionTask")
public class InspectionTask {

    private static final Logger log = LoggerFactory.getLogger(InspectionTask.class);

    /**
     * 会将当前的执行任务的job信息传送过来
     */
    private SysJob job;
    /**
     * 计划关联的设备
     */
    @Resource
    private AthenaBesTimeTaskSyncSbMapper athenaBesTimeTaskSyncsbMapper;
    @Resource
    private RedisCache redisCache;
    @Resource
    private DeviceTreeCache deviceTreeCache;
    @Resource
    private ModuleAndPointCache moduleAndPointCache;
    @Resource
    private ControllerCache controllerCache;


    /**
     * 定时巡检
     *
     * @Author qindehua
     * @Date 2023/02/06
     **/
    public void inspection() {
        //获取点位信息
        List<String> pointList = athenaBesTimeTaskSyncsbMapper.selectNodeIdBySyncId(job.getJobId().toString());
        for (String s : pointList) {
            //获取设备树节点
            DeviceTree deviceTree = deviceTreeCache.getDeviceTreeByDeviceTreeId(Long.parseLong(s));
            if (deviceTree.getDeviceTreeStatus()==0){
                log.error("名称为:"+deviceTree.getSysName()+"的点位已离线！");
                continue;
            }
            //进行下位机下发操作
            getDataInfoParam(Long.valueOf(deviceTree.getDeviceTreeId()), deviceTree.getDeviceNodeId());
        }
    }

    /**
     * 检查状态
     *
     * @Author qindehua
     * @Date 2023/02/06
     **/
    public void checkStatus() {
        Inspection inspection=redisCache.getCacheMapValue(RedisKeyConstants.BES_Scheduled_Task_Inspection,job.getJobId());
        /****如果下位机返回错误信息  则进行控制器数据同步****/
        if (1==inspection.getState()){
            //同步控制器
            //获取当前DDC的属性信息
            Controller controller = controllerCache.getControllerByDeviceTreeId(inspection.getControllerTreeId());
            if (controller == null) {
              log.error(inspection.getControllerTreeId()+",DDC控制器为空！");
            }
            String sysName = controller.getSysName();      //系统名称
            String alias = controller.getAlias();        //别名
            String description = controller.getDescription();  //描述
            String location = controller.getLocation();     //安装位置
            String zone = controller.getZone();         //归属区域
            Integer id = controller.getId();           //控制器的ID,必须唯一
            Integer active = controller.getActive();       //是否启用0：不使能、1：使能 控制器的使能状态，只有使能时才会正常工作，才会与下位机通信
            String serverIp = controller.getServerIp();     //服务器ip
            String ip = controller.getIp();           //主机ip
            Integer serverPort = controller.getServerPort();   //服务器端口
            String gateWay = controller.getGateWay();      //默认网关
            String mask = controller.getMask();         //子网掩码

            if (!StringUtils.hasText(ip) || "...".equals(ip)) {
                log.error("ip地址不能为空！");
                return;
            }

            controller.setSynchronize(true);
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Controller, (long)controller.getDeviceTreeId(), controller);

            ControllerDataDDC controllerData = new ControllerDataDDC();
            controllerData.setName(sysName);
            controllerData.setAlias(alias);
            controllerData.setDescription(description);
            controllerData.setLocation(location);
            controllerData.setZone(zone);
            controllerData.setId(id);
            controllerData.setActive(active);
            controllerData.setIp(ip);
            controllerData.setGateWay(gateWay);
            controllerData.setMask(mask);
            controllerData.setServerIP(serverIp);
            controllerData.setServerPort(Integer.valueOf(serverPort));
            // 同步数据到下位机
            boolean sendState = SendMsgHandler.setControllerDDC(controller.getIp(), controllerData);
            if (!sendState) {
               log.error("IP为:"+controller.getIp()+"的控制器,同步失败!");
               return;
            }
        }
    }



    /**
     * 获得点位数据信息参数
     *
     * @param deviceTreeId 设备树id
     * @param type         类型
     * @Author qindehua
     * @Date 2023/02/06
     **/
    private void getDataInfoParam(Long deviceTreeId, Integer type) {
        //获取控制器信息 数据校验
        DataReception dataReception = validation(deviceTreeId, type);
        if (!dataReception.getState()) {
            log.error(dataReception.getMsg());
            return;
        }
        Controller controller = (Controller) dataReception.getData();
        String channelId = controller.getIp();
        //虚点
        if (type.equals(DeviceTreeConstants.BES_VPOINT)) {
            Point pointMap = moduleAndPointCache.getPointByDeviceId(deviceTreeId);
            boolean sendState = SendMsgHandler.getPointParamDDC(channelId, pointMap.getEquipmentId());
            if (!sendState) {
                log.error("获取虚点下位机数据失败!");
                return;
            }
        }
        //逻辑点
        else if (type.equals(DeviceTreeConstants.BES_AI)
                || type.equals(DeviceTreeConstants.BES_AO)
                || type.equals(DeviceTreeConstants.BES_DI)
                || type.equals(DeviceTreeConstants.BES_DO)){
            Point pointMap = moduleAndPointCache.getPointByDeviceId(deviceTreeId);
            boolean sendState = SendMsgHandler.getPointParamDDC(channelId, pointMap.getEquipmentId());
            if (!sendState) {
                log.error("获取模块点下位机数据失败!");
                return;
            }
        }
        //将数据存入缓存
        redisCache.setCacheMapValue(RedisKeyConstants.BES_Scheduled_Task_Inspection,job.getJobId(),new Inspection(deviceTreeId,Long.valueOf(controller.getDeviceTreeId()),channelId,0));

    }

    /**
     * 获取一个点位配置参数
     *
     * @param msg 消息
     * @Author qindehua
     * @Date 2023/02/06
     **/
    public void pointParamGetDDC(ReceiveMsg<PointParamDDC> msg) {
        if (msg.getCode()==0){

        }else {

        }
        Integer index = msg.getIndex();
        String ip = msg.getIp();

        if (null == index || !StringUtils.hasText(ip)) {
            log.error("获取一个逻辑点的所有配置参数回调，index 不存在，或者 ip 不存在");
            return;
        }
    }


    /**
     * 验证
     *
     * @return {@code DataReception }
     * @Author gaojikun
     * @Date 2022/09/29
     **/
    private DataReception validation(Long deviceTreeId, Integer type) {
        //判断数据是否为空
        if (deviceTreeId == null || type == null) {
            return new DataReception(true, "参数错误!");
        }
        //获取当前节点所属控制器
        List<Controller> controllerId = new ArrayList<>();
        recursive(deviceTreeId, controllerId);
        if (controllerId.isEmpty()) {
            return new DataReception(false, "控制器缓存信息不存在!");
        }
        String channelId = controllerId.get(0).getIp();
        //判断channelID 地址
        if (!StringUtils.hasText(channelId)) {
            return new DataReception(true, "无效的 channelID 地址!");
        }
        return new DataReception(true, controllerId.get(0));
    }

    /**
     * 递归
     *
     * @Author qindehua
     * @Date 2022/09/27
     **/
    private void recursive(Long treeId, List<Controller> controller) {
        DeviceTree tree = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree, treeId);
        /**数据为空时 结束递归*/
        if (tree == null) {
            return;
        }
        if (tree.getDeviceNodeId() == DeviceTreeConstants.BES_DDCNODE || //DDC
                tree.getDeviceNodeId() == DeviceTreeConstants.BES_ILLUMINE //照明
        ) {
            controller.add(
                    redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Controller,
                            (long) tree.getDeviceTreeId()));
            return;
        }
        recursive((long) tree.getDeviceTreeFatherId(), controller);
    }


}

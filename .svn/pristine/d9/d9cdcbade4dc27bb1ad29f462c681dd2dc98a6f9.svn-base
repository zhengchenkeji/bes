package com.ruoyi.deviceManagement.moduleType.controller;

import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.deviceManagement.modulePoint.mapper.ModulePointMapper;
import com.ruoyi.deviceManagement.moduleType.domain.ModuleType;
import com.ruoyi.deviceManagement.moduleType.service.ModuleTypeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * 模块类型定义Controller
 *
 * @author ruoyi
 * @date 2022-09-06
 */
@RestController
@RequestMapping("/basicData/moduleType")
public class ModuleTypeController extends BaseController
{
    @Autowired
    private ModuleTypeService moduleTypeService;
    @Autowired
    private ModulePointMapper modulePointMapper;


    /**
     * 查询模块类型定义列表
     */
    @PreAuthorize("@ss.hasPermi('basicData:moduleType:list')")
    @GetMapping("/list")
    public TableDataInfo list(ModuleType moduleType)
    {
        startPage();
        List<ModuleType> list = moduleTypeService.selectModuleTypeList(moduleType);
        return getDataTable(list);
    }

    /**
     * 导出模块类型定义列表
     */
    @PreAuthorize("@ss.hasPermi('basicData:moduleType:export')")
    @Log(title = "模块类型定义", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ModuleType moduleType)
    {
        List<ModuleType> list = moduleTypeService.selectModuleTypeList(moduleType);
        ExcelUtil<ModuleType> util = new ExcelUtil<>(ModuleType.class);
        util.exportExcel(response, list, "模块类型定义数据");
    }

    /**
     * 获取模块类型定义详细信息
     */
    @PreAuthorize("@ss.hasPermi('basicData:moduleType:query')")
    @GetMapping(value = "/{id}")
    public AjaxResult getInfo(@PathVariable("id") Long id)
    {
        return AjaxResult.success(moduleTypeService.selectModuleTypeById(id));
    }

    /**
     * 新增模块类型定义
     */
    @PreAuthorize("@ss.hasPermi('basicData:moduleType:add')")
    @Log(title = "模块类型定义", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ModuleType moduleType)
    {
        return moduleTypeService.insertModuleType(moduleType);
    }

    /**
     * 修改模块类型定义
     */
    @PreAuthorize("@ss.hasPermi('basicData:moduleType:edit')")
    @Log(title = "模块类型定义", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ModuleType moduleType)
    {
        return moduleTypeService.updateModuleType(moduleType);
    }

    /**
     * 删除模块类型定义
     */
    @PreAuthorize("@ss.hasPermi('basicData:moduleType:remove')")
    @Log(title = "模块类型定义", businessType = BusinessType.DELETE)
    @DeleteMapping("/{ids}")
    public AjaxResult remove(@PathVariable Long[] ids)
    {
        return moduleTypeService.deleteModuleTypeByIds(ids);
    }


    /**
     * 查询所有点类型
     */
    @GetMapping("/listPoint")
    public AjaxResult listPoint()
    {
        List<Map<String,Object>> tree = modulePointMapper.selectAllModulePointList();
        return AjaxResult.success(tree);
    }

    /**
     * 查询所有模块类型
     */
    @GetMapping("/listModuleType")
    public List<ModuleType> listModuleType()
    {
        List<ModuleType> list = moduleTypeService.selectModuleTypeList(null);
        return list;
    }
}

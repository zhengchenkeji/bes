package com.ruoyi.deviceManagement.modulePoint.service.impl;

import java.util.List;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.deviceManagement.modulePoint.domain.ModulePoint;
import com.ruoyi.deviceManagement.modulePoint.mapper.ModulePointMapper;
import com.ruoyi.deviceManagement.modulePoint.service.ModulePointService;
import com.ruoyi.deviceManagement.moduleType.domain.ModuleType;
import com.ruoyi.deviceManagement.moduleType.mapper.ModuleTypeMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static com.ruoyi.common.core.domain.AjaxResult.error;
import static com.ruoyi.common.core.domain.AjaxResult.success;

/**
 * 模块点类型定义Service业务层处理
 *
 * @author ruoyi
 * @date 2022-09-06
 */
@Service
public class ModulePointServiceImpl implements ModulePointService {
    @Autowired
    private ModulePointMapper moduleTypeMapper;

    @Autowired
    private ModuleTypeMapper moduleTypeMapperO;


    /**
     * 查询模块点类型定义
     *
     * @param id 模块点类型定义主键
     * @return 模块点类型定义
     */
    @Override
    public ModulePoint selectModulePointById(Long id) {
        return moduleTypeMapper.selectModulePointById(id);
    }

    /**
     * 查询模块点类型定义列表
     *
     * @param modulePoint 模块点类型定义
     * @return 模块点类型定义
     */
    @Override
    public List<ModulePoint> selectModulePointList(ModulePoint modulePoint) {
        return moduleTypeMapper.selectModulePointList(modulePoint);
    }

    /**
     * 新增模块点类型定义
     *
     * @param modulePoint 模块点类型定义
     * @return 结果
     */
    @Override
    public AjaxResult insertModulePoint(ModulePoint modulePoint) {
        ModulePoint modulePointCheck = moduleTypeMapper.selectModulePointCheck(modulePoint);
        if(modulePointCheck != null){
            return AjaxResult.error("模块点类型重复");
        }
        modulePoint.setCreateTime(DateUtils.getNowDate());
        boolean isAdd = moduleTypeMapper.insertModulePoint(modulePoint);
        if(!isAdd){
            return AjaxResult.error("添加失败");
        }
        return AjaxResult.success("添加成功");
    }

    /**
     * 修改模块点类型定义
     *
     * @param modulePoint 模块点类型定义
     * @return 结果
     */
    @Override
    public AjaxResult updateModulePoint(ModulePoint modulePoint) {
        ModulePoint modulePointCheck = moduleTypeMapper.selectModulePointCheck(modulePoint);
        if(modulePointCheck != null){
            return AjaxResult.error("模块点类型重复");
        }
        modulePoint.setUpdateTime(DateUtils.getNowDate());
        boolean isUpdate = moduleTypeMapper.updateModulePoint(modulePoint);
        if(!isUpdate){
            return AjaxResult.error("修改失败");
        }
        return AjaxResult.success("修改成功");
    }

    /**
     * 批量删除模块点类型定义
     *
     * @param ids 需要删除的模块点类型定义主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteModulePointByIds(Long[] ids) {
        for (Long id : ids) {
            //具有外键所关联的信息，无法删除息
            ModuleType moduleType = new ModuleType();
            moduleType.setPointSet(id + "");
            List<ModuleType> moduleTypes = moduleTypeMapperO.selectModuleTypeListByPoint(moduleType);
            if (moduleTypes.size() > 0) {
                return error("模块点类型已被模块类型关联，请先删除相关信息");
            }
        }
        boolean isDeleteModulePointByIds = moduleTypeMapper.deleteModulePointByIds(ids);
        if (isDeleteModulePointByIds) {
            return success("删除成功");
        }
        return error("删除失败");
    }

    /**
     * 删除模块点类型定义信息
     *
     * @param id 模块点类型定义主键
     * @return 结果
     */
    @Override
    public int deleteModulePointById(Long id) {
        return moduleTypeMapper.deleteModulePointById(id);
    }
}

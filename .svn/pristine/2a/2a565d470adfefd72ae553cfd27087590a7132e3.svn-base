<template>
  <div class="app-container" id="alarm">
    <!--    <audio id="audio" controls="true" autoplay="true" style="display: none;"></audio>-->
    <TextBroadcast :message="message" :alertShow="true"/>
    <el-form :model="queryParams" ref="queryForm" size="small" :inline="true" v-show="showSearch" label-width="100px">
      <el-form-item label="告警名称" prop="name">
        <el-input v-model="queryParams.name" placeholder="请输入告警名称" clearable @keyup.enter.native="handleQuery"/>
      </el-form-item>
      <el-form-item label="告警使能" prop="active">
        <el-select v-model="queryParams.active" placeholder="请选择告警使能 " clearable>
          <el-option v-for="dict in dict.type.athena_active" :key="dict.value" :label="dict.label" :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item label="策略类型" prop="deviceType">
        <el-select v-model="queryParams.deviceType" placeholder="请选择告警策略类型" clearable>
          <el-option v-for="dict in dict.type.alarm_type" :key="dict.value" :label="dict.label" :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item label="告警等级" prop="level">
        <el-select v-model="queryParams.level" placeholder="请选择告警等级" clearable>
          <el-option v-for="dict in dict.type.alarm_level" :key="dict.value" :label="dict.label" :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item label="消息通知" prop="isSendInform">
        <el-select v-model="queryParams.isSendInform" placeholder="请选择是否发送消息通知" clearable>
          <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                     :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item label="告警播报" prop="alarmSound">
        <el-select v-model="queryParams.alarmSound" placeholder="请选择告警播报" clearable>
          <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                     :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item label="是否发送邮件" prop="sendEmail">
        <el-select v-model="queryParams.sendEmail" placeholder="请选择发送邮件" clearable>
          <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                     :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item label="是否发送短信" prop="textSb">
        <el-select v-model="queryParams.textSb" placeholder="请选择发送短信  " clearable>
          <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                     :value="dict.value"/>
        </el-select>
      </el-form-item>

      <el-form-item label="通知类型" prop="informType">
        <el-select v-model="queryParams.informType" placeholder="请选择通知类型" clearable>
          <el-option v-for="dict in dict.type.alarm_notice_type" :key="dict.value" :label="dict.label"
                     :value="dict.value"/>
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
        <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
      </el-form-item>
    </el-form>
    <el-row :gutter="10" class="mb8">
      <el-col :span="1.5">
        <el-button type="primary" plain icon="el-icon-plus" size="mini" @click="handleAdd"
                   v-hasPermi="['alarmTactics:alarmTactics:add']">新增
        </el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button type="success" plain icon="el-icon-edit" size="mini" :disabled="single" @click="handleUpdate"
                   v-hasPermi="['alarmTactics:alarmTactics:edit']">修改
        </el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button type="danger" plain icon="el-icon-delete" size="mini" :disabled="multiple" @click="handleDelete"
                   v-hasPermi="['alarmTactics:alarmTactics:remove']">删除
        </el-button>
      </el-col>
      <el-col :span="1.5">
        <el-button type="warning" plain icon="el-icon-download" size="mini" @click="handleExport"
                   v-hasPermi="['alarmTactics:alarmTactics:export']">导出
        </el-button>
      </el-col>
      <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
    </el-row>

    <el-table v-loading="loading" :data="alarmTacticsList" style="overflow:auto;height: 583px;"
              @selection-change="handleSelectionChange">
      <el-table-column type="selection" width="55" align="center"/>
      <!-- <el-table-column label="主键" align="center" prop="id" /> -->
      <el-table-column label="告警名称" align="center" prop="name"/>
      <el-table-column label="告警使能 " align="center" prop="active">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.athena_active" :value="scope.row.active"/>
        </template>
      </el-table-column>
      <el-table-column label="告警等级" align="center" prop="level">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.alarm_level" :value="scope.row.level"/>
        </template>
      </el-table-column>

      <el-table-column label="所属设备" align="center" prop="deviceName"/>
      <el-table-column label="策略类型" align="center" prop="deviceType">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.alarm_type" :value="scope.row.deviceType"/>

        </template>
      </el-table-column>
      <el-table-column label="范围类型" align="center" prop="rangeType">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.alarm_range_type" :value="scope.row.rangeType"/>
        </template>
      </el-table-column>


      <el-table-column label=" 是否发送消息" align="center" prop="isSendInform">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.athena_bes_yes_no" :value="scope.row.isSendInform"/>
        </template>
      </el-table-column>
      <!-- <el-table-column label="告警播报 " align="center" prop="alarmSound">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.athena_bes_yes_no" :value="scope.row.alarmSound"/>
        </template>
      </el-table-column>
      <el-table-column label="是否发送邮件  " align="center" prop="sendEmail">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.athena_bes_yes_no" :value="scope.row.sendEmail"/>
        </template>
      </el-table-column>
      <el-table-column label="是否发送短信  " align="center" prop="textSb">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.athena_bes_yes_no" :value="scope.row.textSb"/>
        </template>
      </el-table-column>
      <el-table-column label="通知类型" align="center" prop="informType">
        <template slot-scope="scope">
          <dict-tag :options="dict.type.alarm_notice_type" :value="scope.row.informType"/>
        </template>
      </el-table-column> -->
      <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
        <template slot-scope="scope">
          <el-button size="mini" type="text" icon="el-icon-edit" @click="handleUpdate(scope.row)"
                     v-hasPermi="['alarmTactics:alarmTactics:edit']">修改
          </el-button>

          <el-button size="mini" type="text" icon="el-icon-delete" @click="handleDelete(scope.row)"
                     v-hasPermi="['alarmTactics:alarmTactics:remove']">删除
          </el-button>
          <el-button size="mini" type="text" icon="el-icon-setting" @click="settingNotifiier(scope.row)"
                     v-hasPermi="['alarmTactics:alarmTactics:edit']">关联告警接收组
          </el-button>


        </template>
      </el-table-column>
    </el-table>
    <pagination v-show="total > 0" :total="total" :page.sync="queryParams.pageNum" :limit.sync="queryParams.pageSize"
                @pagination="getList"/>
    <!--选择设备时-->
    <el-drawer size='20%' :title="drawertitle" :visible.sync="visible" direction="rtl">
      <!--      <div v-if="form.deviceType!=1">-->
      <!--支路,分户,分项-->
      <div id="tree-drawer" style="height: 600px;overflow: scroll;">

        <el-form v-if="form.deviceType != 1 && form.deviceType != 5">
          <el-form-item label="所属园区" prop="branchName">
            <el-select style="width: 180px" v-model="treeParams.parkCode" @change="treeparamsChange">
              <el-option v-for="item in parkList" :key="item.value" :label="item.label" :value="item.value"/>
            </el-select>
          </el-form-item>
          <el-form-item label="所属能源" prop="branchName">
            <el-select v-model="treeParams.energyCode" @change="treeparamsChange">
              <el-option v-for="item in energyList" :key="item.value" :label="item.label" :value="item.value"/>
            </el-select>


          </el-form-item>

          <el-form-item label="所属建筑" prop="buildingId" v-if="form.deviceType == 4">
            <el-select v-model="treeParams.buildingId" @change="byBuildingData">
              <el-option v-for="item in buildingList" :key="item.value" :label="item.label" :value="item.value"/>
            </el-select>
          </el-form-item>

        </el-form>
        <el-divider v-if="form.deviceType != 1 && form.deviceType != 5"></el-divider>

        <div v-if="form.deviceType != 5">
          <el-tree :data="treedata" :props="props" show-checkbox node-key="id" :default-expanded-keys="expandedkeys"
                   :default-checked-keys="checkedkeys" :check-strictly='true' ref="tree" @check="handleCheckChange" >
          </el-tree>
        </div>

        <div v-if="form.deviceType == 5">
          <el-tree :data="treeDataOther" :props="propsOther" show-checkbox node-key="id"
                   :default-expanded-keys="expandedkeysOther"
                   :default-checked-keys="checkedkeysOther" :check-strictly='true' ref="treeOther"
                   @check="handleCheckChangeOther">
          </el-tree>
        </div>
      </div>
      <div style="text-align: center;margin-top: 50px;">
        <el-button type="primary" @click="savetree">保存</el-button>
      </div>

    </el-drawer>

    <!-- 添加或修改告警策略对话框 -->
    <el-dialog :title="title" :visible.sync="open" :close-on-click-modal="false" width="700px" append-to-body>
      <el-form ref="form" :model="form" :rules="rules" label-width="100px">
        <el-row>
          <el-col :span="12">
            <el-form-item label="告警名称" prop="name">
              <el-input v-model="form.name" placeholder="请输入告警名称" style="width: 200px;"/>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="告警使能" prop="active">
              <el-select v-model="form.active" placeholder="请选择告警使能 " style="width: 200px;">
                <el-option v-for="dict in dict.type.athena_active" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="消息通知" prop="isSendInform">
              <el-select v-model="form.isSendInform" placeholder="请选择是否发送消息通知" style="width: 200px;">
                <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="策略类型" prop="deviceType">
              <el-select v-model="form.deviceType" placeholder="请选择告警策略类型" style="width: 200px;" @change="deviceChange"
                         clearable>
                <el-option v-for="dict in dict.type.alarm_type" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"/>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>

        <el-row v-if="form.deviceType != '' && form.deviceType != null">
          <el-col>
            <el-form-item label="所属设备" prop="deviceName">
              <el-input v-model="form.deviceName" readonly placeholder="请选择设备">
                <template slot="append">
                  <el-button type="primary" @click="selectDevice">
                    请选择设备
                    <i class="el-icon-time el-icon--right"></i>
                  </el-button>
                </template>
              </el-input>
            </el-form-item>
          </el-col>

        </el-row>

        <el-row>
          <el-col :span="12" v-if="form.deviceType == 1">
            <el-form-item label="所属采集参数" prop="electricParamsId">
              <el-select v-model="form.electricParamsId" style="width: 200px;" placeholder="请选择采集参数">
                <el-option v-for="electric in electricParamslist" :key="electric.id" :label="electric.name"
                           :value="electric.id"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12" v-if="form.deviceType == 5">
            <el-form-item label="所属数据项" prop="electricParamsId">
              <el-select v-model="form.itemDataArr" style="width: 200px;" placeholder="请选择数据项" multiple collapse-tags
                         filterable>
                <el-option v-for="electric in electricParamslist" :key="electric.id" :label="electric.name"
                           :value="electric.id"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="告警等级" prop="level">
              <el-select v-model="form.level" style="width: 200px;" placeholder="请选择告警等级">
                <el-option v-for="dict in dict.type.alarm_level" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="范围类型" prop="rangeType">
              <el-select v-model="form.rangeType" style="width: 200px;" @change="rangeTypeChange" placeholder="请选择范围类型">
                <el-option v-for="dict in dict.type.alarm_range_type" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12" v-if="form.rangeType == 2 || form.rangeType == 3">
            <el-form-item label="上限值" prop="over">
              <el-input v-model="form.over" style="width: 200px;" placeholder="请输入上限值"/>
            </el-form-item>
          </el-col>
          <el-col :span="12" v-if="form.rangeType == 2 || form.rangeType == 4">
            <el-form-item label="下限制" prop="under">
              <el-input v-model="form.under" style="width: 200px;" placeholder="请输入下限制"/>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12" v-if="form.rangeType == 1">
            <el-form-item label="准确值" prop="precise">
              <el-input v-model="form.precise" style="width: 200px;" placeholder="请输入准确值"/>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="通知类型" v-if="form.isSendInform == 1" prop="informType">
              <el-select v-model="form.informType" style="width: 200px;" placeholder="请选择通知类型">
                <el-option v-for="dict in dict.type.alarm_notice_type" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <div v-if="form.isSendInform == 1">

          <el-row>
            <el-col :span="12">
              <el-form-item label="发送短信" prop="textSb">
                <el-select v-model="form.textSb" style="width: 200px;" placeholder="请选择发送短信  ">
                  <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                             :value="parseInt(dict.value)"></el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12" v-if="form.textSb==1">
              <el-form-item label="短信配置" prop="sendEmail">
                <el-button size="mini" type="text" icon="el-icon-setting" @click="SettingNotice(1)"
                           v-hasPermi="['alarmTactics:alarmTactics:edit']">配置短信通知
                </el-button>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="12">
              <el-form-item label="发送邮件" prop="sendEmail">
                <el-select v-model="form.sendEmail" style="width: 200px;" placeholder="请选择发送邮件">
                  <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                             :value="parseInt(dict.value)"></el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12" v-if="form.sendEmail==1">
              <el-form-item label="邮箱配置" prop="sendEmail">
                <el-button size="mini" type="text" icon="el-icon-setting" @click="SettingNotice(2)"
                           v-hasPermi="['alarmTactics:alarmTactics:edit']">配置邮件通知
                </el-button>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="12">
              <el-form-item label="告警播报" prop="alarmSound">
                <el-select v-model="form.alarmSound" style="width: 200px;" placeholder="请选择告警播报 ">
                  <el-option v-for="dict in dict.type.athena_bes_yes_no" :key="dict.value" :label="dict.label"
                             :value="parseInt(dict.value)"></el-option>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12" v-if="form.alarmSound==1">
              <el-form-item label="播报配置" prop="sendEmail">
                <el-button size="mini" type="text" icon="el-icon-setting" @click="SettingNotice(3)"
                           v-hasPermi="['alarmTactics:alarmTactics:edit']">配置播报通知
                </el-button>
              </el-form-item>
            </el-col>
          </el-row>
          <!-- <el-form-item label="通知模板" prop="template">
            <el-input v-model="form.template" type="textarea" placeholder="请输入内容" />
          </el-form-item> -->
        </div>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm">确 定</el-button>
        <el-button @click="cancel">取 消</el-button>
      </div>
    </el-dialog>
    <!-- 关联告警接收组时打开 -->
    <el-dialog title="选择关联的告警接收组" :visible.sync="notifierOpen" :destroy-on-close="destroyonclose" width="700px">
      <alarmNoitifier ref="alarmNoitifier"/>
    </el-dialog>
    <!-- 配置通知时打开 -->
    <el-dialog title="配置告警通知" :visible.sync="noticeOpen" :destroy-on-close="destroyonclose" width="700px">
      <el-form ref="form2" :model="form" :rules="rules" label-width="100px">
        <el-row>
          <el-col :span="12">
            <el-form-item label="告警策略" prop="active">
              <el-input v-model="form.name" placeholder="请输入告警策略名称" :readonly="true"/>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="通知类型" prop="active">
              <el-select v-model="noticeform.noticeType" placeholder="请选择通知类型 " disabled>
                <el-option v-for="dict in dict.type.bes_notice_type" :key="dict.value" :label="dict.label"
                           :value="parseInt(dict.value)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>

        <el-row>
          <el-col :span="12">
            <el-form-item label="通知配置" prop="active">
              <el-select v-model="noticeform.noticeConfigid" placeholder="请选择告警使能 " @change="noticeConfigChange">
                <el-option v-for="item in noticeConfigList" :key="item.code" :label="item.name"
                           :value="parseInt(item.code)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="模板配置" prop="active">
              <el-select v-model="noticeform.noticeTemplateid" placeholder="请选择告警使能 ">
                <el-option v-for="item in noticeTemplateList" :key="item.code" :label="item.name"
                           :value="parseInt(item.code)"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="saveNotice">确 定</el-button>
        <el-button @click="noticeCancel">取 消</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<script>
  import {
    getToken,
    subitemTreeSelect,
    meterTreeSelect,
    meterTreeSelectOther,
    householdTreeSelect,
    branchTreeSelect,
    listAlarmTactics,
    getAlarmTactics,
    delAlarmTactics,
    addAlarmTactics,
    updateAlarmTactics,
    listmeter,
    saveorupdateTacticsLink,
    getElectricParamsDatalist,
    getElectricParamsDatalistOther,
    listType,
    listPark,
    listNoticeConfig,
    listNoticeTemplate,
    getNoticeLinkBytype
  }
    from "@/api/basicData/safetyWarning/alarmTactics/alarmTactics";
  import alarmNoitifier from './component/notifierTab.vue'
  import {deviceTreeSettings} from '@/api/basicData/deviceManagement/deviceTree/deviceTreeSettings'
  import TextBroadcast from '@/components/TextBroadcast/index.vue'
  import {
    buildingList,
  } from "@/api/basicData/energyInfo/branchConfig/config";

  export default {
    name: "AlarmTactics",
    dicts: ['alarm_range_type', 'alarm_level', 'athena_active', 'athena_bes_yes_no', 'alarm_notice_type', 'alarm_type', 'bes_notice_type'],
    components: {
      alarmNoitifier: alarmNoitifier,
      TextBroadcast: TextBroadcast
    },
    data() {
      /**下限值*/
      var checkUnderVal = (rule, value, callback) => {
        debugger
        var maxVal = this.form.over;
        var minVal = this.form.under;
        var rangeType = this.form.rangeType;
        if (rangeType == 2) {
          if (minVal >= maxVal) {
            return callback(new Error('下限值需小于上限值'))

          } else {
            /**清除*/
            this.$refs.form.clearValidate('under')
          }
        }

        return callback()

      }
      /**最大值*/
      var checkOverVal = (rule, value, callback) => {
        debugger
        var maxVal = this.form.over;
        var minVal = this.form.under;
        var rangeType = this.form.rangeType;
        if (rangeType == 2) {
          if (minVal >= maxVal) {
            return callback(new Error('上限值需大于下限值'))

          } else {
            this.$refs.form.clearValidate('over')
          }
        }
        return callback()

      }
      return {
        // 配置通知
        noticeOpen: false,
        //建筑列表
        buildingList: [],
        message: "",
        //能源列表
        energyList: [],
        //园区列表
        parkList: [],
        baidutoken: "25.ac8017e7634d8d27704ddf1572862136.315360000.1981596844.282335-28000130",
        albbtoken: "",
        searchmeter: "",
        checkList: undefined,
        checkid: "",
        checkname: "",
        templateSelection: "",
        checkedkeys: [],
        expandedkeys: [],
        drawertitle: "",//树结构名称
        visible: false,//是否展示树结构
        treedata: [],//树结构数据
        props: {
          children: 'children',
          label: 'label'
        },
        //第三方设备树
        treeDataOther: [],
        propsOther: {
          children: 'children',
          label: 'label'
        },
        checkedkeysOther: [],
        expandedkeysOther: [],

        // 遮罩层
        loading: true,
        // 策略id
        tacticsId: undefined,
        // 关闭时销毁dom 避免弹出层不重新加载。
        destroyonclose: true,
        // 选中数组
        ids: [],
        NotifierIds: [],
        checkboxids: [],
        // 非单个禁用
        single: true,
        // 非多个禁用
        multiple: true,
        // 显示搜索条件
        showSearch: true,
        // 总条数
        total: 0,
        // 告警策略表格数据
        alarmTacticsList: [],
        // 告警接收组 总条目
        notifierTotal: 0,
        // 告警接收组相关数据
        AlarmNotifierList: [],
        // 获取所有电表数据
        meterList: [],
        // 采集参数字典
        electricParamslist: [],
        // 弹出层标题
        title: "",
        // 是否显示弹出层
        open: false,
        // 是否打开关联告警接收组
        notifierOpen: false,
        treeParams: {},
        // 通知配置集合
        noticeConfigList: [],
        // 通知模板集合
        noticeTemplateList: [],
        // 保存的通知集合
        noticeList: [],
        // 查询参数
        queryParams: {
          pageNum: 1,
          pageSize: 10,
          name: null,
          active: null,
          level: null,
          isMeter: null,
          electricParamsId: null,
          meterId: null,
          alarmTypeId: null,
          rangeType: null,
          over: null,
          under: null,
          precise: null,
          isSendInform: null,
          alarmSound: null,
          sendEmail: null,
          textSb: null,
          sendVoice: null,
          template: null,
          informType: null
        },
        // 表单参数
        noticeform: {},
        form: {
          itemDataArr: [],
          itemDataId: null,
        },
        // 表单校验
        rules: {
          name: [
            {required: true, message: "告警名称不能为空", trigger: "blur"}
          ],
          active: [
            {required: true, message: "告警使能 不能为空", trigger: "change"}
          ],
          level: [
            {required: true, message: "告警等级不能为空", trigger: "change"}
          ],
          deviceType: [
            {required: true, message: "告警策略类型不能未空", trigger: "change"}
          ],
          deviceName: [
            {required: true, message: "所属电表不能为空"}
          ],
          rangeType: [
            {required: true, message: "范围类型不能为空", trigger: "change"}
          ],
          createTime: [
            {required: true, message: "创建时间不能为空", trigger: "blur"}
          ],
          isSendInform: [
            {required: true, message: "发送消息通知不能为空", trigger: "change"}
          ],
          alarmSound: [
            {required: true, message: "告警播报不能为空", trigger: "change"}
          ],
          sendEmail: [
            {required: true, message: "发送邮件不能为空", trigger: "change"}
          ],
          textSb: [
            {required: true, message: "发送短信不能为空", trigger: "change"}
          ],
          informType: [
            {required: true, message: "通知类型不能为空", trigger: "change"}
          ],
          template: [
            {required: true, message: "通知模板不能为空", trigger: "blur"}
          ],
          over: [
            {required: true, message: "上限值只能输入数字和两位小数点", pattern: /^\d+(.\d{1,2})?$/}, {validator: checkOverVal}
          ],
          under: [
            {required: true, message: "下限值只能输入数字和两位小数点", pattern: /^[0-9]+(\.[0-9]{2})?$/}, {validator: checkUnderVal}
          ],
          precise: [
            {required: true, message: "准确值只能输入数字和两位小数点", pattern: /^[0-9]+(\.[0-9]{2})?$/}
          ]
        }
      };
    },
    created() {
      this.getParkAndEnergy();
      // 初始化数据
      this.getList();
    },
    methods: {

      saveNotice() {
        // 保存时 查看是否已有当前类型的配置 如果有则替换

        // this.noticeList = this.noticeList.filter(item => item.type == this.noticeform.type)

        this.noticeList.forEach((item, index) => {
          if (item.noticeType == this.noticeform.noticeType) {
            this.noticeList.splice(index, 1);
          }
        })
        this.noticeList.push(this.noticeform);
        this.noticeOpen = false;
      },
      noticeCancel() {

        this.noticeOpen = false;
      },
      // 配置通知
      SettingNotice(type) {
        this.noticeform = {};
        this.noticeform.alarmTacticsid = this.form.id;
        this.noticeform.noticeType = type;
        listNoticeConfig(type).then(response => {
          this.noticeConfigList = response.data;
        })
        let save = false
        // 判断是否有已保存的数据
        this.noticeList.forEach((item, index) => {
          if (type == item.noticeType) {
            // 有已存储的。
            this.noticeform = item;
            this.noticeConfigChange();
            save = true;
          }
        })
        if (!save) {
          if (this.form.id != null && this.form.id != "") {
            // 从数据库查询
            let param = {
              alarmTacticsid: this.form.id,
              noticeType: type
            }
            getNoticeLinkBytype(param).then(response => {

              this.noticeform.noticeConfigid = response.data.noticeConfigid;
              this.noticeform.noticeTemplateid = response.data.noticeTemplateid;
              this.noticeConfigChange();
            })
          }
        }
        this.noticeOpen = true;
      },


      /**配置变更*/
      noticeConfigChange() {

        listNoticeTemplate(this.noticeform.noticeConfigid).then(response => {
          this.noticeTemplateList = response.data;
        })
      },
      playVideo() {
        var num = Math.round(Math.random() * 10)
        this.message = num + "播报语音！";
      },
      /**选择范围类型变更后触发*/
      rangeTypeChange() {

        if (this.form.rangeType == 1) {
          this.form.over = null;
          this.form.under = null;

        } else if (this.form.rangeType == 2) {
          this.form.precise = null;

        } else if (this.form.rangeType == 3) {
          this.form.precise = null;
          this.form.under = null;

        } else if (this.form.rangeType == 4) {
          this.form.precise = null;
          this.form.over = null;
        }


      },


      /*******建筑下拉框******/
      byBuildingData() {
        this.treeParams.code = 0
        this.treeParams.subitemId = 0
        this.selectDevice();

      },
      /**选择园区变更事件*/
      treeparamsChange() {
        console.log(this.treeParams)
        this.listType();
        this.getbuildingList();
        this.selectDevice();

      },

      /** 获取园区列表及能源列表 */
      async getParkAndEnergy() {
        this.parkList = [];

        await listPark().then(response => {
          response.forEach(item => {
            this.parkList.push({value: item.code, label: item.name})
          });
          this.treeParams.parkCode = this.parkList[0].value;
          this.listType();
          this.getbuildingList();
        });
        // this.getListData()

      },
      async listType() {
        this.energyList = [];
        const parkCode = this.parkList[0].value;
        const energytypeQuery = {
          parkCode: this.treeParams.parkCode
        };
        /**根据第一个园区获取能耗类型*/
        await listType(energytypeQuery).then(response => {
          response.data.forEach(item => {
            this.energyList.push({value: item.code, label: item.name})
          });
        });
      },

      async getbuildingList() {
        this.buildingList = [];

        await buildingList({parkCode: this.treeParams.parkCode}).then(response => {
          response.data.forEach(item => {
            this.buildingList.push({value: item.id, label: item.buildName})
          });
          if (this.buildingList.length > 0) {
            this.treeParams.buildingId = this.buildingList[0].value
          } else {
            this.treeParams.buildingId = null
          }
        })
      },

      /*第三方设备树*/
      meterTreeSelectOther() {
        meterTreeSelectOther().then(response => {
          response.data.forEach(val => {
            if (val.pId == null) {
              val.disabled = true
            }
            val.id = val.id;
            val.label = val.name;
          })
          this.treeDataOther = this.handleTree(response.data, "id", "pId");

        })
      },
      /**电表*/
      meterTreeSelect() {
        meterTreeSelect().then(response => {
          response.data.forEach(val => {
            if (!val.energyNode) {
              val.disabled = true
            }
            val.id = val.deviceTreeId;
            val.label = val.sysName;
          })
          this.treedata = this.handleTree(response.data, "deviceTreeId", "deviceTreeFatherId");

        })
      },
      /**支路*/
      branchTreeSelect(param) {
        branchTreeSelect(param).then(response => {
          this.treedata = response.data;
        })
      },
      /**分户*/
      householdTreeSelect(param) {
        householdTreeSelect(param).then(response => {
          this.treedata = response.data;
        })
      },
      /**分项*/
      subitemTreeSelect(param) {
        subitemTreeSelect(param).then(response => {
          this.treedata = response.data;
        })
      },
      /**电表*/
      /**更改选择设备类型*/
      deviceChange() {
        // this.form.deviceName=undefined;
        this.$set(this.form, 'deviceName', undefined);
        this.$set(this.form, 'deviceId', undefined);
        if (this.form.deviceType == 1) {
          this.form.electricParamsId = null;
        }
      },
      /**选择设备*/
      selectDevice() {

        if (this.form.deviceType != '' && this.form.deviceType != null && this.form.deviceType != undefined && this.form.deviceType == 5) {

          this.meterTreeSelectOther()

          this.checkedkeysOther = [];
          this.expandedkeysOther = [];
          if (this.form.deviceId != null && this.form.deviceId != "" && this.form.deviceType == 5) {
            this.checkedkeysOther.push(parseInt(this.form.deviceId));
            this.expandedkeysOther.push(parseInt(this.form.fatherId));
          }

          this.visible = true;
        } else {
          this.getParkAndEnergy();
          /**如果未选中默认选中第一个*/
          if (this.treeParams.parkCode == null) {
            if (this.form.parkcode == null) {
              this.$set(this.treeParams, 'parkCode', this.parkList[0].value);
            } else {
              this.$set(this.treeParams, 'parkCode', this.form.parkcode);
            }
          }
          if (this.treeParams.energyCode == null) {
            if (this.form.energycode == null) {
              this.$set(this.treeParams, 'energyCode', this.energyList[0].value);
            } else {
              this.$set(this.treeParams, 'energyCode', this.form.energycode);
            }
          }
          /**清空选中信息*/
          if (this.form.deviceType != '' && this.form.deviceType != null) {
            if (this.form.deviceType == 1) {
              this.meterTreeSelect()
              // this.form.electricParamsId=null;
            } else if (this.form.deviceType == 2) {
              this.branchTreeSelect(this.treeParams)
            } else if (this.form.deviceType == 3) {
              this.householdTreeSelect(this.treeParams)
            } else if (this.form.deviceType == 4) {
              this.subitemTreeSelect(this.treeParams)
            }
            this.checkedkeys = [];
            this.expandedkeys = [];
            if (this.form.deviceId != null && this.form.deviceId != "" && this.form.deviceType == 1) {
              this.checkedkeys.push(parseInt(this.form.deviceId));
              this.expandedkeys.push(parseInt(this.form.fatherId));
            }
            this.visible = true;

          }
        }
      },
      /**选择设备保存方法*/
      savetree() {
        this.electricParamslist = [];
        this.form.itemDataArr = []

        console.log(this.checkid);
        if (this.checkid == null || this.checkid == "") {
          this.$alert('当前未选择设备，无法保存！', '警告', {
            confirmButtonText: '确定',
            callback: action => {
              // this.$message({
              //   type: 'info',
              //   message: `action: ${ action }`
              // });
            }
          })
          return;
        }

        this.$set(this.form, 'deviceName', this.checkname);
        this.$set(this.form, 'deviceId', this.checkid);
        this.visible = false;
        /**判断当前选择的是不是电表*/
        if (this.form.deviceType == 1 && this.checkid != null) {
          this.getElectricParamslist(this.checkid)
        }
        if (this.form.deviceType == 5 && this.checkid != null) {
          this.getElectricParamslistOther(this.checkid)
        }
      },
      handleCheckChange(node, tree) {
        if (tree.checkedKeys.length == 0) {
          this.$refs.tree.setCheckedKeys([]);
          this.node = node;
          this.nodeisChecked = false;

        } else {
          this.$refs.tree.setCheckedKeys([]);
          this.$refs.tree.setCheckedKeys([node.id]);
          this.node = node;
          this.nodeisChecked = true;

        }
        this.checkid = node.id
        this.checkname = node.label
      },
      handleCheckChangeOther(node, treeOther) {
        if (treeOther.checkedKeys.length == 0) {
          this.$refs.treeOther.setCheckedKeys([]);
          this.node = node;
          this.nodeisChecked = false;
        } else {
          this.$refs.treeOther.setCheckedKeys([]);
          this.$refs.treeOther.setCheckedKeys([node.id]);
          this.node = node;
          this.nodeisChecked = true;

        }
        this.checkid = node.id
        this.checkname = node.label
      },
      /** 点击关联告警接收组 */
      settingNotifiier(row) {

        this.tacticsId = row.id;
        this.notifierOpen = true

        this.$nextTick(() => {
          this.$refs.alarmNoitifier.tacticsId = this.tacticsId;
          this.$refs.alarmNoitifier.getNotifierList();

        })

      },
      /** 查询告警策略列表 */
      getList() {
        this.loading = true;
        listAlarmTactics(this.queryParams).then(response => {
          this.alarmTacticsList = response.rows;
          this.total = response.total;
          this.loading = false;
        });
      },

      // 根据所选的电表获取相对应的采集参数
      getElectricParamslist(meterid) {

        const params = {
          meterid: meterid
        }

        getElectricParamsDatalist(params).then(response => {
          this.electricParamslist = response.rows;
        })
      },
      // 根据所选的设备获取相对应的数据项
      getElectricParamslistOther(id) {
        const params = {
          id: id
        }
        getElectricParamsDatalistOther(params).then(response => {
          this.electricParamslist = response.rows;
        })
      },

      // 取消按钮
      cancel() {
        this.open = false;
        this.reset();
      },
      // 表单重置
      reset() {
        this.form = {
          id: null,
          name: null,
          active: null,
          level: null,
          isMeter: null,
          electricParamsId: null,
          meterId: null,
          alarmTypeId: null,
          rangeType: null,
          over: null,
          under: null,
          precise: null,
          createTime: null,
          updateTime: null,
          isSendInform: null,
          alarmSound: null,
          sendEmail: null,
          textSb: null,
          sendVoice: null,
          template: null,
          informType: null,
          itemDataArr: [],
          itemDataId: null,
        };
        this.checkid = null;
        this.checkname = null;
        this.resetForm("form");
      },
      /** 搜索按钮操作 */
      handleQuery() {
        this.queryParams.pageNum = 1;
        this.getList();
      },
      /** 重置按钮操作 */
      resetQuery() {
        this.resetForm("queryForm");
        this.handleQuery();
      },
      // 多选框选中数据
      handleSelectionChange(selection) {
        this.ids = selection.map(item => item.id)
        this.single = selection.length !== 1
        this.multiple = !selection.length
      },
      /** 新增按钮操作 */
      handleAdd() {
        this.reset();
        this.open = true;
        this.title = "添加告警策略";
      },
      /** 修改按钮操作 */
      handleUpdate(row) {

        this.reset();
        const id = row.id || this.ids
        getAlarmTactics(id).then(response => {
          this.noticeList = [];

          //多数据项
          let itemDataArr = []
          if (response.data.itemDataId != null && response.data.itemDataId != undefined && response.data.itemDataId.length > 0) {
            itemDataArr = response.data.itemDataId.split(',')
            if (itemDataArr.length > 0) {
              itemDataArr = itemDataArr.map(item => {
                return +item;
              });
            }
          }
          response.data.itemDataArr = itemDataArr

          this.form = response.data;
          this.open = true;
          /**根据选择的电表 获取采集参数*/
          if (response.data.deviceType == 1) {
            this.getElectricParamslist(response.data.deviceId)
          }
          if (response.data.deviceType == 5) {
            this.getElectricParamslistOther(response.data.deviceId)
          }
          this.title = "修改告警策略";
          this.treeParams = {};
        });
      },
      /** 提交按钮 */
      submitForm() {
        this.form.noticeLinkList = this.noticeList;
        this.$refs["form"].validate(valid => {
          if (valid) {
            if (this.form.itemDataArr.length > 0) {
              this.form.itemDataId = this.form.itemDataArr.join(",")
            } else {
              this.form.itemDataId = ''
            }
            if (this.form.id != null) {
              updateAlarmTactics(this.form).then(response => {
                this.$modal.msgSuccess("修改成功");
                this.open = false;
                this.getList();
              });
            } else {
              addAlarmTactics(this.form).then(response => {
                this.$modal.msgSuccess("新增成功");
                this.open = false;
                this.getList();
              });
            }
          }
        });
      },
      /** 删除按钮操作 */
      handleDelete(row) {
        const ids = row.id || this.ids;
        this.$modal.confirm('是否确认删除选中的告警策略,删除告警策略时会同时删除与接收组关联信息！').then(function () {
          return delAlarmTactics(ids);
        }).then(() => {
          this.getList();
          this.$modal.msgSuccess("删除成功");
        }).catch(() => {
        });
      },
      /** 导出按钮操作 */
      handleExport() {
        this.download('safetyWarning/alarmTactics/export', {
          ...this.queryParams
        }, `告警策略.xlsx`)
      },

      // 点击确定时关键告警接收组
      saveTacticsLink(row) {
        const ids = this.NotifierIds;
        const link = {
          tacticsId: this.tacticsId,
          notifierId: ids.join(",")
        }
        saveorupdateTacticsLink(link).then(response => {
        })
      }
    }
  };
</script>
<style>
  #alarm .el-select {
    width: 150px;
  }

  #alarm .el-input {
    width: 150px;
  }

  #alarm .el-form-item__label {
    width: 150px;
  }

  #alarm .el-dialog .el-input {
    width: 200px;
  }

  #tree-drawer .el-select {
    width: 200px;
  }

  #tree-drawer .el-input {
    width: 200px;
  }

  #tree-drawer .el-form-item__label {
    width: 100px;
  }
</style>

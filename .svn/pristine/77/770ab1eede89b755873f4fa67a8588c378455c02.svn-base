<template>
  <div class="app-container">


    <!-- 中间画布 -->
    <div style="margin-left: 2vw;margin-top: 1vh">
      <!--查询条件-->
      <el-form style="position: relative" :model="queryParams" ref="queryForm" size="small" :inline="true" label-width="68px">
        <el-form-item label="园区名称" prop="name">
          <el-select v-model="queryParams.parkCode"
                     @change="parkChange(queryParams.parkCode)"
                     clearable placeholder="请选择" style="margin-bottom: 2px;width: 17vw">
            <el-option
              v-for="item in parkList"
              :key="item.code"
              :label="item.name"
              :value="item.code">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="区域" prop="code">
          <el-cascader v-model="queryParams.areaCode"
                       @change="areaChange(queryParams.areaCode)"
                       :options="areaList"
                       :props="modelTypeProps"
                       :show-all-levels="false"></el-cascader>
        </el-form-item>
        <el-form-item label="页面" prop="pageName">
          <el-select v-model="queryParams.pageCode"
                     @change="pageChange(queryParams.pageCode)"
                     clearable placeholder="请选择" style="margin-bottom: 2px;width: 17vw">
            <el-option
              v-for="item in pageList"
              :key="item.id"
              :label="item.name"
              :value="item.id">
            </el-option>
          </el-select>
        </el-form-item>
      </el-form>

    </div>
    <section style="background-color: #ebebeb">
      <designer-view ref="designerViewPageIndex" :area-id="areaId" :page-id="pageId" :keyValue="key" :page-name="viewsIndex" :ShowBack="false"/>
    </section>
    <!--<div>
      <el-row>

        &lt;!&ndash; CPU使用率 &ndash;&gt;
        <el-col :span="6" class="card-box">
          <el-card>
            <div>
              <span class="meter-title">
                <i class="el-icon-odometer"></i>
                CPU使用率
              </span>
            </div>
            <div ref="systemCpuMeter" class="meter-chart"/>
          </el-card>
        </el-col>

        &lt;!&ndash; JVM CPU使用率 &ndash;&gt;
        <el-col :span="6" class="card-box">
          <el-card>
            <div>
              <span class="meter-title">
                <i class="el-icon-odometer"></i>
                JVM CPU使用率
              </span>
            </div>
            <div ref="jvmCpuMeter" class="meter-chart"/>
          </el-card>
        </el-col>

        &lt;!&ndash; 系统内存占用 &ndash;&gt;
        <el-col :span="6" class="card-box">
          <el-card>
            <div>
              <span class="meter-title">
                <i class="el-icon-odometer"></i>
                系统内存
              </span>
            </div>
            <div ref="systemMemoryMeter" class="meter-chart"/>
          </el-card>
        </el-col>

        &lt;!&ndash; JVM内存占用 &ndash;&gt;
        <el-col :span="6" class="card-box">
          <el-card>
            <div>
              <span class="meter-title">
                <i class="el-icon-odometer"></i>
                JVM内存
              </span>
            </div>
            <div ref="jvmMemoryMeter" class="meter-chart"/>
          </el-card>
        </el-col>

      </el-row>
    </div>

    &lt;!&ndash; 设备消息 &ndash;&gt;
    <div style="margin-top: 10px">
      <el-row>
        <el-col :span="24" class="card-box">
          <el-card>
            <div style="height: 60px">
              <span>设备消息</span>
              <div style="float: right">
                <el-radio-group v-model="messageMonitorTimeDimension">
                  <el-radio-button label="day">今日</el-radio-button>
                  <el-radio-button label="week">近一周</el-radio-button>
                  <el-radio-button label="month">近一月</el-radio-button>
                  <el-radio-button label="year">近一年</el-radio-button>
                </el-radio-group>
                <el-date-picker
                  style="margin-left: 10px;"
                  v-model="messageMonitorTimePick"
                  value-format="yyyy-MM-dd HH:mm:ss"
                  type="datetimerange"
                  range-separator="至"
                  start-placeholder="开始日期"
                  end-placeholder="结束日期"
                  @change="messageMonitorDateChange"
                >
                </el-date-picker>
              </div>
            </div>
            <div>
              <div ref="messageMonitor" style="height: 415px"/>
            </div>
          </el-card>
        </el-col>
      </el-row>
    </div>-->

    <!--  TODO 暂时注释：没有响应的历史数据  -->
    <!-- JVM CPU 使用率趋势  -->
    <!-- <div style="margin-top: 10px">
      <el-row>
        <el-col :span="12" class="card-box">
          <el-card>
            <div style="height: 40px">
              <span>JVM CPU使用率趋势</span>
              <div style="float: right">
                <el-date-picker
                  v-model="cpuUsageTrend"
                  :picker-options="jvmCpuPickerOptions()"
                  value-format="yyyy-MM-dd HH:mm:ss"
                  type="datetimerange"
                  range-separator="至"
                  start-placeholder="开始日期"
                  end-placeholder="结束日期"
                  @change="jvmCpuTrendsChange"
                >
                </el-date-picker>
              </div>
            </div>
            <div ref="jvmCpuTrends" style="height: 300px"/>
          </el-card>
        </el-col>
        <el-col :span="12" class="card-box">
          <el-card>
            <div style="height: 40px">
              <span>JVM内存使用趋势</span>
              <div style="float: right">
                <el-date-picker
                  v-model="jvmUsageTrend"
                  value-format="yyyy-MM-dd HH:mm:ss"
                  type="datetimerange"
                  range-separator="至"
                  start-placeholder="开始日期"
                  end-placeholder="结束日期"
                >
                </el-date-picker>
              </div>
              <div ref="jvmMemoryTrends" style="height: 300px"/>
            </div>
          </el-card>
        </el-col>
      </el-row>
    </div>-->
  </div>
</template>

<script>
  import * as echarts from 'echarts'
  import { getDashboardData } from '@/api/dashboard'
  import { formatDate } from '@/utils'

  import designerView from "@/views/designerConfigure/views/designerView"
  import {mapState} from "vuex";
  import {setDefaultcomponentData} from "@/store/designer/snapshot";
  import {designerAreaListInfo, seleteDesignerAreaPage} from "@/api/designerConfigure/designer";
  import {getAllPark} from "@/api/electricPowerTranscription/powerData/powerData";

  export default {
    components: {designerView},
    name: 'Dashboard',
    computed: {
      ...mapState([
        'componentData',
        "curComponent",
        'isClickComponent',
        'canvasStyleData',
        'editor',
      ]),
      key() {
        return this.$route.path
      }
    },

    data() {

      return {
        // 查询参数
        queryParams: {
          parkCode: null,
          areaCode: null,
          pageCode: null
        },

        viewsIndex:'viewsIndex',
        parkList:[],//园区
        areaList:[],//区域
        pageList:[],//页面
        areaId: "1",//区域id
        pageId:"7",//页面id
        form: {},
        modelTypeProps: {
          checkStrictly: true,
          emitPath: false,
        }

      }
    },

    created() {
      //获取所有的园区
      this.getAllPark();
      // this.$store.commit('setToViewPage', true)

      // this.areaId = this.$route.query.areaId;
      // this.pageId = this.$route.query.pageId;
      // this.form.id = parseInt(this.pageId);
      // this.form.areaId = parseInt(this.areaId);

    },
    mounted() {
      // this.restore()
    },
    methods: {
      getAllPark() {
        getAllPark().then(response => {
          this.parkList = response
          if (this.parkList.length > 0) {
            this.queryParams.parkCode = this.parkList[0].code
            //获取区域树节点信息
            this.getDesignerAreaList(this.parkList[0].code);
          } else {
            this.parkCode = ''
          }
        });
      },
      //获取区域树节点信息
      getDesignerAreaList(parkCode) {
        const that = this;
        let designerArea = {};
        designerArea.parkCode = parkCode;
        designerAreaListInfo(designerArea).then(response => {
          if (response.code == 200) {
            if (response.data.length > 0) {
              for (let i = 0; i< response.data.length; i++) {
                response.data[i].value = response.data[i].id;
                response.data[i].label = response.data[i].name;
              }

              const data  = this.handleTree(response.data, "id", "parentId", "remark");
              this.queryParams.areaCode = response.data[0].value
              that.areaList = data;
              that.$nextTick(() => {
                that.areaId = that.areaList[0].id.toString();
                let form = {};
                form.areaId = that.areaId;
                //获取当前点击节点的所有的设计器页面
                this.getDesignerAreaPage(form);
              })
            } else {
              this.areaList = []
            }
          }
        })
      },

      //获取当前点击节点的所有的设计器页面
      getDesignerAreaPage(form) {
        seleteDesignerAreaPage(form).then(response => {

          if (response.code == 200) {
            if (response.data.length == 0) {
              this.pageList = [];
              this.queryParams.pageCode = null
            } else {
              this.pageList = response.data;
              this.queryParams.pageCode = response.data[0].id;

              this.pageChange(response.data[0].id);
            }
          }

        })
      },
      parkChange(data) {
        //获取区域树节点信息
        this.getDesignerAreaList(data);
      },
      areaChange(data) {

        let form = {};
        form.areaId = data;
        //获取当前点击节点的所有的设计器页面
        this.getDesignerAreaPage(form);
      },
      pageChange(data) {
        this.pageId = data;
        this.restore()
        //获取区域树节点信息
        // this.getDesignerAreaList(data);
      },
      restore() {
        this.$store.commit('setEditMode', 'preview')
        let form = {};
        form.id = this.pageId;
        form.areaId = this.areaId;
        this.getAreaDesignerPage(form, "see");
      },
//获取当前区域的设计器页面
      getAreaDesignerPage(form, param) {

        let that = this;

        let form1 = {};
        form1.id = parseInt(that.pageId);
        form1.areaId = parseInt(that.areaId);
        that.$refs.designerViewPageIndex.getAreaDesignerPage(form);
      },

    }
  }
</script>

<style lang="scss" scoped>
  ::v-deep .el-form-item--small.el-form-item {
    margin-bottom: 8px;
  }
  .app-container {
    padding: 0px !important;
  }
  .meter-chart {
    height: 200px;
  }

  .meter-title {
    font-size: 20px
  }
  ::v-deep .el-card__body {
    padding: 15px 20px 20px 20px;
  }
</style>

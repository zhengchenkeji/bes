<template>
  <div class="app-container">
    <el-row :gutter="20" class="mb20">

      <!-- 计划编排树 -->
      <el-col :span="6" :xs="24">

        <div class="head-container">
          <el-card class="wait-task-user-box-card" style="max-height: 85vh">

            <div style="max-height: 80vh;overflow-y: auto;width: 100%;min-width: 160px;">
              <el-tree
                node-key="id"
                class="filter-tree"
                :data="planConifgOptions"
                :props="defaultProps"
                :expand-on-click-node="false"
                :filter-node-method="filterNode"
                :default-expanded-keys="defaultExpandedKeys"
                :default-checked-keys="[1]"
                ref="planConifgTree"
                default-expand-all
                @node-click="handleNodeClick"
                highlight-current
              >
                <span slot-scope="{ node, data }">
                  <span class="tooltip">
                    <span style="padding-left: 10px">{{ data.name }}</span>
                  </span>
                <div v-if="node.isCurrent === true && (data.id != -1)"
                     class="operation-view">

                  <el-dropdown @command="planConfigOperation">
                    <span class="el-dropdown-link">
                      操作<i class="el-icon-arrow-down el-icon--right"></i>
                    </span>
                    <el-dropdown-menu slot="dropdown" v-if="data.id === 1 || data.id === 0">
                       <el-dropdown-item
                         v-for="(item, index) in planConfigRootButton"
                         :icon="item.icon"
                         :command="item.type">{{item.name}}</el-dropdown-item>
                    </el-dropdown-menu>

                    <el-dropdown-menu slot="dropdown" v-if="data.id != 1 && data.id != 0">
                       <el-dropdown-item
                         v-for="(item, index) in planConfigButton"
                         :icon="item.icon"
                         :command="item.type">{{item.name}}</el-dropdown-item>
                    </el-dropdown-menu>
                  </el-dropdown>
                </div>
                </span>
              </el-tree>
            </div>
          </el-card>
        </div>

        <!-- 添加或修改计划对话框 -->
        <el-dialog :title="title" :visible.sync="planConfigOpen" width="500px">
          <el-form ref="planConfigForm" :model="planConfigForm" :rules="planConfigRules" label-width="80px">
            <el-form-item label="计划名称" prop="name">
              <el-input v-model="planConfigForm.name" placeholder="请输入计划名称"/>
            </el-form-item>
          </el-form>
          <div slot="footer" class="dialog-footer">
            <el-button type="primary" @click="submitplanConfigForm">确 定</el-button>
            <el-button @click="planConfigCancel">取 消</el-button>
          </div>
        </el-dialog>
      </el-col>

      <!-- 控制/采集计划 -->
      <el-col :span="18" :xs="24">
        <el-form :model="queryParams" ref="queryForm" size="small" :inline="true" v-show="showSearch"
                 label-width="100px">
          <el-form-item label="计划名称" prop="name">
            <el-input
              v-model="queryParams.name"
              placeholder="请输入计划名称"
              clearable
              @keyup.enter.native="handleQuery"
            />
          </el-form-item>
          <el-form-item label="计划开始日期" prop="startDate">
            <el-date-picker clearable
                            v-model="queryParams.startDate"
                            type="date"
                            value-format="yyyy-MM-dd"
                            placeholder="请选择计划开始日期">
            </el-date-picker>
          </el-form-item>
          <el-form-item label="计划结束日期" prop="endDate">
            <el-date-picker clearable
                            v-model="queryParams.endDate"
                            type="date"
                            value-format="yyyy-MM-dd"
                            placeholder="请选择计划结束时间">
            </el-date-picker>
          </el-form-item>
          <el-form-item>
            <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
            <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
          </el-form-item>
        </el-form>

        <el-row :gutter="10" class="mb8"
                v-if="this.treeNodeData.type == 0">
          <el-col :span="1.5">
            <el-button
              type="primary"
              plain
              icon="el-icon-plus"
              size="mini"
              @click="handleAdd"
              v-hasPermi="['Scheduling:PlanConfig:Controller:add']"
            >新增
            </el-button>
          </el-col>
          <!--<el-col :span="1.5">
            <el-button
              type="success"
              plain
              icon="el-icon-edit"
              size="mini"
              :disabled="single"
              @click="handleUpdate"
              v-hasPermi="['Scheduling:PlanConfig:Controller:edit']"
            >修改
            </el-button>
          </el-col>
          <el-col :span="1.5">
            <el-button
              type="danger"
              plain
              icon="el-icon-delete"
              size="mini"
              :disabled="multiple"
              @click="handleDelete"
              v-hasPermi="['Scheduling:PlanConfig:Controller:remove']"
            >删除
            </el-button>
          </el-col>-->
          <el-col :span="1.5">
            <el-button
              type="warning"
              plain
              icon="el-icon-download"
              size="mini"
              @click="handleExport"
              v-hasPermi="['Scheduling:PlanConfig:Controller:export']"
            >导出
            </el-button>
          </el-col>
          <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
        </el-row>
        <!--控制计划表格-->
        <el-table v-loading="loading" :data="PlanControlList" @selection-change="handleSelectionChange"
                  style="max-height: 70vh;overflow-y: auto;"
                  v-if="this.treeNodeData.type == 0">
          <el-table-column type="expand">
            <template slot-scope="scope">
              <el-form label-position="left" inline class="demo-table-expand">
                <el-form-item label="场景名称">
                  <span>{{ scope.row.sceneControlName }}</span>
                </el-form-item>
                <el-form-item label="场景描述">
                  <span>{{ scope.row.sceneControlDescribe }}</span>
                </el-form-item>
                <el-form-item label="模式名称">
                  <span>{{ scope.row.modelControlName }}</span>
                </el-form-item>
                <el-form-item label="周掩码">
                  <span>{{ scope.row.weekMask }}</span>
                </el-form-item>
                <br/>
                <el-form-item label="关联点位">
                  <span v-for="(item,index) of scope.row.modelPoints">{{item}}<br/></span>
                </el-form-item>
              </el-form>
            </template>
          </el-table-column>
          <!--<el-table-column type="selection" width="55" align="center"/>-->
          <el-table-column label="计划名称" align="center" prop="name"/>
          <el-table-column label="计划别名" align="center" prop="alias"/>
          <el-table-column label="计划开始日期" align="center" prop="startDate" width="180">
            <template slot-scope="scope">
              <span>{{ parseTime(scope.row.startDate, '{y}-{m}-{d}') }} {{ parseTime(scope.row.startTime, '{h}:{i}:{s}') }}</span>
            </template>
          </el-table-column>
          <el-table-column label="计划结束日期" align="center" prop="endDate" width="180">
            <template slot-scope="scope">
              <span>{{ parseTime(scope.row.endDate, '{y}-{m}-{d}') }} {{ parseTime(scope.row.endTime, '{h}:{i}:{s}') }}</span>
            </template>
          </el-table-column>
          <el-table-column label="是否替代日" align="center" prop="planType">
            <template slot-scope="scope">
              <span v-if="scope.row.planType">是</span>
              <span v-else>否</span>
            </template>
          </el-table-column>
          <el-table-column label="使能状态" align="center" prop="active">
            <template slot-scope="scope">
              <el-switch
                v-model="scope.row.active"
                active-color="#2176eb"
                inactive-color="#ff4949"
                :active-value="1"
                :inactive-value="0"
                @change="swichChange($event,scope.row)">
              </el-switch>
            </template>
          </el-table-column>
          <el-table-column label="执行方式" align="center" prop="executionWay">
            <template slot-scope="scope">
              <span v-if="scope.row.executionWay == 0">按天执行</span>
              <span v-else>持续执行</span>
            </template>
          </el-table-column>
          <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
            <template slot-scope="scope">
              <el-button
                size="mini"
                type="text"
                icon="el-icon-refresh"
                @click="handleSync(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:sync']"
              >同步
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-sort"
                @click="handleContrast(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:contrast']"
              >对比
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-edit"
                @click="handleUpdate(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:edit']"
              >修改
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-delete"
                @click="handleDelete(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:remove']"
              >删除
              </el-button>
            </template>
          </el-table-column>
        </el-table>
        <!--采集计划表格-->
        <el-table v-loading="loading" :data="PlanControlList" @selection-change="handleSelectionChange"
                  style="max-height: 70vh;overflow-y: auto; " v-if="treeNodeData.type == 1">
          <el-table-column type="expand">
            <template slot-scope="scope">
              <el-form label-position="left" inline class="demo-table-expand">
                <el-form-item label="场景名称">
                  <span>{{ scope.row.sceneControlName }}</span>
                </el-form-item>
                <el-form-item label="场景描述">
                  <span>{{ scope.row.sceneControlDescribe }}</span>
                </el-form-item>
                <br/>
                <el-form-item label="关联点位">
                  <span v-for="(item,index) of scope.row.modelPoints">{{item}}<br/></span>
                </el-form-item>
              </el-form>
            </template>
          </el-table-column>
          <el-table-column type="selection" width="55" align="center"/>
          <el-table-column label="计划名称" align="center" prop="name"/>
          <el-table-column label="计划别名" align="center" prop="alias"/>
          <el-table-column label="定时任务名称" align="center" prop="startDate" width="180"/>
          <el-table-column label="场景名称" align="center" prop="endDate" width="180"/>
          <el-table-column label="模式名称" align="center" prop="planType"/>
          <el-table-column label="任务类型" align="center" prop="active"/>
          <el-table-column label="cron表达式" align="center" prop="cronExpr"/>
          <el-table-column label="具体值" align="center" prop="alias"/>
          <el-table-column label="是否执行" align="center" prop="alias"/>
          <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
            <template slot-scope="scope">
              <el-button
                size="mini"
                type="text"
                icon="el-icon-refresh"
                @click="handleSync(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:sync']"
              >同步
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-sort"
                @click="handleContrast(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:contrast']"
              >对比
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-edit"
                @click="handleUpdate(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:edit']"
              >修改
              </el-button>
              <el-button
                size="mini"
                type="text"
                icon="el-icon-delete"
                @click="handleDelete(scope.row)"
                v-hasPermi="['Scheduling:PlanConfig:Controller:remove']"
              >删除
              </el-button>
            </template>
          </el-table-column>
        </el-table>
        <pagination
          v-show="total>0"
          :total="total"
          :page.sync="queryParams.pageNum"
          :limit.sync="queryParams.pageSize"
          @pagination="getList"
        />


        <!--  ************************************************************数据对比************************************** -->
        <el-dialog title="数据对比" :visible.sync="visibleData" width="900px" append-to-body @close="clearParmas()">
          <div class="box">
            <el-row>
              <el-col :span="11" style="background-color: #ebf6fb;text-align: center">
                <!-- *******************************上位机计划数据对比***************************************************** -->
                <el-button style="margin-bottom: 15px;margin-top: 10px">上位机数据</el-button>
                <el-form ref="upperFormData" :inline="true" :model="upperFormData" label-width="110px">
                  <el-form-item label="计划ID:" prop="planId">
                    <el-input v-model="upperFormData.planId" readonly/>
                  </el-form-item>
                  <el-form-item label="计划名称:" prop="planName">
                    <el-input v-model="upperFormData.planName" readonly/>
                  </el-form-item>
                  <el-form-item label="计划别名:" prop="planAlias">
                    <el-input v-model="upperFormData.planAlias" readonly/>
                  </el-form-item>
                  <el-form-item label="是否使能:" prop="active">
                    <el-input v-model="upperFormData.active == 0 ? '否' : '是'" readonly/>
                  </el-form-item>
                  <el-form-item label="场景ID:" prop="sceneId">
                    <el-input v-model="upperFormData.sceneId" readonly/>
                  </el-form-item>
                  <el-form-item label="场景名称:" prop="sceneName">
                    <el-input v-model="upperFormData.sceneName" readonly/>
                  </el-form-item>
                  <el-form-item label="模式ID:" prop="modelId">
                    <el-input v-model="upperFormData.modelId" readonly/>
                  </el-form-item>
                  <el-form-item label="模式名称:" prop="modelName">
                    <el-input v-model="upperFormData.modelName" readonly/>
                  </el-form-item>
                  <el-form-item label="计划开始日期:" prop="startDate">
                    <el-input v-model="upperFormData.startDate" readonly/>
                  </el-form-item>
                  <el-form-item label="计划开始时间:" prop="startTime">
                    <el-input v-model="upperFormData.startTime" readonly/>
                  </el-form-item>
                  <el-form-item label="计划结束日期:" prop="endDate">
                    <el-input v-model="upperFormData.endDate" readonly/>
                  </el-form-item>
                  <el-form-item label="计划结束时间:" prop="endTime">
                    <el-input v-model="upperFormData.endTime" readonly/>
                  </el-form-item>
                </el-form>
              </el-col>
              <el-col :span="2" style="height: 1px"></el-col>
              <el-col :span="11" style="background-color: #ebf6fb;text-align: center">
                <el-button style="margin-bottom: 15px;margin-top: 10px">下位机数据</el-button>
                <!-- *******************************下位机计划数据对比***************************************************** -->
                <el-form ref="underFormData" :inline="true" :model="underFormData" label-width="110px">
                  <el-form-item label="计划ID:" prop="id">
                    <el-input v-model="underFormData.id" readonly class="error_input"
                              v-if="upperFormData.planId != underFormData.id"/>
                    <el-input v-model="underFormData.id" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="计划名称:" prop="name">
                    <el-input v-model="underFormData.name" readonly class="error_input"
                              v-if="upperFormData.planName != underFormData.name"/>
                    <el-input v-model="underFormData.name" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="计划别名:" prop="alias">
                    <el-input v-model="underFormData.alias" readonly class="error_input"
                              v-if="upperFormData.planAlias != underFormData.alias"/>
                    <el-input v-model="underFormData.alias" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="是否使能:" prop="active">
                    <el-input v-model="upperFormData.active == 0 ? '否' : '是'" readonly class="error_input"
                              v-if="upperFormData.active != underFormData.active"/>
                    <el-input v-model="upperFormData.sceneActive == 0 ? '否' : '是'" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="场景ID:" prop="sceneID">
                    <el-input v-model="underFormData.sceneID" readonly class="error_input"
                              v-if="upperFormData.sceneId != underFormData.sceneID"/>
                    <el-input v-model="underFormData.sceneID" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="场景名称:" prop="sceneName">
                    <!--<el-input v-model="underFormData.sceneName" readonly class="error_input"
                              v-if="upperFormData.sceneName != underFormData.sceneName"/>
                    <el-input v-model="underFormData.sceneName" readonly v-else/>-->
                    <el-input v-model="upperFormData.sceneName" readonly/>
                  </el-form-item>
                  <el-form-item label="模式ID:" prop="modeID">
                    <el-input v-model="underFormData.modeID" readonly class="error_input"
                              v-if="upperFormData.modelId != underFormData.modeID"/>
                    <el-input v-model="underFormData.modeID" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="模式名称:" prop="modelName">
                    <!--<el-input v-model="underFormData.modelName" readonly class="error_input"
                              v-if="upperFormData.modelName != underFormData.modelName"/>
                    <el-input v-model="underFormData.modelName" readonly v-else/>-->
                    <el-input v-model="upperFormData.modelName" readonly/>
                  </el-form-item>
                  <el-form-item label="计划开始日期:" prop="startDate">
                    <el-input v-model="underFormData.startDate" readonly class="error_input"
                              v-if="upperFormData.startDate != underFormData.startDate"/>
                    <el-input v-model="underFormData.startDate" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="计划开始时间:" prop="startTime">
                    <el-input v-model="underFormData.startTime" readonly class="error_input"
                              v-if="upperFormData.startTime != underFormData.startTime"/>
                    <el-input v-model="underFormData.startTime" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="计划结束日期:" prop="endDate">
                    <el-input v-model="underFormData.endDate" readonly class="error_input"
                              v-if="upperFormData.endDate != underFormData.endDate"/>
                    <el-input v-model="underFormData.endDate" readonly v-else/>
                  </el-form-item>
                  <el-form-item label="计划结束时间:" prop="endTime">
                    <el-input v-model="underFormData.endTime" readonly class="error_input"
                              v-if="upperFormData.endTime != underFormData.endTime"/>
                    <el-input v-model="underFormData.endTime" readonly v-else/>
                  </el-form-item>
                </el-form>

              </el-col>
            </el-row>
          </div>
        </el-dialog>
      </el-col>
      <!--添加或修改控制/采集计划对话框-->
      <el-dialog :title="title" :visible.sync="open" width="700px" append-to-body @closed="dialogClosed">
        <el-form ref="form" :model="form" :rules="rules" label-width="80px">
          <el-form-item label="计划名称" prop="name">
            <el-input v-model="form.name" placeholder="请输入计划名称"/>
          </el-form-item>
          <el-form-item label="计划别名" prop="alias">
            <el-input v-model="form.alias" placeholder="请输入计划别名"/>
          </el-form-item>
          <el-row>
            <el-col :span="12">
              <el-form-item label="使能" prop="active">
                <el-switch v-model="form.active" :active-value="1" :inactive-value="0" active-color="#13ce66"
                           inactive-color="#ff4949"/><!--0：禁止、1：使能-->
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="替代日" prop="planType">
                <el-switch v-model="form.planType" :active-value="1" :inactive-value="0" active-color="#13ce66"
                           inactive-color="#ff4949"/><!--0：禁止、1：使能-->
              </el-form-item>
            </el-col>
          </el-row>
          <el-form-item label="开始日期" prop="startDate">
            <el-date-picker clearable
                            v-model="form.startDate"
                            type="date"
                            value-format="yyyy-MM-dd"
                            placeholder="请选择计划开始日期">
            </el-date-picker>
            <el-time-picker v-model="form.startTime" value-format="yyyy-MM-dd HH:mm:ss" placeholder="请选择计划开始时间">
            </el-time-picker>
          </el-form-item>
          <el-form-item label="执行方式" prop="executionWay">
            <el-radio-group v-model="form.executionWay">
              <el-radio :label="0">按天执行</el-radio>
              <el-radio :label="1">持续执行</el-radio>
            </el-radio-group>
          </el-form-item>
          <el-form-item label="结束日期" prop="endDate">
            <el-date-picker clearable
                            v-model="form.endDate"
                            type="date"
                            value-format="yyyy-MM-dd"
                            placeholder="请选择计划结束日期">
            </el-date-picker>
            <el-time-picker v-model="form.endTime" value-format="yyyy-MM-dd HH:mm:ss" placeholder="请选择结束时间">
            </el-time-picker>
          </el-form-item>
          <el-form-item label="执行频率" prop="checked">
            <el-checkbox-group v-model="checked">
              <el-checkbox v-for="check in checkList" :label="check" :key="check" @change="handleCheckedChange">
                {{check}}
              </el-checkbox>
            </el-checkbox-group>
          </el-form-item>
          <h3>场景选择</h3>
          <el-form-item label="选择场景" prop="sceneControlId">
            <el-select v-model="form.sceneControlId" style="width: 100%" placeholder="请选择场景" @change="queryAllMode">
              <el-option
                v-for="item in sceneList"
                :key="item.id"
                :label="item.name"
                :value="item.id">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="选择模式" prop="modelControlId">
            <el-select v-model="form.modelControlId" style="width: 100%" placeholder="请选择模式">
              <el-option
                v-for="item in modelList"
                :key="item.id"
                :label="item.name"
                :value="item.id">
              </el-option>
            </el-select>
          </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button
            v-hasPermi="['Scheduling:PlanConfig:Controller:edit']"
            type="primary" @click="submitForm">确 定
          </el-button>
          <el-button @click="cancel">取 消</el-button>
        </div>
      </el-dialog>
    </el-row>
  </div>
</template>

<script>
  import {
    getAllPlanConfigListInfo,
    delPlanConfig,
    addPlanConfig,
    updatePlanConfig,
    listPlanControl,
    listPlanCollect,
    getAllSceneControlList,
    getSceneModelList,
    formaterDateTime,
    addPlanControl,
    updatePlanControl,
    getPlanControl,
    delPlanControl,
    modelPointSync,
    planPointContrast
  } from '@/api/deviceManagement/scheduling/PlanConfig'
  import Treeselect from '@riophae/vue-treeselect'
  import '@riophae/vue-treeselect/dist/vue-treeselect.css'
  import {mapState} from 'vuex'
  import {deviceTreeSettings} from '../../../../api/basicData/deviceManagement/deviceTree/deviceTreeSettings'

  export default {
    name: 'PlanControl',
    components: {Treeselect},
    data() {
      return {
        treeNodeData: {parentId: 1},
        /**********************计划树*********************/
        planConifgOptions: undefined,
        defaultExpandedKeys: [0],//默认展开的数组
        defaultProps: {
          children: 'children',
          label: 'name'
        },
        planConfigRootButton: [
          {type: 'add', icon: 'el-icon-circle-plus', name: '新增计划'}
        ],
        planConfigButton: [
          {type: 'add', icon: 'el-icon-circle-plus', name: '新增计划'},
          {type: 'update', icon: 'el-icon-edit', name: '修改计划'},
          {type: 'delete', icon: 'el-icon-remove', name: '删除计划'}
        ],
        planConfigId: null,
        planConfigOpen: false,//新增/修改计划页面
        planConfigForm: {
          id: null,
          name: null,
          parentId: null,
          type: null,
        },
        planConfigRules: {// 表单校验
          name: [
            {required: true, message: '计划名称不能为空', trigger: 'change'}
          ]
        },
        /**********************数据对比*********************/
        //数据对比框弹出
        visibleData: false,
        upperFormData: {},//上位机数据
        underFormData: {},//下位机数据
        /**********************右侧计划列表*********************/
        // 遮罩层
        loading: true,
        // 选中数组
        ids: [],
        // 非单个禁用
        single: true,
        // 非多个禁用
        multiple: true,
        // 显示搜索条件
        showSearch: true,
        // 总条数
        total: 0,
        // 控制计划表格数据
        PlanControlList: [],
        // 弹出层标题
        title: '',
        // 是否显示弹出层
        open: false,
        // 查询参数
        queryParams: {
          planId: null,
          pageNum: 1,
          pageSize: 10,
          modelControlId: null,
          name: null,
          alias: null,
          planType: null,
          active: null,
          startDate: null,
          startTime: null,
          endDate: null,
          endTime: null,
          executionWay: null,
          weekMask: null,
          collectType: null,
          interval: null,
          schedulingId: null,
          synchState: null
        },
        // 表单参数
        form: {},
        checkList: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'],//周掩码
        checked: [],
        sceneList: [],//场景
        modelList: [],//模式
        // 表单校验
        rules: {
          name: [{required: true, message: '计划名称不能为空', trigger: 'blur'}],
          alias: [{required: true, message: '计划别名不能为空', trigger: 'blur'}],
          active: [{required: true, message: '请选择使能', trigger: 'change'}],
          startDate: [{required: true, message: '请选择计划开始日期', trigger: 'change'}],
          startTime: [{required: true, message: '请选择计划开始时间', trigger: 'change'}],
          endDate: [{required: true, message: '请选择计划结束日期', trigger: 'change'}],
          endTime: [{required: true, message: '请选择计划结束时间', trigger: 'change'}],
          executionWay: [{required: true, message: '请选择执行方式', trigger: 'change'}],
          sceneControlId: [{required: true, message: '请选择场景', trigger: 'change'}],
          modelControlId: [{required: true, message: '请选择模式', trigger: 'change'}]
        }
      }
    },
    async created() {
      //获取计划树节点信息
      this.getScenarioConfigAreaList()
    },
    computed: {
      ...mapState({
        // //删除计划
        // pointAddLDC: state => state.websocket.pointAddLDC,
        //计划数据对比
        planDataGet: state => state.websocket.besPlandata,
        //照明计划数据对比
        planDataGetLDC: state => state.websocket.besPlandataLDC
      })
    },
    watch: {
      //计划数据对比
      planDataGet(data) {
        // debugger
        if (data == null) {
          return
        }
        this.underFormData = data
        this.underFormData.startDate = '20' + this.underFormData.startDateYear
          + '-' + (this.underFormData.startDateMonth < 10 ? '0' + this.underFormData.startDateMonth : this.underFormData.startDateMonth)
          + '-' + (this.underFormData.startDateDay < 10 ? '0' + this.underFormData.startDateDay : this.underFormData.startDateDay)
        this.underFormData.startTime = (this.underFormData.startTimeHour < 10 ? '0' + this.underFormData.startTimeHour : this.underFormData.startTimeHour)
          + ':' + (this.underFormData.startTimeMinute < 10 ? '0' + this.underFormData.startTimeMinute : this.underFormData.startTimeMinute)
          + ':' + (this.underFormData.startTimeSecond < 10 ? '0' + this.underFormData.startTimeSecond : this.underFormData.startTimeSecond)
        this.underFormData.endDate = '20' + this.underFormData.endDateYear
          + '-' + (this.underFormData.endDateMonth < 10 ? '0' + this.underFormData.endDateMonth : this.underFormData.endDateMonth)
          + '-' + (this.underFormData.endDateDay < 10 ? '0' + this.underFormData.endDateDay : this.underFormData.endDateDay)
        this.underFormData.endTime = (this.underFormData.endTimeHour < 10 ? '0' + this.underFormData.endTimeHour : this.underFormData.endTimeHour)
          + ':' + (this.underFormData.endTimeMinute < 10 ? '0' + this.underFormData.endTimeMinute : this.underFormData.endTimeMinute)
          + ':' + (this.underFormData.endTimeSecond < 10 ? '0' + this.underFormData.endTimeSecond : this.underFormData.endTimeSecond)

        this.$nextTick(() => {
          this.visibleData = true
        })
      },
      planDataGetLDC(data) {
        // debugger
        if (data == null) {
          return
        }
        this.underFormData = data
        this.underFormData.startDate = '20' + this.underFormData.startDateYear
          + '-' + (this.underFormData.startDateMonth < 10 ? '0' + this.underFormData.startDateMonth : this.underFormData.startDateMonth)
          + '-' + (this.underFormData.startDateDay < 10 ? '0' + this.underFormData.startDateDay : this.underFormData.startDateDay)
        this.underFormData.startTime = (this.underFormData.startTimeHour < 10 ? '0' + this.underFormData.startTimeHour : this.underFormData.startTimeHour)
          + ':' + (this.underFormData.startTimeMinute < 10 ? '0' + this.underFormData.startTimeMinute : this.underFormData.startTimeMinute)
          + ':' + (this.underFormData.startTimeSecond < 10 ? '0' + this.underFormData.startTimeSecond : this.underFormData.startTimeSecond)
        this.underFormData.endDate = '20' + this.underFormData.endDateYear
          + '-' + (this.underFormData.endDateMonth < 10 ? '0' + this.underFormData.endDateMonth : this.underFormData.endDateMonth)
          + '-' + (this.underFormData.endDateDay < 10 ? '0' + this.underFormData.endDateDay : this.underFormData.endDateDay)
        this.underFormData.endTime = (this.underFormData.endTimeHour < 10 ? '0' + this.underFormData.endTimeHour : this.underFormData.endTimeHour)
          + ':' + (this.underFormData.endTimeMinute < 10 ? '0' + this.underFormData.endTimeMinute : this.underFormData.endTimeMinute)
          + ':' + (this.underFormData.endTimeSecond < 10 ? '0' + this.underFormData.endTimeSecond : this.underFormData.endTimeSecond)

        this.$nextTick(() => {
          this.visibleData = true
        })
      }
    },
    methods: {
      /************************************************************** 左侧树 **************************************************************/
      //获取计划树节点信息
      getScenarioConfigAreaList() {
        const that = this
        getAllPlanConfigListInfo().then(response => {
          if (response.code == 200) {
            if (typeof response.data != 'undefined') {
              if (response.data.length > 0) {
                this.planConifgOptions = []
                let data = {
                  id: -1,
                  name: '计划配置',
                  children: [{id: 0, name: '控制计划', type: '0', children: []}, {
                    id: 1,
                    name: '采集计划',
                    type: '1',
                    children: []
                  }]
                }
                let controlData = []
                let collectData = []
                response.data.forEach(item => {
                  if (item.type == '0') {
                    controlData.push(item)
                  } else if (item.type == '1') {
                    collectData.push(item)
                  }
                })
                data.children[0].children = this.handleTree(controlData, 'id', 'parentId', 'type')
                data.children[1].children = this.handleTree(collectData, 'id', 'parentId', 'type')
                that.planConifgOptions.push(data)
                that.$nextTick(() => {
                  that.planConfigId = that.planConifgOptions[0].children[0].children[0].id.toString()
                  that.$refs.planConifgTree.setCurrentKey(that.planConfigId)
                  this.treeNodeData = that.$refs.planConifgTree.getCurrentNode()
                  //获取当前点击节点的所有的场景信息
                  this.getList()
                })
              }
            } else {
              this.planConifgOptions = []
              const data = {
                id: -1,
                name: '计划配置',
                children: [{id: 0, name: '控制计划', type: '0', children: []}, {
                  id: 1,
                  name: '采集计划',
                  type: '1',
                  children: []
                }]
              }
              that.planConifgOptions.push(data)
            }
          }
        })
      },
      // 筛选节点
      filterNode(value, data) {
        if (!value) return true
        return data.label.indexOf(value) !== -1
      },

      //节点单击事件
      handleNodeClick(data) {
        // debugger
        //赋值node信息
        if (this.treeNodeData.id != data.id) {
          this.treeNodeData = data
          //查询右侧场景table
          this.getList()
        }
      },
      //计划按钮操作
      planConfigOperation(command) {
        const that = this
        if (command == 'add') {//新增计划
          this.title = '新增计划'
          this.planConfigOpen = true
          this.planConfigForm.parentId = this.treeNodeData.id
          this.planConfigForm.type = this.treeNodeData.type
        } else if (command == 'update') {//修改计划
          this.title = '修改计划'
          this.planConfigForm.id = this.treeNodeData.id
          this.planConfigForm.name = this.treeNodeData.name
          this.planConfigOpen = true

        } else if (command == 'delete') {//删除计划
          this.$confirm('确认删除当前树节点 ' + this.treeNodeData.name + ' 吗?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            if (this.treeNodeData.id == 0 || this.treeNodeData.id == 1) {
              this.$modal.msgWarning('当前节点不可删除')
              return
            }
            this.ids.push(this.treeNodeData.id)
            var parentId = this.treeNodeData.parentId
            this.getChildrenIdList(this.treeNodeData)
            delPlanConfig(this.ids).then(response => {
              if (response.code == 200) {
                that.ids.length = 0
                that.$modal.msgSuccess(response.msg)
                //删除节点
                that.$refs.planConifgTree.remove(
                  that.treeNodeData
                )
                //选中父节点
                this.$nextTick(() => {
                  const nodes = that.$refs.planConifgTree.getNode(parentId)
                  that.$refs.planConifgTree.setCurrentKey(nodes)
                  this.treeNodeData = that.$refs.planConifgTree.getCurrentNode()
                  //获取当前点击节点的所有的场景信息
                  this.getList()
                })
              } else {
                that.$modal.msgWarning(response.msg)
              }
            })
          })
        }
      },
      //获取当前节点下子节点的id数组
      getChildrenIdList(data) {

        if (typeof data.children != 'undefined' && data.children != null) {
          data.children.forEach(val => {
            this.ids.push(val.id)
            this.getChildrenIdList(val)
          })

        }
      },
      //计划新增/修改
      submitplanConfigForm() {
        const that = this
        this.$refs['planConfigForm'].validate(valid => {
          if (valid) {
            this.$confirm('确认提交树节点信息吗?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              if (this.planConfigForm.id != null) {
                updatePlanConfig(this.planConfigForm).then(response => {
                  if (response.code == 200) {
                    this.$refs.planConifgTree.getNode(this.treeNodeData.id).data.name = this.planConfigForm.name
                    this.$modal.msgSuccess(response.msg)
                    this.planConfigOpen = false
                    this.planConifigReset()
                    return
                  } else {
                    this.$modal.msgWarning(response.msg)
                  }
                })
              } else {
                this.planConfigForm.parentId = this.treeNodeData.id
                addPlanConfig(this.planConfigForm).then(response => {
                  if (response.code == 200) {
                    let nodeData = {}
                    nodeData.id = response.data.id
                    nodeData.name = response.data.name
                    nodeData.parentId = response.data.parentId
                    nodeData.type = response.data.type
                    this.$refs.planConifgTree.append(
                      nodeData,
                      this.treeNodeData
                    )
                    this.$modal.msgSuccess(response.msg)
                    this.planConfigOpen = false
                    this.planConifigReset()
                    return
                  } else {
                    this.$modal.msgWarning(response.msg)
                  }
                })
              }
              this.planConfigOpen = true
            })
          }
        })
      },
      // 取消按钮
      planConfigCancel() {
        this.planConfigOpen = false
        this.planConifigReset()
      },
      // 表单重置
      planConifigReset() {
        this.planConfigForm = {
          id: null,
          name: null,
          parentId: null
        }
        this.resetForm('planConfigForm')
      },

      /************************************************************** 右侧列表 **************************************************************/

      //查询所有
      queryAllScene() {
        getAllSceneControlList().then(response => {
          this.sceneList = response.data
        })
      },
      //根据场景查询模式
      queryAllSceneModel() {
        getAllSceneControlList().then(response => {
          this.sceneList = response.data
          let query = {}
          query['sceneId'] = this.form.sceneControlId
          getSceneModelList(query).then(response => {
            this.modelList = response.data
          })
        })
      },
      //根据场景查询模式
      queryAllMode() {
        this.form.modelControlId = ''
        let query = {}
        query['sceneId'] = this.form.sceneControlId
        getSceneModelList(query).then(response => {
          this.modelList = response.data
        })
      },
      //周掩码强制渲染
      handleCheckedChange() {
        this.$forceUpdate()
      },
      /*查询控制计划列表*/
      getList() {
        this.loading = true
        this.queryParams.planId = this.treeNodeData.id
        if (this.treeNodeData.type == 0) {
          listPlanControl(this.queryParams).then(response => {
            response.rows.forEach(item => {
              item.modelPoints = item.modelPoints.split(',')
            })
            this.PlanControlList = response.rows
            this.total = response.total
            this.loading = false
          })
        } else if (this.treeNodeData.type == 1) {
          listPlanCollect(this.queryParams).then(response => {
            this.PlanControlList = response.rows
            this.total = response.total
            this.loading = false
          })
        }

      },
      // 取消按钮
      cancel() {
        this.open = false
        this.reset()
      },
      dialogClosed() {
        this.reset()
        // this.$nextTick(() => {
        //   this.$refs.form.clearValidate()
        // })
      },
      // 表单重置
      reset() {
        this.form = {
          id: null,
          modelControlId: null,
          name: null,
          alias: null,
          active: 1,
          planType: 0,
          startDate: null,
          startTime: null,
          endDate: null,
          endTime: null,
          executionWay: null,
          weekMask: null,
          sceneControlId: null,
          planId: null,
          synchState: 0,
          sceneType: null
        }
        this.resetForm('form')
      },
      //清除数据对比
      clearParmas() {
        this.underFormData = {}
      },
      /** 搜索按钮操作 */
      handleQuery() {
        if (Date.parse(this.queryParams.startDate) > Date.parse(this.queryParams.endDate)) {
          this.$message({
            message: '开始日期大于结束日期，请确认查询日期',
            type: 'warning'
          })
          return
        }
        this.queryParams.pageNum = 1
        this.getList()
      },
      /** 重置按钮操作 */
      resetQuery() {
        this.resetForm('queryForm')
        this.handleQuery()
      },
      // 多选框选中数据
      handleSelectionChange(selection) {
        this.ids = selection.map(item => item.id)
        this.single = selection.length !== 1
        this.multiple = !selection.length
      },
      /** 新增按钮操作 */
      handleAdd() {
        // this.$refs.form.clearValidate()
        this.checked = []
        if (this.treeNodeData.id == -1 || this.treeNodeData.id == 0 || this.treeNodeData.id == 1) {
          this.$modal.msgWarning('当前节点不能新增计划')
          return
        }
        this.queryAllScene()
        this.reset()
        this.form.executionWay = 0
        this.open = true
        this.title = '添加控制计划'
      },
      /*同步按钮操作*/
      handleSync(row) {
        //点位同步接口
        this.reset()
        this.form.id = row.id
        modelPointSync(this.form).then(response => {
          if (response.code == 200) {
            this.$modal.msgSuccess(response.msg)
          }
        })
      },
      /*对比按钮操作*/
      handleContrast(row) {
        this.reset()
        //查询上位机点位信息
        this.form.id = row.id
        this.form.modelControlId = row.modelControlId
        planPointContrast(this.form).then(response => {
          if (response.code == 200) {
            this.DataContrastShow(response.data)
          }
        })
      },
      DataContrastShow(data) {
        let cData = {
          planId: data.planId,//计划ID
          planName: data.planName,//计划名称
          planAlias: data.planAlias,//计划别名
          active: data.active,//计划使能
          sceneId: data.sceneId,//场景ID
          sceneName: data.sceneName,//场景名称
          modelId: data.modelId,//模式ID
          modelName: data.modelName,//模式名称
          startDate: data.startDate,//计划开始日期
          startTime: data.startTime,//计划开始时间
          endDate: data.endDate,//计划结束日期
          endTime: data.endTime//计划结束时间

        }
        this.upperFormData = cData
        // getDataInfoParam({
        //   deviceTreeId: data.treeId,
        //   type: data.nodeType
        // }).then(response => {
        //   this.$modal.msgSuccess(response.msg)
        // })
        this.visibleData = true
      },
      /** 修改按钮操作 */
      swichChange(active, item) {
        let params = {}
        params.id = item.id
        params.active = active
        updatePlanControl(params).then(response => {
          if (response.code == 200) {
            this.$modal.msgSuccess(response.msg)
            this.reset()
            this.getList()
          } else {
            this.$modal.msgWarning(response.msg)
          }
        })
      },
      handleUpdate(row) {
        this.checked = []
        this.queryAllSceneModel()
        this.reset()
        if (row.id == null && this.ids.length == 1) {
          this.form.id = this.ids[0]
        } else {
          this.form.id = row.id
        }
        getPlanControl(this.form).then(response => {
          // response.data.startTime = response.data.startData + ' ' + response.data.startTime
          // response.data.endTime = response.data.endData + ' ' + response.data.endTime
          this.form = response.data
          this.checked = []
          if (this.form.weekMask.substring(0, 1) == '1') {
            this.checked.push('周一')
          }
          if (this.form.weekMask.substring(1, 2) == '1') {
            this.checked.push('周二')
          }
          if (this.form.weekMask.substring(2, 3) == '1') {
            this.checked.push('周三')
          }
          if (this.form.weekMask.substring(3, 4) == '1') {
            this.checked.push('周四')
          }
          if (this.form.weekMask.substring(4, 5) == '1') {
            this.checked.push('周五')
          }
          if (this.form.weekMask.substring(5, 6) == '1') {
            this.checked.push('周六')
          }
          if (this.form.weekMask.substring(6, 7) == '1') {
            this.checked.push('周日')
          }
          this.open = true
          this.title = '修改控制计划'
        })
      },
      /** 提交按钮 */
      submitForm() {
        if (this.form.startTime == null || this.form.endTime == null) {
          this.$message({
            message: '请选择开始结束时间',
            type: 'warning'
          })
          return
        }
        if (Date.parse(this.form.startDate) > Date.parse(this.form.endDate)) {
          this.$message({
            message: '开始时间大于结束时间',
            type: 'warning'
          })
          return
        }
        if (Date.parse(this.form.startDate) == Date.parse(this.form.endDate) && Date.parse(this.form.startime) > Date.parse(this.form.endTime)) {
          this.$message({
            message: '开始时间大于结束时间',
            type: 'warning'
          })
          return
        }
        this.$refs['form'].validate(valid => {
          if (valid) {
            if (this.form.planType == null) {
              this.form.planType = 0
            }
            this.form.planId = this.treeNodeData.id
            this.form.sceneType = this.treeNodeData.parentId
            console.log(this.form)
            this.form.weekMask = '0000000'
            if (this.checked.indexOf('周一') >= 0) {
              this.form.weekMask = '1' + this.form.weekMask.substring(1, 7)
            }
            if (this.checked.indexOf('周二') >= 0) {
              this.form.weekMask = this.form.weekMask.substring(0, 1) + '1' + this.form.weekMask.substring(2, 7)
            }
            if (this.checked.indexOf('周三') >= 0) {
              this.form.weekMask = this.form.weekMask.substring(0, 2) + '1' + this.form.weekMask.substring(3, 7)
            }
            if (this.checked.indexOf('周四') >= 0) {
              this.form.weekMask = this.form.weekMask.substring(0, 3) + '1' + this.form.weekMask.substring(4, 7)
            }
            if (this.checked.indexOf('周五') >= 0) {
              this.form.weekMask = this.form.weekMask.substring(0, 4) + '1' + this.form.weekMask.substring(5, 7)
            }
            if (this.checked.indexOf('周六') >= 0) {
              this.form.weekMask = this.form.weekMask.substring(0, 5) + '1' + this.form.weekMask.substring(6, 7)
            }
            if (this.checked.indexOf('周日') >= 0) {
              this.form.weekMask = this.form.weekMask.substring(0, this.form.weekMask.length - 1) + '1'
            }
            let addForm = {}
            addForm = this.form
            if (this.form.id != null) {
              addForm.params = null
              updatePlanControl(addForm).then(response => {
                if (response.code == 200) {
                  this.$modal.msgSuccess(response.msg)
                  this.open = false
                  this.reset()
                  this.getList()
                  return
                }
              })
            } else {
              addPlanControl(addForm).then(response => {
                if (response.code == 200) {
                  this.$modal.msgSuccess(response.msg)
                  this.open = false
                  this.reset()
                  this.getList()
                  return
                }
              })
            }
            this.open = true
          } else {
            this.open = true
          }
        })
      },
      /** 删除按钮操作 */
      handleDelete(row) {
        const ids = row.id || this.ids
        this.$modal.confirm('是否确认删除控制计划编号为"' + ids + '"的数据项？').then(function () {
          return delPlanControl(ids)
        }).then(response => {
          this.getList()
          this.$modal.msgSuccess(response.msg)
        }).catch(() => {
        })
      },
      /** 导出按钮操作 */
      handleExport() {
        this.download('/deviceManagement/scheduling/PlanConfig/PlanControl/export', {
          ...this.queryParams
        }, `控制计划列表.xlsx`)
      }
    }
  }
</script>
<style lang="scss" scoped>
  .el-dropdown-link {
    cursor: pointer;
    color: #409EFF;
  }

  .el-icon-arrow-down {
    font-size: 12px;
  }

  .el-tree {
    display: inline-block;
    min-width: 100%;

  }

  .tooltip {
    margin-right: 5px;
    font-size: 13px;
    border-radius: 4px;
    box-sizing: border-box;
    white-space: nowrap;
    padding: 4px;
  }

  .operation-view {
    display: inline-block;
    padding: 0px 5px;
    margin-left: 5px;
    color: #777777;
  }

  .time {
    font-size: 13px;
    color: #999;
  }

  .bottom {
    margin-top: 13px;
    line-height: 12px;
  }

  .button {
    padding: 0;
    float: right;
  }

  .image {
    width: 100%;
    display: block;
  }

  .clearfix:before,
  .clearfix:after {
    display: table;
    content: "";
  }

  .clearfix:after {
    clear: both
  }

  .wait-task-user-box-card {
    height: calc(96vh - 60px - 10px);
  }

  #pane-1 .el-descriptions {
    margin-bottom: 25px;
  }

  .el-scrollbar__wrap {
    overflow-x: hidden;
  }

  .el-drawer__wrapper > > > .el-descriptions-item__cell {
    width: 50%;
  }

  .el-drawer__wrapper > > > .input-with-select .el-input__inner {
    width: 100%;
  }

  .el-drawer__wrapper > > > .input-with-select .el-input-group__append {
    width: 25%;
  }

  .theme-blue {
    .tooltip {
      margin-right: 5px;
      font-size: 13px;
      border-radius: 4px;
      box-sizing: border-box;
      white-space: nowrap;
      padding: 4px;
      color: white;
    }
  }

  .theme-white {
    .tooltip {
      margin-right: 5px;
      font-size: 13px;
      border-radius: 4px;
      box-sizing: border-box;
      white-space: nowrap;
      padding: 4px;
      color: #999;
    }
  }

  .theme-blue .text_white {
    color: white;
  }

  .theme-white .text_white {
    color: #999;
  }

  .input-with-select_title {
    margin: 15px 0;
    color: #000;
  }

  .addDom {
    width: 61%;
  }

  .attributeDropdown {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 3.35vh;
  }

  .theme-blue .addDom .el-icon-question {
    color: white;
  }

  .theme-light, .theme-dark .addDom .el-icon-question {
    color: rgb(204, 204, 204);
  }

  .attributeDropdown {
    width: 20%;
    float: left;
  }

  .attribute {
    width: 80%;
    float: left;
  }

  .cusNumber {
    padding: 0 15px;
    color: #4cbdff;
    font-size: 17px;
    font-weight: bold;
  }

  .box {
    // 必须有高度 overflow 为自动
    overflow: auto;
    height: 490px;
    padding: 0px 30px 11px 27px;

    // 滚动条的样式,宽高分别对应横竖滚动条的尺寸
    &::-webkit-scrollbar {
      width: 3px;
    }

    // 滚动条里面默认的小方块,自定义样式
    &::-webkit-scrollbar-thumb {
      background: #8798AF;
      border-radius: 2px;
    }

    // 滚动条里面的轨道
    &::-webkit-scrollbar-track {
      background: transparent;
    }
  }

  .error_input {
    ::v-deep .el-input__inner {
      border-color: red;
      color: red;
    }
  }
</style>

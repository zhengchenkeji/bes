package com.ruoyi.deviceManagement.moduleType.service.impl;

import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.redis.RedisCache;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.deviceManagement.deviceTree.domain.Module;
import com.ruoyi.deviceManagement.moduleType.domain.ModuleType;
import com.ruoyi.deviceManagement.moduleType.mapper.ModuleTypeMapper;
import com.ruoyi.deviceManagement.moduleType.service.ModuleTypeService;
import com.zc.common.constant.RedisKeyConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * 模块类型定义Service业务层处理
 *
 * @author ruoyi
 * @date 2022-09-06
 */
@Service
public class ModuleTypeServiceImpl implements ModuleTypeService {
    @Resource
    private ModuleTypeMapper moduleTypeMapper;

    @Resource
    private RedisCache redisCache;

    @PostConstruct
    public void init() {
        /**
         * 添加数据到 redis 缓存
         */
        addModuleTypeCache();
    }

    private void addModuleTypeCache() {
        // 获取全部模块类型列表数据
        List<ModuleType> modules = moduleTypeMapper.selectModuleTypeList(null);

        // 清楚 redis 缓存数据
        redisCache.deleteObject(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType);

        if (modules == null || modules.isEmpty()) {
            return;
        }

        // 添加 redis 缓存数据
        modules.forEach(val -> {
            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, val.getId(), val);
        });
    }

    /**
     * 查询模块类型定义
     *
     * @param id 模块类型定义主键
     * @return 模块类型定义
     */
    @Override
    public ModuleType selectModuleTypeById(Long id) {
        return moduleTypeMapper.selectModuleTypeById(id);
    }

    /**
     * 查询模块类型定义列表
     *
     * @param moduleType 模块类型定义
     * @return 模块类型定义
     */
    @Override
    public List<ModuleType> selectModuleTypeList(ModuleType moduleType) {
        return moduleTypeMapper.selectModuleTypeList(moduleType);
    }

    /**
     * 新增模块类型定义
     *
     * @param moduleType 模块类型定义
     * @return 结果
     */
    @Override
    public AjaxResult insertModuleType(ModuleType moduleType) {
        moduleType.setCreateTime(DateUtils.getNowDate());
        ModuleType checkModuleType = moduleTypeMapper.selectModuleTypeByCode(moduleType);
        if (checkModuleType != null) {
            return AjaxResult.error("模块型号/类型代码重复");
        }
        int insertModuleTypeNum = moduleTypeMapper.insertModuleType(moduleType);
        if (insertModuleTypeNum > 0) {

            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, moduleType.getId(), moduleType);
            return AjaxResult.success("添加成功");
        } else {
            return AjaxResult.error("添加失败");
        }
    }

    /**
     * 修改模块类型定义
     *
     * @param moduleType 模块类型定义
     * @return 结果
     */
    @Override
    public AjaxResult updateModuleType(ModuleType moduleType) {
        moduleType.setUpdateTime(DateUtils.getNowDate());
        ModuleType checkModuleType = moduleTypeMapper.selectModuleTypeByCode(moduleType);
        if (checkModuleType != null) {
            return AjaxResult.error("模块型号/类型代码重复");
        }
        int updateModuleTypeNum = moduleTypeMapper.updateModuleType(moduleType);
        if (updateModuleTypeNum > 0) {

            redisCache.setCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, moduleType.getId(), moduleType);
            return AjaxResult.success("添加成功");
        } else {
            return AjaxResult.error("添加失败");
        }
    }

    /**
     * 批量删除模块类型定义
     *
     * @param ids 需要删除的模块类型定义主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteModuleTypeByIds(Long[] ids) {
        //查询模块类型是否关联设备树
        boolean isTreeInfo = false;
        a:
        for (Long id : ids) {
            ModuleType moduleType = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, id);
            Collection moduleValues = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Module).values();
            b:
            for (Object moduleObj : moduleValues) {
                Module module = (Module) moduleObj;
                if (module.getModuleTypeId().equals(moduleType.getTypeCode())) {
                    isTreeInfo = true;
                    break a;
                }
            }
        }
        if (isTreeInfo) {
            return AjaxResult.error("模块已被设备树关联，请先删除相关设备树信息");
        }
        int delete = moduleTypeMapper.deleteModuleTypeByIds(ids);
        if (delete > 0) {
            for (int i = 0; i < ids.length; i++) {
                redisCache.delCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, ids[i]);
            }
            return AjaxResult.success("删除成功");
        }
        return AjaxResult.error("删除失败");
    }

    /**
     * 删除模块类型定义信息
     *
     * @param id 模块类型定义主键
     * @return 结果
     */
    @Override
    public AjaxResult deleteModuleTypeById(Long id) {
        //查询模块类型是否关联设备树
        boolean isTreeInfo = false;
        ModuleType moduleType = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, id);
        Collection moduleValues = redisCache.getCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_Module).values();
        for (Object moduleObj : moduleValues) {
            Module module = (Module) moduleObj;
            if (module.getModuleTypeId().equals(moduleType.getTypeCode())) {
                isTreeInfo = true;
                break;
            }
        }

        if (isTreeInfo) {
            return AjaxResult.error("模块已被设备树关联，请先删除相关设备树信息");
        }
        int delete = moduleTypeMapper.deleteModuleTypeById(id);
        if (delete > 0) {
            redisCache.delCacheMapValue(RedisKeyConstants.BES_BasicData_DeviceTree_ModuleType, id);
            return AjaxResult.success("删除成功");
        }
        return AjaxResult.error("删除失败");
    }
}

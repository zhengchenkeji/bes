<template>

  <div class="navbar" :style="sideTheme == 'theme-light' || sideTheme == 'theme-dark'?'display:flex;':''">
    <!-- 缩放按钮操作  -->
    <template v-if="sideTheme != 'theme-blue' && !topNav">
      <hamburger id="hamburger-container" :is-active="sidebar.opened" class="hamburger-container"
                 @toggleClick="toggleSideBar" v-if="!topNav"/>
    </template>
    <!-- 面包屑 -->
    <breadcrumb :style="$route.path == '/index'?'display:none;':''" id="breadcrumb-container"
                class="breadcrumb-container" v-if="!topNav && sideTheme != 'theme-blue'"/>
    <div class="right-menu">

      <TextBroadcast :alertShow=true ref="textAudio" :type="soundType" :token="soundToken" :appkey="appkey" :message="message" />

        <template v-if="device!=='mobile'">
          <screenfull :id="topNav && sideTheme == 'theme-dark' || sideTheme == 'theme-blue' ?'top_icon':'left_icon'"
                      class="right-menu-item hover-effect" :style="iconWhatColor"/>
        </template>

        <el-dropdown class="right-menu-item bell">
          <div :class="topNav && sideTheme == 'theme-dark'?'white_icon':''">
            <el-badge :value="alarmNum" :max="99" class="item bell_icon">
              <i class="el-icon-bell" :style="iconWhatColor"></i>
            </el-badge>
          </div>
          <el-dropdown-menu style="width: 650px" slot="dropdown"
                            :class="'onlyPop el-dropdown-menu el-dropdown-menu_'+sideTheme">

            <el-tabs style="width: 100%" v-model="activeName" @tab-click="handleClick">
              <el-tab-pane label="重大" name="first">
                <el-scrollbar class="scrollbar">
                  <div class="warnItem" v-for="(item,index) in dataList" :key="index">
                    <!--                  <div class="roundBg">-->
                    <!--                    <i class="el-icon-message"></i>-->
                    <!--                  </div>-->
                    <div class="description">
                      <p>报警名称:{{ item.alarmName }}</p>
                      <p>报警描述:{{ item.azwz }}</p>
                      <div class="desBottom">
                        <span>{{ item.lastTime }}</span>
                        <h5 style="cursor: pointer" @click="handlingAlarms">去处理</h5>
                      </div>
                    </div>
                  </div>
                </el-scrollbar>
              </el-tab-pane>
              <el-tab-pane label="较大" name="second">
                <el-scrollbar class="scrollbar">
                  <div class="warnItem" v-for="(item,index) in dataList" :key="index">
                    <!--                  <div class="roundBg">-->
                    <!--                    <i class="el-icon-message"></i>-->
                    <!--                  </div>-->
                    <div class="description">
                      <p>报警名称:{{ item.alarmName }}</p>
                      <p>报警描述:{{ item.azwz }}</p>
                      <div class="desBottom">
                        <span>{{ item.lastTime }}</span>
                        <h5 style="cursor: pointer" @click="handlingAlarms">去处理</h5>
                      </div>
                    </div>
                  </div>
                </el-scrollbar>
              </el-tab-pane>
              <el-tab-pane label="一般" name="third">
                <el-scrollbar class="scrollbar">
                  <div class="warnItem" v-for="(item,index) in dataList" :key="index">
                    <!--                  <div class="roundBg">-->
                    <!--                    <i class="el-icon-message"></i>-->
                    <!--                  </div>-->
                    <div class="description">
                      <p>报警名称:{{ item.alarmName }}</p>
                      <p>报警描述:{{ item.azwz }}</p>
                      <div class="desBottom">
                        <span>{{ item.lastTime }}</span>
                        <h5 style="cursor: pointer" @click="handlingAlarms">去处理</h5>
                      </div>
                    </div>
                  </div>
                </el-scrollbar>
              </el-tab-pane>
            </el-tabs>

            <!--            <el-tab-pane label="轻微" name="fourth">-->

            <!--            </el-tab-pane>-->
            <!--          </el-tabs>-->
          </el-dropdown-menu>
        </el-dropdown>

        <el-dropdown class="avatar-container right-menu-item hover-effect" trigger="click">
          <div :class="topNav && sideTheme == 'theme-dark'?'avatar-wrapper white_icon':'avatar-wrapper'">
            <img :src="avatar" class="user-avatar">
            <template v-if="sideTheme != 'theme-blue'">
              <i class="el-icon-caret-bottom"/>
            </template>
          </div>

          <el-dropdown-menu slot="dropdown">
            <router-link to="/user/profile">
              <el-dropdown-item>个人中心</el-dropdown-item>
            </router-link>
            <el-dropdown-item @click.native="setting = true">
              <span>布局设置</span>
            </el-dropdown-item>
            <el-dropdown-item divided @click.native="logout">
              <span>退出登录</span>
            </el-dropdown-item>
          </el-dropdown-menu>
        </el-dropdown>


    </div>
<!--    <audio-->
<!--      controls="controls"-->
<!--      hidden-->
<!--      src="../../../public/static/audio/alarm.mp3"-->
<!--      ref="audio"-->
<!--    ></audio>-->

  </div>
</template>

<script>
import {mapGetters, mapState} from 'vuex'
import {alarmCount, alarmInfo} from '@/api/basicData/index';
import Breadcrumb from '@/components/Breadcrumb'
// import TopNav from '@/components/TopNav'
import Hamburger from '@/components/Hamburger'
import Screenfull from '@/components/Screenfull'
import SizeSelect from '@/components/SizeSelect'
import Search from '@/components/HeaderSearch'
import RuoYiGit from '@/components/RuoYi/Git'
import RuoYiDoc from '@/components/RuoYi/Doc'
import TextBroadcast from '@/components/TextBroadcast/index'
import { type } from 'os';

export default {
  data() {
    return {
      message: "",
      activeName: 'first',
      dataList: [],
      iconWhatColor: {},
      alarmNum: 0,
      level: 3, //优先查询重大报警
      soundType:null,
      soundToken:null,
      appkey:null
    }
  },
  components: {
    TextBroadcast,
    Breadcrumb,
    Hamburger,
    Screenfull,
    SizeSelect,
    Search,
    RuoYiGit,
    RuoYiDoc
  },
  computed: {
    ...mapGetters([
      'sidebar',
      'avatar',
      'device'
    ]),
    ...mapState({
      //报警个数
      alarmCount: state => state.websocket.alarmCount,
      //报警播报
      alarmMsg: state => state.websocket.alarmMsg,
    }),
    setting: {
      get() {
        return this.$store.state.settings.showSettings
      },
      set(val) {
        this.$store.dispatch('settings/changeSetting', {
          key: 'showSettings',
          value: val
        })
      }
    },
    topNav: {
      get() {
        return this.$store.state.settings.topNav
      }
    },
    sideTheme: {
      get() {
        return this.$store.state.settings.sideTheme
      }
    }
  },
  watch: {
    sideTheme(val) {
      this.watchTheme();
    },
    alarmCount(data) {
      if (data === null) {
        return
      }
      this.alarmNum = data
      //刷新为重大
      this.level = "3"
      this.activeName = "first"
      this.alarmInfo(this.level);
      // this.$refs.audio.currentTime = 0; //从头开始播放提示音
      // this.$refs.audio.play(); //播放提示音
      this.$store.commit('ALARM_COUNT', null)
    },
    /************报警播报 暂未完善************/
    alarmMsg(data) {
      // console.log("触发报警",data)
      var jsonObj = JSON.parse(data);

      let nowtime = this.getRealTime()

      if (!jsonObj.message) {
        return
      }
      this.soundToken=jsonObj.token;
      this.soundType=jsonObj.type;
      // this.message=jsonObj.message + " 告警时间：" + nowtime;
      this.message=jsonObj.message+"$"+Date.now();

      this.appkey=jsonObj.appkey;
      // this.$refs.textAudio.playoneAudio(jsonObj.token, jsonObj.message, jsonObj.type)

      // this.$refs.textAudio.playoneAudio(jsonObj.token, this.message, jsonObj.type)
    }
  },
  create() {
    this.watchTheme();
  },
  mounted() {
    this.alarmInfoCount();
    this.alarmInfo();
  },
  methods: {
    //格式化时间
    getRealTime() {
      let myDate = new Date();	//创建Date对象
      let Y = myDate.getFullYear();   //获取当前完整年份
      let M = myDate.getMonth() + 1;  //获取当前月份
      let D = myDate.getDate();   //获取当前日1-31
      let H = myDate.getHours();  //获取当前小时
      let i = myDate.getMinutes();    //获取当前分钟
      let s = myDate.getSeconds();    //获取当前秒数
      // 月份不足10补0
      if(M < 10){
        M = '0' + M;
      }
      // 日不足10补0
      if(D < 10){
        D = '0' + D;
      }
      // 小时不足10补0
      if(H < 10){
        H = '0' + H;
      }
      // 分钟不足10补0
      if(i < 10){
        i = '0' + i;
      }
      // 秒数不足10补0
      if(s < 10){
        s = '0' +s;
      }
      // 拼接日期分隔符根据自己的需要来修改
      let nowDate = Y+'-'+M+'-'+D+' '+H+':'+i+':'+s;
      return nowDate;
    },
    /*******获取报警个数***********/
    alarmInfoCount() {
      alarmCount()
        .then((data) => {
          this.alarmNum = data.data;
        })
    },
    //报警处理
    handlingAlarms() {
      this.$router.push("/basicData/safetyWarning/alarmRealtime")
    },
    //查询报警信息
    alarmInfo(level) {
      if (level) {
        this.level = level;
      }
      alarmInfo({level: this.level})
        .then((data) => {
          this.dataList = data.data;
        })
    },
    watchTheme() {
      // blue主题下，topnav自动改为false
      if (this.topNav && this.sideTheme != 'theme-blue') {
        switch (this.sideTheme) {
          case 'theme-dark':
            this.iconWhatColor = {color: '#ffffff'}
            break;
          case 'theme-light':
            this.iconWhatColor = {color: '#000'}
            break;
        }
      } else if (this.topNav == true && this.sideTheme == 'theme-blue') {
        this.iconWhatColor = {color: '#ffffff'}
      } else {
        this.iconWhatColor = {color: '#666'}
      }
    },
    toggleSideBar() {
      this.$store.dispatch('app/toggleSideBar')
    },
    async logout() {
      this.$confirm('确定注销并退出系统吗？', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        this.$store.dispatch('LogOut').then(() => {
          location.href = '/index';
        })
      }).catch(() => {
      });
    },
    handleClick(tab) {
      var str = tab._props.name
      if (str == "first") {
        this.level = "3"
      } else if (str == "second") {
        this.level = "2"
      } else {
        this.level = "1"
      }
      alarmInfo({level: this.level})
        .then((data) => {
          this.dataList = data.data;
        })
    }

  }
}
</script>

<style lang="scss" scoped>
.theme-dark .navbar {
  background-color: unset;
}

.theme-light .navbar {
  background-color: unset;
}

.theme-dark .right-menu #screenfull {
  color: white;
}

.el-dropdown-menu_theme-blue {
  background-color: rgba(0, 74, 119, 0.9);
}

.el-dropdown-menu_theme-dark {
  background-color: rgba(29, 88, 169);
}

.el-dropdown-menu_theme-light {
  background-color: rgba(255, 255, 255);

  .el-tabs__content {
    .theme-light .el-scrollbar__wrap {
      background-color: rgba(255, 255, 255);
    }

    .el-scrollbar__view {


    }
  }
}

.warnItem {
  margin-top: 15px;
  padding: 0 !important;
}

.description {
  width: 80%;

  p {
    padding-bottom: 10px !important;
  }
}

.scrollbar {
  width: 600px;
}

.el-dropdown-menu .el-tabs ::v-deep .el-tabs__content {
  width: 600px;
}

.navbar {
  height: 50px;
  overflow: hidden;
  position: relative;
  background: #fff;
  // box-shadow: 0 1px 4px rgba(0,21,41,.08);
  .hamburger-container {
    line-height: 46px;
    height: 100%;
    float: left;
    cursor: pointer;
    transition: background .3s;
    -webkit-tap-highlight-color: transparent;

    &:hover {
      background: rgba(0, 0, 0, .025)
    }
  }

  .breadcrumb-container {
    float: left;
  }

  .topmenu-container {
    position: absolute;
    left: 50px;
  }

  .errLog-container {
    display: inline-block;
    vertical-align: top;
  }

  .right-menu {
    height: 100%;
    line-height: 50px;
    width: 100%;
    display: flex;
    justify-content: end;
    align-items: center;

    &:focus {
      outline: none;
    }

    .bell {
      margin-right: 15px;
    }

    .right-menu-item {
      display: inline-block;
      padding: 0 8px;
      height: 100%;
      font-size: 18px;
      color: #5a5e66;
      vertical-align: text-bottom;


      > > > .el-dropdown-menu {
        padding: 0 25px;
        background-color: rgba(0, 61, 96);
      }

      &.hover-effect {
        cursor: pointer;
        transition: background .3s;

        &:hover {
          background: rgba(0, 0, 0, .025)
        }
      }

    }

    .avatar-container {
      margin-right: 30px;

      .avatar-wrapper {
        margin-top: 5px;
        position: relative;

        .user-avatar {
          cursor: pointer;
          width: 40px;
          height: 40px;
          border-radius: 10px;
        }

        .el-icon-caret-bottom {
          cursor: pointer;
          position: absolute;
          right: -20px;
          top: 25px;
          font-size: 12px;
        }
      }
    }

    #top_icon {
      color: white;
    }
  }
}

.theme-blue .el-icon-bell {
  color: white;
  font-size: 21px;
}

.theme-dark .el-icon-bell {
  font-size: 21px;
}

.theme-light .el-icon-bell {
  font-size: 21px;
}

.el-dropdown-menu_theme-dark {
  border: 0px;
}

.white_icon {
  color: white;
}
</style>
<style>

.bell_icon .el-badge__content {
  top: 13px !important;
  display: flex;
  align-items: center;
  color: white;
}

/* .el-icon-bell{color:white;} */
</style>


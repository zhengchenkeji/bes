<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zc.efounder.JEnterprise.mapper.deviceTree.DeviceTreeMapper">


    <resultMap type="DeviceTree" id="deviceTreeResult">
        <result property="deviceTreeId" column="device_tree_id"/>
        <result property="deviceNodeId" column="device_node_id"/>
        <result property="sysName" column="sys_name"/>
        <result property="redisSysName" column="redis_sys_name"/>
        <result property="deviceType" column="device_type"/>
        <result property="deviceTreeFatherId" column="device_tree_father_id"/>
        <result property="deviceNodeFunName" column="device_node_fun_name"/>
        <result property="deviceNodeFunType" column="device_node_fun_type"/>
        <result property="deviceTreeStatus" column="device_tree_status"/>
        <result property="url" column="url"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <resultMap type="AthenaDeviceNode" id="AthenaDeviceNodeResult">
        <result property="deviceNodeId" column="device_node_id"/>
        <result property="deviceNodeCode" column="device_node_code"/>
        <result property="deviceNodeIsNode" column="device_node_is_node"/>
        <result property="deviceNodeName" column="device_node_name"/>
        <result property="deviceNodeFunName" column="device_node_fun_name"/>
        <result property="deviceNodeFunType" column="device_node_fun_type"/>
        <result property="onlineIcon" column="online_icon"/>
        <result property="offlineIcon" column="offline_icon"/>
        <result property="url" column="url"/>
        <result property="remark" column="remark"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="selectDeviceTreeVo">
        select a.device_tree_id, a.device_node_id, a.sys_name, a.device_type, a.device_tree_father_id,a.device_tree_status,
        a.create_time,a.update_time,
        b.device_node_fun_name,b.device_node_fun_type,b.url
        from athena_bes_device_tree a,athena_bes_device_node b
    </sql>

    <sql id="selectAthenaDeviceNodeVo">
        select device_node_id,
               device_node_code,
               device_node_is_node,
               device_node_name,
               device_node_fun_name,
               device_node_fun_type,
               online_icon,
               offline_icon,
               url,
               remark,
               create_time,
               update_time
        from athena_bes_device_node
    </sql>

    <!--查询设备树缓存-->
    <select id="selectDeviceTreeByRedis" resultMap="deviceTreeResult">
        SELECT a.device_tree_id, a.device_node_id,a.sys_name AS redis_sys_name,
        COALESCE(abc.alias,abbn.nick_name,abp.nick_name,abm.alias,abb.alias,abem.alias) AS sys_name,
        a.device_type, a.device_tree_father_id,a.device_tree_status,a.park,
        a.create_time,a.update_time,
        b.device_node_fun_name,b.device_node_fun_type,b.url
        FROM athena_bes_device_tree a
        LEFT JOIN athena_bes_device_node b ON a.device_node_id = b.device_node_code
        LEFT JOIN athena_bes_controller abc ON abc.device_tree_id=a.device_tree_id
        LEFT JOIN athena_bes_build_node abbn ON abbn.tree_id=a.device_tree_id
        LEFT JOIN athena_bes_point abp ON abp.tree_id=a.device_tree_id
        LEFT JOIN athena_bes_module abm ON abm.device_tree_id=a.device_tree_id
        LEFT JOIN athena_bes_bus abb ON abb.device_tree_id=a.device_tree_id
        LEFT JOIN athena_bes_electric_meter abem ON abem.device_tree_id=a.device_tree_id
    </select>

    <!--查询根据树id查询缓存-->
    <select id="selectDeviceTreeRedisById" resultMap="deviceTreeResult" parameterType="integer">
        SELECT a.device_tree_id, a.device_node_id,a.sys_name AS redis_sys_name,
               COALESCE(abc.alias,abbn.nick_name,abp.nick_name,abm.alias,abb.alias,abem.alias) AS sys_name,
               a.device_type, a.device_tree_father_id,a.device_tree_status,a.park,
               a.create_time,a.update_time,
               b.device_node_fun_name,b.device_node_fun_type,b.url
        FROM athena_bes_device_tree a
                 LEFT JOIN athena_bes_device_node b ON a.device_node_id = b.device_node_code
                 LEFT JOIN athena_bes_controller abc ON abc.device_tree_id=a.device_tree_id
                 LEFT JOIN athena_bes_build_node abbn ON abbn.tree_id=a.device_tree_id
                 LEFT JOIN athena_bes_point abp ON abp.tree_id=a.device_tree_id
                 LEFT JOIN athena_bes_module abm ON abm.device_tree_id=a.device_tree_id
                 LEFT JOIN athena_bes_bus abb ON abb.device_tree_id=a.device_tree_id
                 LEFT JOIN athena_bes_electric_meter abem ON abem.device_tree_id=a.device_tree_id
    </select>

    <!--查询设备树列表-->
    <!--    qindehua 修改设备树展示别名-->
    <select id="selectDeviceTreeList" parameterType="deviceTree" resultMap="deviceTreeResult">
        SELECT a.device_tree_id, a.device_node_id,
        COALESCE(abc.alias,abbn.nick_name,abp.nick_name,abm.alias,abb.alias,abem.alias) AS sys_name,
        a.device_type, a.device_tree_father_id,a.device_tree_status,
        a.create_time,a.update_time,
        b.device_node_fun_name,b.device_node_fun_type,b.url
        FROM athena_bes_device_tree a
        LEFT JOIN athena_bes_device_node b ON a.device_node_id = b.device_node_code
        LEFT JOIN athena_bes_controller abc ON abc.device_tree_id=a.device_tree_id
        LEFT JOIN athena_bes_build_node abbn ON abbn.tree_id=a.device_tree_id
        LEFT JOIN athena_bes_point abp ON abp.tree_id=a.device_tree_id
        LEFT JOIN athena_bes_module abm ON abm.device_tree_id=a.device_tree_id
        LEFT JOIN athena_bes_bus abb ON abb.device_tree_id=a.device_tree_id
        LEFT JOIN athena_bes_electric_meter abem ON abem.device_tree_id=a.device_tree_id
        <where>
            1 = 1
            and a.device_tree_father_id = #{deviceTreeFatherId}
            <if test="sysName != null  and sysName != ''">and a.sys_name like concat('%', #{sysName}, '%')</if>
            and a.device_node_id = b.device_node_code
        </where>
    </select>

    <!--根据节点类型查询相应的按钮-->
    <select id="getButtonByTreeType" parameterType="AthenaDeviceNode" resultMap="AthenaDeviceNodeResult">
        <include refid="selectAthenaDeviceNodeVo"/>
        <where>
            1 = 1
            <if test="deviceNodeCode != null  and deviceNodeCode != ''">and device_node_code = #{deviceNodeCode}</if>
            <if test="deviceNodeIsNode != null ">and device_node_is_node = #{deviceNodeIsNode}</if>
            <if test="deviceNodeName != null  and deviceNodeName != ''">and device_node_name like concat('%',
                #{deviceNodeName}, '%')
            </if>
            <if test="deviceNodeFunName != null  and deviceNodeFunName != ''">and device_node_fun_name like concat('%',
                #{deviceNodeFunName}, '%')
            </if>
            <if test="deviceNodeFunType != null  and deviceNodeFunType != ''">and device_node_fun_type =
                #{deviceNodeFunType}
            </if>
            <if test="onlineIcon != null  and onlineIcon != ''">and online_icon = #{onlineIcon}</if>
            <if test="offlineIcon != null  and offlineIcon != ''">and offline_icon = #{offlineIcon}</if>
            <if test="url != null  and url != ''">and url = #{url}</if>
        </where>
    </select>

    <!--添加设备树节点-->
    <insert id="insertDeviceTreeNode">
        insert into athena_bes_device_tree
        <trim prefix="SET" suffixOverrides=",">
            device_node_id = #{deviceNodeId},
            sys_name = #{sysName},
            device_type = #{deviceType},
            device_tree_father_id = #{deviceTreeFatherId},
            create_time = #{createTime},
            <if test="park != null  and park != ''">
                park = #{park}
            </if>
        </trim>
    </insert>

    <!--根据系统名称获取创建的设备树节点-->
    <select id="selectDeviceTreeBySYSName" resultMap="deviceTreeResult">
        select * from athena_bes_device_tree where sys_name = #{sysName}
    </select>

    <!--根据树ID查询数据-->
    <select id="selectDeviceTreeByData" resultMap="deviceTreeResult" parameterType="deviceTree">
        select device_tree_id, device_node_id, sys_name, device_type,
        device_tree_father_id,create_time,update_time,device_tree_status,
        (select device_node_fun_name from athena_bes_device_node where device_node_code = #{deviceNodeId})
        device_node_fun_name,
        (select device_node_fun_type from athena_bes_device_node where device_node_code = #{deviceNodeId})
        device_node_fun_type
        from athena_bes_device_tree
        WHERE     device_tree_id = #{deviceTreeId}
    </select>
    <!--获取当前点击节点的详细信息-->
    <select id="getTreeNodeManage" resultType="java.util.Map">
        select * from ${url} where device_tree_id = #{deviceTreeId}
    </select>

    <!--根据线路树Id查询模块树Id-->
    <select id="selectModelueTree" resultMap="deviceTreeResult">
        SELECT * FROM athena_bes_device_tree where device_tree_father_id = #{treeId}
    </select>

    <select id="selectBusVpointTree" resultMap="deviceTreeResult">
        SELECT * FROM athena_bes_device_tree where device_tree_father_id = #{treeId}
    </select>

    <!--删除树节点-->
    <delete id="deleteLineTree">
        delete from athena_bes_device_tree where device_tree_id = #{treeId}
    </delete>

    <!--删除控制器-->
    <delete id="deleteControllerTree">
        delete from athena_bes_controller where device_tree_id = #{treeId}
    </delete>

    <select id="selectBranchMeterLink"  resultType="java.lang.Integer">
        select count(*) from athena_bes_branch_meter_link t1
        left join athena_bes_electric_meter t2 on t1.meter_id = t2.meter_id
        where t2.device_tree_id in
        <foreach item="item" collection="meterIdList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectControllerIP" parameterType="String" resultType="String">
        select ip from athena_bes_controller where
        device_tree_id = (
			select device_tree_father_id from athena_bes_device_tree where device_tree_id = #{deviceTreeId})
    </select>

    <delete id="deleteBranchMeterLink" parameterType="String">
        delete from athena_bes_branch_meter_link
        where meter_id = #{meterId}
    </delete>

    <delete id="deleteDeviceTree" parameterType="String">
        delete from athena_bes_device_tree where device_tree_id = #{deviceTreeId}
    </delete>

    <delete id="deleteAthenaElectricMeterByMeterId" parameterType="String">
        delete from athena_bes_electric_meter where device_tree_id = #{deviceTreeId}
    </delete>

    <select id="selectAlarmTactics" parameterType="String" resultType="String">
        select t1.id from athena_bes_alarm_tactics t1 left join athena_bes_electric_meter t2 on t1.meter_id = t2.meter_id
        where t1.is_meter = '1' and t2.device_tree_id = #{deviceTreeId}
    </select>
    <select id="getdeviceTreeByid" resultType="com.zc.efounder.JEnterprise.domain.deviceTree.DeviceTree">
        SELECT * FROM athena_bes_device_tree
        where device_tree_id=#{devceid}
    </select>
    <select id="getLightingSubNode" resultType="com.zc.efounder.JEnterprise.domain.deviceTree.DeviceTree">
        SELECT * FROM athena_bes_device_tree where device_tree_father_id = #{ControllerId} and device_node_id!=22  limit 1
    </select>

    <delete id="deleteAlarmRestrainControl" parameterType="String">
        delete from athena_bes_alarm_restrain_control
        where alarm_tactics_id in
        <foreach item="alarmTacticsId" collection="array" open="(" separator="," close=")">
            #{alarmTacticsId}
        </foreach>
    </delete>


    <delete id="deleteAlarmRealtimeData" parameterType="String">
        delete from athena_bes_alarm_realtime_data
        where alarm_tactics_id in
        <foreach item="alarmTacticsId" collection="array" open="(" separator="," close=")">
            #{alarmTacticsId}
        </foreach>
    </delete>

    <delete id="deleteAlarmHistoricalData" parameterType="String">
        delete from athena_bes_alarm_historical_data
        where alarm_tactics_id in
        <foreach item="alarmTacticsId" collection="array" open="(" separator="," close=")">
            #{alarmTacticsId}
        </foreach>
    </delete>

    <delete id="deleteAlarmNotifierLink" parameterType="String">
        delete from athena_bes_alarm_tactics_alarm_notifier_link
        where alarm_tactics_id in
        <foreach item="alarmTacticsId" collection="array" open="(" separator="," close=")">
            #{alarmTacticsId}
        </foreach>
    </delete>

    <delete id="deleteAlarmNotificationRecord" parameterType="String">
        delete from athena_bes_alarm_notification_record
        where alarm_tactics_id in
        <foreach item="alarmTacticsId" collection="array" open="(" separator="," close=")">
            #{alarmTacticsId}
        </foreach>
    </delete>


    <delete id="deleteBusById" parameterType="String">
        delete from athena_bes_bus
        where device_tree_id = #{deviceTreeId}
    </delete>

    <select id="selectMeterList" parameterType="String" resultType="String">
        select device_tree_id deviceTreeId from athena_bes_device_tree
        where device_tree_father_id = #{deviceTreeId}
    </select>

    <delete id="deleteDeviceTreeByList">
        delete from athena_bes_device_tree
        where device_tree_id in
        <foreach item="item" collection="deviceTreeIdList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <delete id="deleteMeterByList">
        delete from athena_bes_electric_meter
        where device_tree_id in
        <foreach item="item" collection="deviceTreeIdList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <delete id="deleteBySyncTreeIdBoolean">
         delete from athena_bes_time_task_sync_sb where point_id =#{treeId}
    </delete>

    <select id="selectAlarmTacticsByList" resultType="String">
        select t1.id from athena_bes_alarm_tactics t1 left join athena_bes_electric_meter t2 on t1.meter_id = t2.meter_id
        where t1.is_meter = '1' and t2.device_tree_id in
        <foreach item="item" collection="deviceTreeIdList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <select id="getSubNode" resultType="String">
        select device_tree_id deviceTreeId  from athena_bes_device_tree
        where device_tree_father_id = #{deviceTreeId}

    </select>

</mapper>
